
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006d18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d2  00800060  00006d18  00006dac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000051  00800232  00800232  00006f7e  2**0
                  ALLOC
  3 .stab         000067b0  00000000  00000000  00006f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003284  00000000  00000000  0000d730  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000109b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00010b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00010d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0001339a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00014868  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00015b74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00015d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0001605b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00016a75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__vector_1>
       8:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__vector_2>
       c:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__vector_3>
      10:	0c 94 d8 15 	jmp	0x2bb0	; 0x2bb0 <__vector_4>
      14:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__vector_5>
      18:	0c 94 3e 16 	jmp	0x2c7c	; 0x2c7c <__vector_6>
      1c:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__vector_7>
      20:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__vector_8>
      24:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <__vector_9>
      28:	0c 94 0a 17 	jmp	0x2e14	; 0x2e14 <__vector_10>
      2c:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	fd e6       	ldi	r31, 0x6D	; 109
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 33       	cpi	r26, 0x32	; 50
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e3       	ldi	r26, 0x32	; 50
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <main>
      8a:	0c 94 8a 36 	jmp	0x6d14	; 0x6d14 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 53 36 	jmp	0x6ca6	; 0x6ca6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e0       	ldi	r26, 0x0C	; 12
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6f 36 	jmp	0x6cde	; 0x6cde <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5f 36 	jmp	0x6cbe	; 0x6cbe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7b 36 	jmp	0x6cf6	; 0x6cf6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5f 36 	jmp	0x6cbe	; 0x6cbe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7b 36 	jmp	0x6cf6	; 0x6cf6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 53 36 	jmp	0x6ca6	; 0x6ca6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e0       	ldi	r24, 0x0C	; 12
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6f 36 	jmp	0x6cde	; 0x6cde <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5b 36 	jmp	0x6cb6	; 0x6cb6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e0       	ldi	r22, 0x0C	; 12
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 77 36 	jmp	0x6cee	; 0x6cee <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5f 36 	jmp	0x6cbe	; 0x6cbe <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7b 36 	jmp	0x6cf6	; 0x6cf6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5f 36 	jmp	0x6cbe	; 0x6cbe <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7b 36 	jmp	0x6cf6	; 0x6cf6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5f 36 	jmp	0x6cbe	; 0x6cbe <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7b 36 	jmp	0x6cf6	; 0x6cf6 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5c 36 	jmp	0x6cb8	; 0x6cb8 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 78 36 	jmp	0x6cf0	; 0x6cf0 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 63 36 	jmp	0x6cc6	; 0x6cc6 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 7f 36 	jmp	0x6cfe	; 0x6cfe <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 5b 36 	jmp	0x6cb6	; 0x6cb6 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 77 36 	jmp	0x6cee	; 0x6cee <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ec 5e       	subi	r30, 0xEC	; 236
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <WDT_voidStart>:
#include "WDT_private.h"
#include "WDT_config.h"
#include "WDT_interface.h"


void WDT_voidStart(WDT_MODE_T Mode){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <WDT_voidStart+0x6>
     ef0:	0f 92       	push	r0
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	89 83       	std	Y+1, r24	; 0x01
	switch(Mode){
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	3b 83       	std	Y+3, r19	; 0x03
     f00:	2a 83       	std	Y+2, r18	; 0x02
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	9b 81       	ldd	r25, Y+3	; 0x03
     f06:	83 30       	cpi	r24, 0x03	; 3
     f08:	91 05       	cpc	r25, r1
     f0a:	09 f4       	brne	.+2      	; 0xf0e <WDT_voidStart+0x24>
     f0c:	70 c0       	rjmp	.+224    	; 0xfee <WDT_voidStart+0x104>
     f0e:	2a 81       	ldd	r18, Y+2	; 0x02
     f10:	3b 81       	ldd	r19, Y+3	; 0x03
     f12:	24 30       	cpi	r18, 0x04	; 4
     f14:	31 05       	cpc	r19, r1
     f16:	84 f4       	brge	.+32     	; 0xf38 <WDT_voidStart+0x4e>
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	9b 81       	ldd	r25, Y+3	; 0x03
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	91 05       	cpc	r25, r1
     f20:	d1 f1       	breq	.+116    	; 0xf96 <WDT_voidStart+0xac>
     f22:	2a 81       	ldd	r18, Y+2	; 0x02
     f24:	3b 81       	ldd	r19, Y+3	; 0x03
     f26:	22 30       	cpi	r18, 0x02	; 2
     f28:	31 05       	cpc	r19, r1
     f2a:	0c f0       	brlt	.+2      	; 0xf2e <WDT_voidStart+0x44>
     f2c:	4a c0       	rjmp	.+148    	; 0xfc2 <WDT_voidStart+0xd8>
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	9b 81       	ldd	r25, Y+3	; 0x03
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	d1 f0       	breq	.+52     	; 0xf6a <WDT_voidStart+0x80>
     f36:	c8 c0       	rjmp	.+400    	; 0x10c8 <WDT_voidStart+0x1de>
     f38:	2a 81       	ldd	r18, Y+2	; 0x02
     f3a:	3b 81       	ldd	r19, Y+3	; 0x03
     f3c:	25 30       	cpi	r18, 0x05	; 5
     f3e:	31 05       	cpc	r19, r1
     f40:	09 f4       	brne	.+2      	; 0xf44 <WDT_voidStart+0x5a>
     f42:	81 c0       	rjmp	.+258    	; 0x1046 <WDT_voidStart+0x15c>
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	9b 81       	ldd	r25, Y+3	; 0x03
     f48:	85 30       	cpi	r24, 0x05	; 5
     f4a:	91 05       	cpc	r25, r1
     f4c:	0c f4       	brge	.+2      	; 0xf50 <WDT_voidStart+0x66>
     f4e:	65 c0       	rjmp	.+202    	; 0x101a <WDT_voidStart+0x130>
     f50:	2a 81       	ldd	r18, Y+2	; 0x02
     f52:	3b 81       	ldd	r19, Y+3	; 0x03
     f54:	26 30       	cpi	r18, 0x06	; 6
     f56:	31 05       	cpc	r19, r1
     f58:	09 f4       	brne	.+2      	; 0xf5c <WDT_voidStart+0x72>
     f5a:	8b c0       	rjmp	.+278    	; 0x1072 <WDT_voidStart+0x188>
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	9b 81       	ldd	r25, Y+3	; 0x03
     f60:	87 30       	cpi	r24, 0x07	; 7
     f62:	91 05       	cpc	r25, r1
     f64:	09 f4       	brne	.+2      	; 0xf68 <WDT_voidStart+0x7e>
     f66:	9b c0       	rjmp	.+310    	; 0x109e <WDT_voidStart+0x1b4>
     f68:	af c0       	rjmp	.+350    	; 0x10c8 <WDT_voidStart+0x1de>
		case WDT_MODE_16K:
			CLR_BIT(WDTCR,WDP0);
     f6a:	a1 e4       	ldi	r26, 0x41	; 65
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e1 e4       	ldi	r30, 0x41	; 65
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	8e 7f       	andi	r24, 0xFE	; 254
     f76:	8c 93       	st	X, r24
			CLR_BIT(WDTCR,WDP1);
     f78:	a1 e4       	ldi	r26, 0x41	; 65
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e1 e4       	ldi	r30, 0x41	; 65
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8d 7f       	andi	r24, 0xFD	; 253
     f84:	8c 93       	st	X, r24
			CLR_BIT(WDTCR,WDP2);
     f86:	a1 e4       	ldi	r26, 0x41	; 65
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e1 e4       	ldi	r30, 0x41	; 65
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	8b 7f       	andi	r24, 0xFB	; 251
     f92:	8c 93       	st	X, r24
     f94:	99 c0       	rjmp	.+306    	; 0x10c8 <WDT_voidStart+0x1de>
			break;
		case WDT_MODE_32K:
			SET_BIT(WDTCR,WDP0);
     f96:	a1 e4       	ldi	r26, 0x41	; 65
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e1 e4       	ldi	r30, 0x41	; 65
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	81 60       	ori	r24, 0x01	; 1
     fa2:	8c 93       	st	X, r24
			CLR_BIT(WDTCR,WDP1);
     fa4:	a1 e4       	ldi	r26, 0x41	; 65
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e1 e4       	ldi	r30, 0x41	; 65
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	8d 7f       	andi	r24, 0xFD	; 253
     fb0:	8c 93       	st	X, r24
			CLR_BIT(WDTCR,WDP2);
     fb2:	a1 e4       	ldi	r26, 0x41	; 65
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e1 e4       	ldi	r30, 0x41	; 65
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8b 7f       	andi	r24, 0xFB	; 251
     fbe:	8c 93       	st	X, r24
     fc0:	83 c0       	rjmp	.+262    	; 0x10c8 <WDT_voidStart+0x1de>
			break;
		case WDT_MODE_64K:
			CLR_BIT(WDTCR,WDP0);
     fc2:	a1 e4       	ldi	r26, 0x41	; 65
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e1 e4       	ldi	r30, 0x41	; 65
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	8e 7f       	andi	r24, 0xFE	; 254
     fce:	8c 93       	st	X, r24
			SET_BIT(WDTCR,WDP1);
     fd0:	a1 e4       	ldi	r26, 0x41	; 65
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e1 e4       	ldi	r30, 0x41	; 65
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	82 60       	ori	r24, 0x02	; 2
     fdc:	8c 93       	st	X, r24
			CLR_BIT(WDTCR,WDP2);
     fde:	a1 e4       	ldi	r26, 0x41	; 65
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e1 e4       	ldi	r30, 0x41	; 65
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8b 7f       	andi	r24, 0xFB	; 251
     fea:	8c 93       	st	X, r24
     fec:	6d c0       	rjmp	.+218    	; 0x10c8 <WDT_voidStart+0x1de>
			break;
		case WDT_MODE_128K:
			SET_BIT(WDTCR,WDP0);
     fee:	a1 e4       	ldi	r26, 0x41	; 65
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e1 e4       	ldi	r30, 0x41	; 65
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	81 60       	ori	r24, 0x01	; 1
     ffa:	8c 93       	st	X, r24
			SET_BIT(WDTCR,WDP1);
     ffc:	a1 e4       	ldi	r26, 0x41	; 65
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e1 e4       	ldi	r30, 0x41	; 65
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	82 60       	ori	r24, 0x02	; 2
    1008:	8c 93       	st	X, r24
			CLR_BIT(WDTCR,WDP2);
    100a:	a1 e4       	ldi	r26, 0x41	; 65
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e1 e4       	ldi	r30, 0x41	; 65
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8b 7f       	andi	r24, 0xFB	; 251
    1016:	8c 93       	st	X, r24
    1018:	57 c0       	rjmp	.+174    	; 0x10c8 <WDT_voidStart+0x1de>
			break;
		case WDT_MODE_256K:
			CLR_BIT(WDTCR,WDP0);
    101a:	a1 e4       	ldi	r26, 0x41	; 65
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e1 e4       	ldi	r30, 0x41	; 65
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	8e 7f       	andi	r24, 0xFE	; 254
    1026:	8c 93       	st	X, r24
			CLR_BIT(WDTCR,WDP1);
    1028:	a1 e4       	ldi	r26, 0x41	; 65
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e1 e4       	ldi	r30, 0x41	; 65
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8d 7f       	andi	r24, 0xFD	; 253
    1034:	8c 93       	st	X, r24
			SET_BIT(WDTCR,WDP2);
    1036:	a1 e4       	ldi	r26, 0x41	; 65
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e1 e4       	ldi	r30, 0x41	; 65
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	84 60       	ori	r24, 0x04	; 4
    1042:	8c 93       	st	X, r24
    1044:	41 c0       	rjmp	.+130    	; 0x10c8 <WDT_voidStart+0x1de>
			break;
		case WDT_MODE_512K:
			SET_BIT(WDTCR,WDP0);
    1046:	a1 e4       	ldi	r26, 0x41	; 65
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e1 e4       	ldi	r30, 0x41	; 65
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	81 60       	ori	r24, 0x01	; 1
    1052:	8c 93       	st	X, r24
			CLR_BIT(WDTCR,WDP1);
    1054:	a1 e4       	ldi	r26, 0x41	; 65
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e1 e4       	ldi	r30, 0x41	; 65
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	8d 7f       	andi	r24, 0xFD	; 253
    1060:	8c 93       	st	X, r24
			SET_BIT(WDTCR,WDP2);
    1062:	a1 e4       	ldi	r26, 0x41	; 65
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e1 e4       	ldi	r30, 0x41	; 65
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	84 60       	ori	r24, 0x04	; 4
    106e:	8c 93       	st	X, r24
    1070:	2b c0       	rjmp	.+86     	; 0x10c8 <WDT_voidStart+0x1de>
							break;
		case WDT_MODE_1024K:
			CLR_BIT(WDTCR,WDP0);
    1072:	a1 e4       	ldi	r26, 0x41	; 65
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e1 e4       	ldi	r30, 0x41	; 65
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	8e 7f       	andi	r24, 0xFE	; 254
    107e:	8c 93       	st	X, r24
			SET_BIT(WDTCR,WDP1);
    1080:	a1 e4       	ldi	r26, 0x41	; 65
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e1 e4       	ldi	r30, 0x41	; 65
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	82 60       	ori	r24, 0x02	; 2
    108c:	8c 93       	st	X, r24
			SET_BIT(WDTCR,WDP2);
    108e:	a1 e4       	ldi	r26, 0x41	; 65
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e1 e4       	ldi	r30, 0x41	; 65
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	84 60       	ori	r24, 0x04	; 4
    109a:	8c 93       	st	X, r24
    109c:	15 c0       	rjmp	.+42     	; 0x10c8 <WDT_voidStart+0x1de>
			break;
		case WDT_MODE_2048K:
			SET_BIT(WDTCR,WDP0);
    109e:	a1 e4       	ldi	r26, 0x41	; 65
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e1 e4       	ldi	r30, 0x41	; 65
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	81 60       	ori	r24, 0x01	; 1
    10aa:	8c 93       	st	X, r24
			SET_BIT(WDTCR,WDP1);
    10ac:	a1 e4       	ldi	r26, 0x41	; 65
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e1 e4       	ldi	r30, 0x41	; 65
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	82 60       	ori	r24, 0x02	; 2
    10b8:	8c 93       	st	X, r24
			SET_BIT(WDTCR,WDP2);
    10ba:	a1 e4       	ldi	r26, 0x41	; 65
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e1 e4       	ldi	r30, 0x41	; 65
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	84 60       	ori	r24, 0x04	; 4
    10c6:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
	SET_BIT(WDTCR,WDE);
    10c8:	a1 e4       	ldi	r26, 0x41	; 65
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e1 e4       	ldi	r30, 0x41	; 65
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	88 60       	ori	r24, 0x08	; 8
    10d4:	8c 93       	st	X, r24
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <WDT_voidDisable>:

void WDT_voidDisable(void){
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
	WDTCR|=0x18;
    10ea:	a1 e4       	ldi	r26, 0x41	; 65
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e1 e4       	ldi	r30, 0x41	; 65
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	88 61       	ori	r24, 0x18	; 24
    10f6:	8c 93       	st	X, r24
	WDTCR=0;
    10f8:	e1 e4       	ldi	r30, 0x41	; 65
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	10 82       	st	Z, r1
}
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <UART_voidIni>:

#include "UART_private.h"
#include "UART_config.h"
#include "UART_interface.h"
//UART
void UART_voidIni(u32 copy_u32BandRate){
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	00 d0       	rcall	.+0      	; 0x110a <UART_voidIni+0x6>
    110a:	00 d0       	rcall	.+0      	; 0x110c <UART_voidIni+0x8>
    110c:	00 d0       	rcall	.+0      	; 0x110e <UART_voidIni+0xa>
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	6b 83       	std	Y+3, r22	; 0x03
    1114:	7c 83       	std	Y+4, r23	; 0x04
    1116:	8d 83       	std	Y+5, r24	; 0x05
    1118:	9e 83       	std	Y+6, r25	; 0x06
	u16 UBRR_vlue=0;
    111a:	1a 82       	std	Y+2, r1	; 0x02
    111c:	19 82       	std	Y+1, r1	; 0x01
	#if(UART_DOUBLE_SPEED==UART_DOUBLE_SPEED_ENABLED)
	SET_BIT(UART->UCSRA, U2X);
    111e:	a9 e2       	ldi	r26, 0x29	; 41
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e9 e2       	ldi	r30, 0x29	; 41
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	82 81       	ldd	r24, Z+2	; 0x02
    1128:	82 60       	ori	r24, 0x02	; 2
    112a:	12 96       	adiw	r26, 0x02	; 2
    112c:	8c 93       	st	X, r24
	CLR_BIT(UART->UCSRA, U2X);
	#else
	#error "wrong configration for UART_DOUBLE_SPEED"
	#endif
	#if(UART_RECEIVE==UART_RECEIVE_ENABLED)
	SET_BIT(UART->UCSRB,RXEN);
    112e:	a9 e2       	ldi	r26, 0x29	; 41
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e9 e2       	ldi	r30, 0x29	; 41
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	81 81       	ldd	r24, Z+1	; 0x01
    1138:	80 61       	ori	r24, 0x10	; 16
    113a:	11 96       	adiw	r26, 0x01	; 1
    113c:	8c 93       	st	X, r24
	CLR_BIT(UART->UCSRB,RXEN);
	#else
	#error "wrong configration for UART_RECEIVE"
	#endif
	#if(UART_TRANSMIT==UART_TRANSMIT_ENABLED)
	SET_BIT(UART->UCSRB,TXEN);
    113e:	a9 e2       	ldi	r26, 0x29	; 41
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e9 e2       	ldi	r30, 0x29	; 41
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	81 81       	ldd	r24, Z+1	; 0x01
    1148:	88 60       	ori	r24, 0x08	; 8
    114a:	11 96       	adiw	r26, 0x01	; 1
    114c:	8c 93       	st	X, r24
	CLR_BIT(UART->UCSRB,TXEN);
	#else
	#error "wrong configration for UART_TRANSMIT"
	#endif
	//select UCSRC
	SET_BIT(UART->UCSRC_UBRRH,URSEL);
    114e:	a9 e2       	ldi	r26, 0x29	; 41
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e9 e2       	ldi	r30, 0x29	; 41
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	87 89       	ldd	r24, Z+23	; 0x17
    1158:	80 68       	ori	r24, 0x80	; 128
    115a:	57 96       	adiw	r26, 0x17	; 23
    115c:	8c 93       	st	X, r24
	//select Asynchronous Operation
	CLR_BIT(UART->UCSRC_UBRRH, UMSEL);
    115e:	a9 e2       	ldi	r26, 0x29	; 41
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e9 e2       	ldi	r30, 0x29	; 41
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	87 89       	ldd	r24, Z+23	; 0x17
    1168:	8f 7b       	andi	r24, 0xBF	; 191
    116a:	57 96       	adiw	r26, 0x17	; 23
    116c:	8c 93       	st	X, r24
	//select Parity Mode Disabled
	CLR_BIT(UART->UCSRC_UBRRH,UPM0);
    116e:	a9 e2       	ldi	r26, 0x29	; 41
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e9 e2       	ldi	r30, 0x29	; 41
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	87 89       	ldd	r24, Z+23	; 0x17
    1178:	8f 7e       	andi	r24, 0xEF	; 239
    117a:	57 96       	adiw	r26, 0x17	; 23
    117c:	8c 93       	st	X, r24
	CLR_BIT(UART->UCSRC_UBRRH,UPM1);
    117e:	a9 e2       	ldi	r26, 0x29	; 41
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e9 e2       	ldi	r30, 0x29	; 41
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	87 89       	ldd	r24, Z+23	; 0x17
    1188:	8f 7d       	andi	r24, 0xDF	; 223
    118a:	57 96       	adiw	r26, 0x17	; 23
    118c:	8c 93       	st	X, r24
	//SELECT Stop Bit Select
	CLR_BIT(UART->UCSRC_UBRRH,USBS);
    118e:	a9 e2       	ldi	r26, 0x29	; 41
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e9 e2       	ldi	r30, 0x29	; 41
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	87 89       	ldd	r24, Z+23	; 0x17
    1198:	87 7f       	andi	r24, 0xF7	; 247
    119a:	57 96       	adiw	r26, 0x17	; 23
    119c:	8c 93       	st	X, r24
	//Select Character Size 8-bit
	SET_BIT(UART->UCSRC_UBRRH,UCSZ0);
    119e:	a9 e2       	ldi	r26, 0x29	; 41
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e9 e2       	ldi	r30, 0x29	; 41
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	87 89       	ldd	r24, Z+23	; 0x17
    11a8:	82 60       	ori	r24, 0x02	; 2
    11aa:	57 96       	adiw	r26, 0x17	; 23
    11ac:	8c 93       	st	X, r24
	SET_BIT(UART->UCSRC_UBRRH,UCSZ1);
    11ae:	a9 e2       	ldi	r26, 0x29	; 41
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e9 e2       	ldi	r30, 0x29	; 41
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	87 89       	ldd	r24, Z+23	; 0x17
    11b8:	84 60       	ori	r24, 0x04	; 4
    11ba:	57 96       	adiw	r26, 0x17	; 23
    11bc:	8c 93       	st	X, r24
	CLR_BIT(UART->UCSRB,UCSZ2);
    11be:	a9 e2       	ldi	r26, 0x29	; 41
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e9 e2       	ldi	r30, 0x29	; 41
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	81 81       	ldd	r24, Z+1	; 0x01
    11c8:	8b 7f       	andi	r24, 0xFB	; 251
    11ca:	11 96       	adiw	r26, 0x01	; 1
    11cc:	8c 93       	st	X, r24
	/*
	 * Equations for Calculating Baud Rate Register Setting
	 */
	#if(UART_DOUBLE_SPEED==UART_DOUBLE_SPEED_ENABLED)
	UBRR_vlue=((UART_CPU_F_MHZ*1E6)/(8*copy_u32BandRate))-1;
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	ad 81       	ldd	r26, Y+5	; 0x05
    11d4:	be 81       	ldd	r27, Y+6	; 0x06
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	aa 1f       	adc	r26, r26
    11dc:	bb 1f       	adc	r27, r27
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	aa 1f       	adc	r26, r26
    11e4:	bb 1f       	adc	r27, r27
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	aa 1f       	adc	r26, r26
    11ec:	bb 1f       	adc	r27, r27
    11ee:	bc 01       	movw	r22, r24
    11f0:	cd 01       	movw	r24, r26
    11f2:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    11f6:	9b 01       	movw	r18, r22
    11f8:	ac 01       	movw	r20, r24
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	74 e2       	ldi	r23, 0x24	; 36
    11fe:	84 ef       	ldi	r24, 0xF4	; 244
    1200:	9a e4       	ldi	r25, 0x4A	; 74
    1202:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	bc 01       	movw	r22, r24
    120c:	cd 01       	movw	r24, r26
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e8       	ldi	r20, 0x80	; 128
    1214:	5f e3       	ldi	r21, 0x3F	; 63
    1216:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	bc 01       	movw	r22, r24
    1220:	cd 01       	movw	r24, r26
    1222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	89 83       	std	Y+1, r24	; 0x01
	#elif(UART_DOUBLE_SPEED==UART_DOUBLE_SPEED_DISABLED)
	UBRR_vlue=((UART_CPU_F_MHZ*1E6)/(16*copy_u32BandRate))-1;
	#else
	#error "wrong configration for UART_DOUBLE_SPEED"
	#endif
	UART->UBRRL=UBRR_vlue;
    122e:	e9 e2       	ldi	r30, 0x29	; 41
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	80 83       	st	Z, r24
	//select UBRRH
	CLR_BIT(UART->UCSRC_UBRRH,URSEL);
    1236:	a9 e2       	ldi	r26, 0x29	; 41
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e9 e2       	ldi	r30, 0x29	; 41
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	87 89       	ldd	r24, Z+23	; 0x17
    1240:	8f 77       	andi	r24, 0x7F	; 127
    1242:	57 96       	adiw	r26, 0x17	; 23
    1244:	8c 93       	st	X, r24
    1246:	57 97       	sbiw	r26, 0x17	; 23
	UART->UCSRC_UBRRH=((UBRR_vlue>>8)&(0x0F));
    1248:	e9 e2       	ldi	r30, 0x29	; 41
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	9a 81       	ldd	r25, Y+2	; 0x02
    1250:	89 2f       	mov	r24, r25
    1252:	99 27       	eor	r25, r25
    1254:	8f 70       	andi	r24, 0x0F	; 15
    1256:	87 8b       	std	Z+23, r24	; 0x17
}
    1258:	26 96       	adiw	r28, 0x06	; 6
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <UART_voidTransmit>:
void UART_voidTransmit(u8 copy_u8Data){
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	0f 92       	push	r0
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UART->UCSRA,UDRE)==0);
    1276:	e9 e2       	ldi	r30, 0x29	; 41
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	82 81       	ldd	r24, Z+2	; 0x02
    127c:	82 95       	swap	r24
    127e:	86 95       	lsr	r24
    1280:	87 70       	andi	r24, 0x07	; 7
    1282:	88 2f       	mov	r24, r24
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	81 70       	andi	r24, 0x01	; 1
    1288:	90 70       	andi	r25, 0x00	; 0
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	a1 f3       	breq	.-24     	; 0x1276 <UART_voidTransmit+0xc>
	UART->UDR=copy_u8Data;
    128e:	e9 e2       	ldi	r30, 0x29	; 41
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	83 83       	std	Z+3, r24	; 0x03
	while(GET_BIT(UART->UCSRA,TXC)==0);
    1296:	e9 e2       	ldi	r30, 0x29	; 41
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	82 81       	ldd	r24, Z+2	; 0x02
    129c:	82 95       	swap	r24
    129e:	86 95       	lsr	r24
    12a0:	86 95       	lsr	r24
    12a2:	83 70       	andi	r24, 0x03	; 3
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	81 70       	andi	r24, 0x01	; 1
    12aa:	90 70       	andi	r25, 0x00	; 0
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	99 f3       	breq	.-26     	; 0x1296 <UART_voidTransmit+0x2c>
}
    12b0:	0f 90       	pop	r0
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <UART_u8Receive>:
u8 	 UART_u8Receive(void){
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
	#if(UART_RECEIVE==UART_RECEIVE_ENABLED)
	while(GET_BIT(UART->UCSRA,RXC)==0);
    12c0:	e9 e2       	ldi	r30, 0x29	; 41
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	82 81       	ldd	r24, Z+2	; 0x02
    12c6:	88 23       	and	r24, r24
    12c8:	dc f7       	brge	.-10     	; 0x12c0 <UART_u8Receive+0x8>
	#endif
	return UART->UDR;
    12ca:	e9 e2       	ldi	r30, 0x29	; 41
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	83 81       	ldd	r24, Z+3	; 0x03
}
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <UART_u8Transceive>:
u8	 UART_u8Transceive(u8 copy_u8Data){
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	89 83       	std	Y+1, r24	; 0x01
	UART_voidTransmit(copy_u8Data);
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	0e 94 35 09 	call	0x126a	; 0x126a <UART_voidTransmit>
	return UART_u8Receive();
    12e8:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <UART_u8Receive>
}
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <UART_voidTransmitString>:
void UART_voidTransmitString(u8* ptr_u8Data){
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <UART_voidTransmitString+0x6>
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <UART_voidTransmitString+0x8>
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <UART_voidTransmitString+0xa>
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	9e 83       	std	Y+6, r25	; 0x06
    1304:	8d 83       	std	Y+5, r24	; 0x05
	u32 local_u32Counter=0;
    1306:	19 82       	std	Y+1, r1	; 0x01
    1308:	1a 82       	std	Y+2, r1	; 0x02
    130a:	1b 82       	std	Y+3, r1	; 0x03
    130c:	1c 82       	std	Y+4, r1	; 0x04
	for(local_u32Counter=0;ptr_u8Data[local_u32Counter]!='\0';local_u32Counter++){
    130e:	19 82       	std	Y+1, r1	; 0x01
    1310:	1a 82       	std	Y+2, r1	; 0x02
    1312:	1b 82       	std	Y+3, r1	; 0x03
    1314:	1c 82       	std	Y+4, r1	; 0x04
    1316:	15 c0       	rjmp	.+42     	; 0x1342 <UART_voidTransmitString+0x4e>
		UART_voidTransmit(ptr_u8Data[local_u32Counter]);
    1318:	29 81       	ldd	r18, Y+1	; 0x01
    131a:	3a 81       	ldd	r19, Y+2	; 0x02
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	fc 01       	movw	r30, r24
    1322:	e2 0f       	add	r30, r18
    1324:	f3 1f       	adc	r31, r19
    1326:	80 81       	ld	r24, Z
    1328:	0e 94 35 09 	call	0x126a	; 0x126a <UART_voidTransmit>
	UART_voidTransmit(copy_u8Data);
	return UART_u8Receive();
}
void UART_voidTransmitString(u8* ptr_u8Data){
	u32 local_u32Counter=0;
	for(local_u32Counter=0;ptr_u8Data[local_u32Counter]!='\0';local_u32Counter++){
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	9a 81       	ldd	r25, Y+2	; 0x02
    1330:	ab 81       	ldd	r26, Y+3	; 0x03
    1332:	bc 81       	ldd	r27, Y+4	; 0x04
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	a1 1d       	adc	r26, r1
    1338:	b1 1d       	adc	r27, r1
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	ab 83       	std	Y+3, r26	; 0x03
    1340:	bc 83       	std	Y+4, r27	; 0x04
    1342:	29 81       	ldd	r18, Y+1	; 0x01
    1344:	3a 81       	ldd	r19, Y+2	; 0x02
    1346:	8d 81       	ldd	r24, Y+5	; 0x05
    1348:	9e 81       	ldd	r25, Y+6	; 0x06
    134a:	fc 01       	movw	r30, r24
    134c:	e2 0f       	add	r30, r18
    134e:	f3 1f       	adc	r31, r19
    1350:	80 81       	ld	r24, Z
    1352:	88 23       	and	r24, r24
    1354:	09 f7       	brne	.-62     	; 0x1318 <UART_voidTransmitString+0x24>
		UART_voidTransmit(ptr_u8Data[local_u32Counter]);
	}
}
    1356:	26 96       	adiw	r28, 0x06	; 6
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <TWI_voidInit>:
 * TWI_voidInit()
 *
 * Set up the TWI module in the processor for I2C master mode.  SCL rate will
 * be a maximum of 500kHz if the CPU frequency is 8MHz.
 */
void TWI_voidInit(u32 copy_u32TWISpeed){
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	00 d0       	rcall	.+0      	; 0x1372 <TWI_voidInit+0xa>
    1372:	00 d0       	rcall	.+0      	; 0x1374 <TWI_voidInit+0xc>
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	69 83       	std	Y+1, r22	; 0x01
    137a:	7a 83       	std	Y+2, r23	; 0x02
    137c:	8b 83       	std	Y+3, r24	; 0x03
    137e:	9c 83       	std	Y+4, r25	; 0x04
	//select Prescaler =1
	TWI->TWSR 	&=	0XFC; //make the 3LSB=0 "TWPS1 TWPS0" also you can use 0b11111100
    1380:	a0 e2       	ldi	r26, 0x20	; 32
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e0 e2       	ldi	r30, 0x20	; 32
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	81 81       	ldd	r24, Z+1	; 0x01
    138a:	8c 7f       	andi	r24, 0xFC	; 252
    138c:	11 96       	adiw	r26, 0x01	; 1
    138e:	8c 93       	st	X, r24

	//select speed of TWI
	if(copy_u32TWISpeed>TWI_MAX_SPEED){
    1390:	69 81       	ldd	r22, Y+1	; 0x01
    1392:	7a 81       	ldd	r23, Y+2	; 0x02
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	bc 01       	movw	r22, r24
    13a2:	cd 01       	movw	r24, r26
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	34 e2       	ldi	r19, 0x24	; 36
    13a8:	44 ef       	ldi	r20, 0xF4	; 244
    13aa:	58 e4       	ldi	r21, 0x48	; 72
    13ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13b0:	18 16       	cp	r1, r24
    13b2:	24 f4       	brge	.+8      	; 0x13bc <TWI_voidInit+0x54>
		TWI->TWBR	=	0;
    13b4:	e0 e2       	ldi	r30, 0x20	; 32
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	10 82       	st	Z, r1
    13ba:	45 c0       	rjmp	.+138    	; 0x1446 <TWI_voidInit+0xde>
	}
	else if(copy_u32TWISpeed<TWI_MIN_SPEED){
    13bc:	69 81       	ldd	r22, Y+1	; 0x01
    13be:	7a 81       	ldd	r23, Y+2	; 0x02
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	bc 01       	movw	r22, r24
    13ce:	cd 01       	movw	r24, r26
    13d0:	2f ec       	ldi	r18, 0xCF	; 207
    13d2:	30 e3       	ldi	r19, 0x30	; 48
    13d4:	43 e7       	ldi	r20, 0x73	; 115
    13d6:	55 e4       	ldi	r21, 0x45	; 69
    13d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13dc:	88 23       	and	r24, r24
    13de:	2c f4       	brge	.+10     	; 0x13ea <TWI_voidInit+0x82>
		TWI->TWBR	=	0xFF;
    13e0:	e0 e2       	ldi	r30, 0x20	; 32
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	8f ef       	ldi	r24, 0xFF	; 255
    13e6:	80 83       	st	Z, r24
    13e8:	2e c0       	rjmp	.+92     	; 0x1446 <TWI_voidInit+0xde>
	}
	else{
		TWI->TWBR	= (u8)((((f32)TWI_CPU_FREQUENCY_HZ/copy_u32TWISpeed)-16)/2);
    13ea:	00 e2       	ldi	r16, 0x20	; 32
    13ec:	10 e0       	ldi	r17, 0x00	; 0
    13ee:	69 81       	ldd	r22, Y+1	; 0x01
    13f0:	7a 81       	ldd	r23, Y+2	; 0x02
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    13fa:	9b 01       	movw	r18, r22
    13fc:	ac 01       	movw	r20, r24
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	74 e2       	ldi	r23, 0x24	; 36
    1402:	84 ef       	ldi	r24, 0xF4	; 244
    1404:	9a e4       	ldi	r25, 0x4A	; 74
    1406:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	bc 01       	movw	r22, r24
    1410:	cd 01       	movw	r24, r26
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e8       	ldi	r20, 0x80	; 128
    1418:	51 e4       	ldi	r21, 0x41	; 65
    141a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	bc 01       	movw	r22, r24
    1424:	cd 01       	movw	r24, r26
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e0       	ldi	r20, 0x00	; 0
    142c:	50 e4       	ldi	r21, 0x40	; 64
    142e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	bc 01       	movw	r22, r24
    1438:	cd 01       	movw	r24, r26
    143a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	f8 01       	movw	r30, r16
    1444:	80 83       	st	Z, r24
	}
	SET_BIT(TWI->TWCR,TWEN);
    1446:	a0 e2       	ldi	r26, 0x20	; 32
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e0 e2       	ldi	r30, 0x20	; 32
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	86 a9       	ldd	r24, Z+54	; 0x36
    1450:	84 60       	ori	r24, 0x04	; 4
    1452:	d6 96       	adiw	r26, 0x36	; 54
    1454:	8c 93       	st	X, r24
    1456:	d6 97       	sbiw	r26, 0x36	; 54
}
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	08 95       	ret

0000146a <TWI_ErrorStateStart>:
 * TWI_u8Start()
 *
 * Generate a Start condition on the I2C bus.  Returns an error code if the bus
 * is not idle.
 */
ErrorState TWI_ErrorStateStart(void){
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <TWI_ErrorStateStart+0x6>
    1470:	0f 92       	push	r0
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
	TWI->TWCR	=		BIT_VLE(TWEN)|BIT_VLE(TWINT)|BIT_VLE(TWSTA);
    1476:	e0 e2       	ldi	r30, 0x20	; 32
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	84 ea       	ldi	r24, 0xA4	; 164
    147c:	86 ab       	std	Z+54, r24	; 0x36
	while(GET_BIT(TWI->TWCR,TWINT)==0); // wait until TWI end its job
    147e:	e0 e2       	ldi	r30, 0x20	; 32
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	86 a9       	ldd	r24, Z+54	; 0x36
    1484:	88 23       	and	r24, r24
    1486:	dc f7       	brge	.-10     	; 0x147e <TWI_ErrorStateStart+0x14>
	switch(TWI_STATUS){
    1488:	e0 e2       	ldi	r30, 0x20	; 32
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	81 81       	ldd	r24, Z+1	; 0x01
    148e:	88 2f       	mov	r24, r24
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	9c 01       	movw	r18, r24
    1494:	28 7f       	andi	r18, 0xF8	; 248
    1496:	30 70       	andi	r19, 0x00	; 0
    1498:	3b 83       	std	Y+3, r19	; 0x03
    149a:	2a 83       	std	Y+2, r18	; 0x02
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	9b 81       	ldd	r25, Y+3	; 0x03
    14a0:	88 30       	cpi	r24, 0x08	; 8
    14a2:	91 05       	cpc	r25, r1
    14a4:	29 f0       	breq	.+10     	; 0x14b0 <TWI_ErrorStateStart+0x46>
    14a6:	2a 81       	ldd	r18, Y+2	; 0x02
    14a8:	3b 81       	ldd	r19, Y+3	; 0x03
    14aa:	20 31       	cpi	r18, 0x10	; 16
    14ac:	31 05       	cpc	r19, r1
    14ae:	11 f4       	brne	.+4      	; 0x14b4 <TWI_ErrorStateStart+0x4a>
	case TWI_START:
	case TWI_REP_START:
		return PASS;
    14b0:	19 82       	std	Y+1, r1	; 0x01
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <TWI_ErrorStateStart+0x4e>
		break;
	default:
		return FAIL;
    14b4:	31 e0       	ldi	r19, 0x01	; 1
    14b6:	39 83       	std	Y+1, r19	; 0x01
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
		break;

	}
}
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <TWI_voidStop>:
/*
 * TWI_voidStop()
 *
 * Generate a Stop condition on the I2C bus.
 */
void TWI_voidStop(void){
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
	TWI->TWCR	=		BIT_VLE(TWEN)|BIT_VLE(TWINT)|BIT_VLE(TWSTO);
    14ce:	e0 e2       	ldi	r30, 0x20	; 32
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	84 e9       	ldi	r24, 0x94	; 148
    14d4:	86 ab       	std	Z+54, r24	; 0x36
	while(GET_BIT(TWI->TWCR,TWSTO)==1); // wait until TWI end its job When the STOP condition is executed on the bus, the TWSTO bit is cleared
    14d6:	e0 e2       	ldi	r30, 0x20	; 32
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	86 a9       	ldd	r24, Z+54	; 0x36
    14dc:	82 95       	swap	r24
    14de:	8f 70       	andi	r24, 0x0F	; 15
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	81 70       	andi	r24, 0x01	; 1
    14e6:	90 70       	andi	r25, 0x00	; 0
    14e8:	88 23       	and	r24, r24
    14ea:	a9 f7       	brne	.-22     	; 0x14d6 <TWI_voidStop+0x10>
}
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <TWI_ErrorStatePutChar>:
/*
 * TWI_u8PutChar()
 *
 * Put a byte on the I2C bus.  Returns an error code if the bus is not idle.
 */
ErrorState TWI_ErrorStatePutChar(u8 copy_u8Data){
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <TWI_ErrorStatePutChar+0x6>
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <TWI_ErrorStatePutChar+0x8>
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	89 83       	std	Y+1, r24	; 0x01
	TWI->TWDR=copy_u8Data;
    1500:	e0 e2       	ldi	r30, 0x20	; 32
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	83 83       	std	Z+3, r24	; 0x03
	TWI->TWCR	=		BIT_VLE(TWEN)|BIT_VLE(TWINT);
    1508:	e0 e2       	ldi	r30, 0x20	; 32
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	84 e8       	ldi	r24, 0x84	; 132
    150e:	86 ab       	std	Z+54, r24	; 0x36
	while(GET_BIT(TWI->TWCR,TWINT)==0); // wait until TWI end its job
    1510:	e0 e2       	ldi	r30, 0x20	; 32
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	86 a9       	ldd	r24, Z+54	; 0x36
    1516:	88 23       	and	r24, r24
    1518:	dc f7       	brge	.-10     	; 0x1510 <TWI_ErrorStatePutChar+0x1e>
	switch(TWI_STATUS){
    151a:	e0 e2       	ldi	r30, 0x20	; 32
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	81 81       	ldd	r24, Z+1	; 0x01
    1520:	88 2f       	mov	r24, r24
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	9c 01       	movw	r18, r24
    1526:	28 7f       	andi	r18, 0xF8	; 248
    1528:	30 70       	andi	r19, 0x00	; 0
    152a:	3c 83       	std	Y+4, r19	; 0x04
    152c:	2b 83       	std	Y+3, r18	; 0x03
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	88 32       	cpi	r24, 0x28	; 40
    1534:	91 05       	cpc	r25, r1
    1536:	51 f0       	breq	.+20     	; 0x154c <TWI_ErrorStatePutChar+0x5a>
    1538:	2b 81       	ldd	r18, Y+3	; 0x03
    153a:	3c 81       	ldd	r19, Y+4	; 0x04
    153c:	20 34       	cpi	r18, 0x40	; 64
    153e:	31 05       	cpc	r19, r1
    1540:	29 f0       	breq	.+10     	; 0x154c <TWI_ErrorStatePutChar+0x5a>
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	88 31       	cpi	r24, 0x18	; 24
    1548:	91 05       	cpc	r25, r1
    154a:	11 f4       	brne	.+4      	; 0x1550 <TWI_ErrorStatePutChar+0x5e>
		case TWI_MT_SLA_ACK:
		case TWI_MT_DATA_ACK:
		case TWI_MR_SLA_ACK:
			return PASS;
    154c:	1a 82       	std	Y+2, r1	; 0x02
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <TWI_ErrorStatePutChar+0x62>
			break;
		default:
			return FAIL;
    1550:	91 e0       	ldi	r25, 0x01	; 1
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
			break;
	}

}
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <TWI_u8GetCharAck>:
/*
 * TWI_u8GetCharAck()
 *
 * Receive a byte from then put an Acknowledge on the I2C bus.
 */
u8 TWI_u8GetCharAck(void){
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
	TWI->TWCR	=		BIT_VLE(TWEN)|BIT_VLE(TWINT)|BIT_VLE(TWEA);
    156c:	e0 e2       	ldi	r30, 0x20	; 32
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	84 ec       	ldi	r24, 0xC4	; 196
    1572:	86 ab       	std	Z+54, r24	; 0x36
	while(GET_BIT(TWI->TWCR,TWINT)==0); // wait until TWI end its job
    1574:	e0 e2       	ldi	r30, 0x20	; 32
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	86 a9       	ldd	r24, Z+54	; 0x36
    157a:	88 23       	and	r24, r24
    157c:	dc f7       	brge	.-10     	; 0x1574 <TWI_u8GetCharAck+0x10>
	return TWI->TWDR;
    157e:	e0 e2       	ldi	r30, 0x20	; 32
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	83 81       	ldd	r24, Z+3	; 0x03
}
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <TWI_u8GetCharNack>:
/*
 * TWI_u8GetCharNack()
 *
 * Receive a byte from then put a Not Acknowledge on the I2C bus.
 */
u8 TWI_u8GetCharNack(void){
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
		TWI->TWCR	=	BIT_VLE(TWEN)|BIT_VLE(TWINT);
    1592:	e0 e2       	ldi	r30, 0x20	; 32
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	84 e8       	ldi	r24, 0x84	; 132
    1598:	86 ab       	std	Z+54, r24	; 0x36
		while(GET_BIT(TWI->TWCR,TWINT)==0); // wait until TWI end its job
    159a:	e0 e2       	ldi	r30, 0x20	; 32
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	86 a9       	ldd	r24, Z+54	; 0x36
    15a0:	88 23       	and	r24, r24
    15a2:	dc f7       	brge	.-10     	; 0x159a <TWI_u8GetCharNack+0x10>
		return TWI->TWDR;
    15a4:	e0 e2       	ldi	r30, 0x20	; 32
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	83 81       	ldd	r24, Z+3	; 0x03
}
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <TWI_ErrorStateWrite>:
ErrorState TWI_ErrorStateWrite(
    u8 copy_u8SlaveAdrs,  	/* Device slave address */
    u8 copy_u8Len,			/* Number of bytes to write */
    u8 copy_u8adrs,			/* Device register to start writing to */
    u8 *ptr_u8buf			/* RAM address of the bytes to write */
) {
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	28 97       	sbiw	r28, 0x08	; 8
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	8b 83       	std	Y+3, r24	; 0x03
    15c6:	6c 83       	std	Y+4, r22	; 0x04
    15c8:	4d 83       	std	Y+5, r20	; 0x05
    15ca:	3f 83       	std	Y+7, r19	; 0x07
    15cc:	2e 83       	std	Y+6, r18	; 0x06
    u8 local_u8RestartsCounter = MAX_RESTARTS;
    15ce:	84 e1       	ldi	r24, 0x14	; 20
    15d0:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8DataCounter = 0;
    15d2:	19 82       	std	Y+1, r1	; 0x01

    // Check for a valid length
    if (copy_u8Len <= 0) {
    15d4:	8c 81       	ldd	r24, Y+4	; 0x04
    15d6:	88 23       	and	r24, r24
    15d8:	11 f4       	brne	.+4      	; 0x15de <TWI_ErrorStateWrite+0x2e>
        return PASS;
    15da:	18 86       	std	Y+8, r1	; 0x08
    15dc:	37 c0       	rjmp	.+110    	; 0x164c <TWI_ErrorStateWrite+0x9c>
    } else {
        // Attempt to write the data, retrying if necessary
        for (local_u8RestartsCounter = MAX_RESTARTS; local_u8RestartsCounter > 0; local_u8RestartsCounter--) {
    15de:	84 e1       	ldi	r24, 0x14	; 20
    15e0:	8a 83       	std	Y+2, r24	; 0x02
    15e2:	2f c0       	rjmp	.+94     	; 0x1642 <TWI_ErrorStateWrite+0x92>
            if (TWI_ErrorStateStart() == PASS) {
    15e4:	0e 94 35 0a 	call	0x146a	; 0x146a <TWI_ErrorStateStart>
    15e8:	88 23       	and	r24, r24
    15ea:	41 f5       	brne	.+80     	; 0x163c <TWI_ErrorStateWrite+0x8c>
                // Send the slave address with the write flag
                if (TWI_ErrorStatePutChar((copy_u8SlaveAdrs << 1) | TWI_WRITE) == PASS) {
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	88 0f       	add	r24, r24
    15f0:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <TWI_ErrorStatePutChar>
    15f4:	88 23       	and	r24, r24
    15f6:	11 f5       	brne	.+68     	; 0x163c <TWI_ErrorStateWrite+0x8c>
                    // Send the device register address
                    if (TWI_ErrorStatePutChar(copy_u8adrs) == PASS) {
    15f8:	8d 81       	ldd	r24, Y+5	; 0x05
    15fa:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <TWI_ErrorStatePutChar>
    15fe:	88 23       	and	r24, r24
    1600:	e9 f4       	brne	.+58     	; 0x163c <TWI_ErrorStateWrite+0x8c>
                        // Write the data bytes
                        for (local_u8DataCounter = 0; local_u8DataCounter < copy_u8Len; local_u8DataCounter++) {
    1602:	19 82       	std	Y+1, r1	; 0x01
    1604:	13 c0       	rjmp	.+38     	; 0x162c <TWI_ErrorStateWrite+0x7c>
                            if (TWI_ErrorStatePutChar(ptr_u8buf[local_u8DataCounter]) == FAIL) {
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	8e 81       	ldd	r24, Y+6	; 0x06
    160e:	9f 81       	ldd	r25, Y+7	; 0x07
    1610:	fc 01       	movw	r30, r24
    1612:	e2 0f       	add	r30, r18
    1614:	f3 1f       	adc	r31, r19
    1616:	80 81       	ld	r24, Z
    1618:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <TWI_ErrorStatePutChar>
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	19 f4       	brne	.+6      	; 0x1626 <TWI_ErrorStateWrite+0x76>
                                return FAIL;  // Stop on failure
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	88 87       	std	Y+8, r24	; 0x08
    1624:	13 c0       	rjmp	.+38     	; 0x164c <TWI_ErrorStateWrite+0x9c>
                // Send the slave address with the write flag
                if (TWI_ErrorStatePutChar((copy_u8SlaveAdrs << 1) | TWI_WRITE) == PASS) {
                    // Send the device register address
                    if (TWI_ErrorStatePutChar(copy_u8adrs) == PASS) {
                        // Write the data bytes
                        for (local_u8DataCounter = 0; local_u8DataCounter < copy_u8Len; local_u8DataCounter++) {
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	99 81       	ldd	r25, Y+1	; 0x01
    162e:	8c 81       	ldd	r24, Y+4	; 0x04
    1630:	98 17       	cp	r25, r24
    1632:	48 f3       	brcs	.-46     	; 0x1606 <TWI_ErrorStateWrite+0x56>
                            if (TWI_ErrorStatePutChar(ptr_u8buf[local_u8DataCounter]) == FAIL) {
                                return FAIL;  // Stop on failure
                            }
                        }
                        TWI_voidStop();  // Stop the communication
    1634:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <TWI_voidStop>
                        return PASS;     // Indicate success
    1638:	18 86       	std	Y+8, r1	; 0x08
    163a:	08 c0       	rjmp	.+16     	; 0x164c <TWI_ErrorStateWrite+0x9c>
    // Check for a valid length
    if (copy_u8Len <= 0) {
        return PASS;
    } else {
        // Attempt to write the data, retrying if necessary
        for (local_u8RestartsCounter = MAX_RESTARTS; local_u8RestartsCounter > 0; local_u8RestartsCounter--) {
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	81 50       	subi	r24, 0x01	; 1
    1640:	8a 83       	std	Y+2, r24	; 0x02
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	88 23       	and	r24, r24
    1646:	71 f6       	brne	.-100    	; 0x15e4 <TWI_ErrorStateWrite+0x34>
                continue;  // Retry on failure
            }
        }
    }

    return FAIL;  // Indicate failure after all retries
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	88 87       	std	Y+8, r24	; 0x08
    164c:	88 85       	ldd	r24, Y+8	; 0x08
}
    164e:	28 96       	adiw	r28, 0x08	; 8
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <TWI_ErrorStateRead>:
ErrorState TWI_ErrorStateRead(
    u8 copy_u8SlaveAdrs,	/* Device slave address */
    u8 copy_u8Len,			/* Number of bytes to read */
    u8 copy_u8adrs,			/* Device register to start reading from */
    u8 *ptr_u8buf			/* RAM address of where to put read bytes */
) {
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	28 97       	sbiw	r28, 0x08	; 8
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	8b 83       	std	Y+3, r24	; 0x03
    167a:	6c 83       	std	Y+4, r22	; 0x04
    167c:	4d 83       	std	Y+5, r20	; 0x05
    167e:	3f 83       	std	Y+7, r19	; 0x07
    1680:	2e 83       	std	Y+6, r18	; 0x06
    u8 local_u8RestartsCounter = MAX_RESTARTS;
    1682:	84 e1       	ldi	r24, 0x14	; 20
    1684:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8DataCounter = 0;
    1686:	19 82       	std	Y+1, r1	; 0x01

    // Check for a valid length
    if (copy_u8Len <= 0) {
    1688:	8c 81       	ldd	r24, Y+4	; 0x04
    168a:	88 23       	and	r24, r24
    168c:	11 f4       	brne	.+4      	; 0x1692 <TWI_ErrorStateRead+0x32>
        return PASS;
    168e:	18 86       	std	Y+8, r1	; 0x08
    1690:	56 c0       	rjmp	.+172    	; 0x173e <TWI_ErrorStateRead+0xde>
    } else {
        // Attempt to read the data, retrying if necessary
        for (local_u8RestartsCounter = MAX_RESTARTS; local_u8RestartsCounter > 0; local_u8RestartsCounter--) {
    1692:	84 e1       	ldi	r24, 0x14	; 20
    1694:	8a 83       	std	Y+2, r24	; 0x02
    1696:	4d c0       	rjmp	.+154    	; 0x1732 <TWI_ErrorStateRead+0xd2>
            if (TWI_ErrorStateStart() == PASS) {
    1698:	0e 94 35 0a 	call	0x146a	; 0x146a <TWI_ErrorStateStart>
    169c:	88 23       	and	r24, r24
    169e:	09 f0       	breq	.+2      	; 0x16a2 <TWI_ErrorStateRead+0x42>
    16a0:	45 c0       	rjmp	.+138    	; 0x172c <TWI_ErrorStateRead+0xcc>
                // Send the slave address with the write flag
                if (TWI_ErrorStatePutChar((copy_u8SlaveAdrs << 1) | TWI_WRITE) == PASS) {
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	88 0f       	add	r24, r24
    16a6:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <TWI_ErrorStatePutChar>
    16aa:	88 23       	and	r24, r24
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <TWI_ErrorStateRead+0x50>
    16ae:	3e c0       	rjmp	.+124    	; 0x172c <TWI_ErrorStateRead+0xcc>
                    // Send the device register address
                    if (TWI_ErrorStatePutChar(copy_u8adrs) == PASS) {
    16b0:	8d 81       	ldd	r24, Y+5	; 0x05
    16b2:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <TWI_ErrorStatePutChar>
    16b6:	88 23       	and	r24, r24
    16b8:	c9 f5       	brne	.+114    	; 0x172c <TWI_ErrorStateRead+0xcc>
                        // Restart and send the slave address with the read flag
                        if (TWI_ErrorStateStart() == PASS) {
    16ba:	0e 94 35 0a 	call	0x146a	; 0x146a <TWI_ErrorStateStart>
    16be:	88 23       	and	r24, r24
    16c0:	a9 f5       	brne	.+106    	; 0x172c <TWI_ErrorStateRead+0xcc>
                            if (TWI_ErrorStatePutChar((copy_u8SlaveAdrs << 1) | TWI_READ) == PASS) {
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	88 2f       	mov	r24, r24
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	81 60       	ori	r24, 0x01	; 1
    16ce:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <TWI_ErrorStatePutChar>
    16d2:	88 23       	and	r24, r24
    16d4:	59 f5       	brne	.+86     	; 0x172c <TWI_ErrorStateRead+0xcc>
                                // Read the data bytes
                                for (local_u8DataCounter = 0; local_u8DataCounter < copy_u8Len - 1; local_u8DataCounter++) {
    16d6:	19 82       	std	Y+1, r1	; 0x01
    16d8:	0f c0       	rjmp	.+30     	; 0x16f8 <TWI_ErrorStateRead+0x98>
                                    ptr_u8buf[local_u8DataCounter] = TWI_u8GetCharAck();
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	8e 81       	ldd	r24, Y+6	; 0x06
    16e2:	9f 81       	ldd	r25, Y+7	; 0x07
    16e4:	8c 01       	movw	r16, r24
    16e6:	02 0f       	add	r16, r18
    16e8:	13 1f       	adc	r17, r19
    16ea:	0e 94 b2 0a 	call	0x1564	; 0x1564 <TWI_u8GetCharAck>
    16ee:	f8 01       	movw	r30, r16
    16f0:	80 83       	st	Z, r24
                    if (TWI_ErrorStatePutChar(copy_u8adrs) == PASS) {
                        // Restart and send the slave address with the read flag
                        if (TWI_ErrorStateStart() == PASS) {
                            if (TWI_ErrorStatePutChar((copy_u8SlaveAdrs << 1) | TWI_READ) == PASS) {
                                // Read the data bytes
                                for (local_u8DataCounter = 0; local_u8DataCounter < copy_u8Len - 1; local_u8DataCounter++) {
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	8f 5f       	subi	r24, 0xFF	; 255
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	88 2f       	mov	r24, r24
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	28 17       	cp	r18, r24
    1708:	39 07       	cpc	r19, r25
    170a:	3c f3       	brlt	.-50     	; 0x16da <TWI_ErrorStateRead+0x7a>
                                    ptr_u8buf[local_u8DataCounter] = TWI_u8GetCharAck();
                                }
                                // Read the last byte with NACK
                                ptr_u8buf[local_u8DataCounter] = TWI_u8GetCharNack();
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	8e 81       	ldd	r24, Y+6	; 0x06
    1714:	9f 81       	ldd	r25, Y+7	; 0x07
    1716:	8c 01       	movw	r16, r24
    1718:	02 0f       	add	r16, r18
    171a:	13 1f       	adc	r17, r19
    171c:	0e 94 c5 0a 	call	0x158a	; 0x158a <TWI_u8GetCharNack>
    1720:	f8 01       	movw	r30, r16
    1722:	80 83       	st	Z, r24
                                TWI_voidStop();  // Stop the communication
    1724:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <TWI_voidStop>
                                return PASS;     // Indicate success
    1728:	18 86       	std	Y+8, r1	; 0x08
    172a:	09 c0       	rjmp	.+18     	; 0x173e <TWI_ErrorStateRead+0xde>
    // Check for a valid length
    if (copy_u8Len <= 0) {
        return PASS;
    } else {
        // Attempt to read the data, retrying if necessary
        for (local_u8RestartsCounter = MAX_RESTARTS; local_u8RestartsCounter > 0; local_u8RestartsCounter--) {
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	81 50       	subi	r24, 0x01	; 1
    1730:	8a 83       	std	Y+2, r24	; 0x02
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	88 23       	and	r24, r24
    1736:	09 f0       	breq	.+2      	; 0x173a <TWI_ErrorStateRead+0xda>
    1738:	af cf       	rjmp	.-162    	; 0x1698 <TWI_ErrorStateRead+0x38>
                continue;  // Retry on failure
            }
        }
    }

    return FAIL;  // Indicate failure after all retries
    173a:	f1 e0       	ldi	r31, 0x01	; 1
    173c:	f8 87       	std	Y+8, r31	; 0x08
    173e:	88 85       	ldd	r24, Y+8	; 0x08
}
    1740:	28 96       	adiw	r28, 0x08	; 8
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	08 95       	ret

00001756 <TIM_voidIni>:

#include "TIM_private.h"
#include "TIM_config.h"
#include "TIM_interface.h"

void TIM_voidIni(TIM_ID copy_TIM_ID){
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	00 d0       	rcall	.+0      	; 0x175c <TIM_voidIni+0x6>
    175c:	0f 92       	push	r0
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_TIM_ID){
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	3b 83       	std	Y+3, r19	; 0x03
    176c:	2a 83       	std	Y+2, r18	; 0x02
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	9b 81       	ldd	r25, Y+3	; 0x03
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	91 05       	cpc	r25, r1
    1776:	69 f1       	breq	.+90     	; 0x17d2 <TIM_voidIni+0x7c>
    1778:	2a 81       	ldd	r18, Y+2	; 0x02
    177a:	3b 81       	ldd	r19, Y+3	; 0x03
    177c:	22 30       	cpi	r18, 0x02	; 2
    177e:	31 05       	cpc	r19, r1
    1780:	09 f4       	brne	.+2      	; 0x1784 <TIM_voidIni+0x2e>
    1782:	69 c0       	rjmp	.+210    	; 0x1856 <TIM_voidIni+0x100>
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	9b 81       	ldd	r25, Y+3	; 0x03
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	09 f0       	breq	.+2      	; 0x178e <TIM_voidIni+0x38>
    178c:	85 c0       	rjmp	.+266    	; 0x1898 <TIM_voidIni+0x142>
						SET_BIT(TIMS->TCCR0,COM01);
					#else
						#error "OC0_MODE Wrong define"
					#endif
			#elif(TIM0_MODE== TIM0_TIM2_FAST_PWM)
					SET_BIT(TIMS->TCCR0,WGM00);
    178e:	a3 e4       	ldi	r26, 0x43	; 67
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e3 e4       	ldi	r30, 0x43	; 67
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 89       	ldd	r24, Z+16	; 0x10
    1798:	80 64       	ori	r24, 0x40	; 64
    179a:	50 96       	adiw	r26, 0x10	; 16
    179c:	8c 93       	st	X, r24
					SET_BIT(TIMS->TCCR0,WGM01);
    179e:	a3 e4       	ldi	r26, 0x43	; 67
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e3 e4       	ldi	r30, 0x43	; 67
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 89       	ldd	r24, Z+16	; 0x10
    17a8:	88 60       	ori	r24, 0x08	; 8
    17aa:	50 96       	adiw	r26, 0x10	; 16
    17ac:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR0,COM01);
					#elif(OC0_MODE==OC_CLEAR_COMPARE_SET_ON_BOTTOM)
						CLR_BIT(TIMS->TCCR0,COM00);
						SET_BIT(TIMS->TCCR0,COM01);
					#elif(OC0_MODE==OC_SET_COMPARE_CLEAR_ON_BOTTOM)
						SET_BIT(TIMS->TCCR0,COM00);
    17ae:	a3 e4       	ldi	r26, 0x43	; 67
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e3 e4       	ldi	r30, 0x43	; 67
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 89       	ldd	r24, Z+16	; 0x10
    17b8:	80 61       	ori	r24, 0x10	; 16
    17ba:	50 96       	adiw	r26, 0x10	; 16
    17bc:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR0,COM01);
    17be:	a3 e4       	ldi	r26, 0x43	; 67
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e3 e4       	ldi	r30, 0x43	; 67
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 89       	ldd	r24, Z+16	; 0x10
    17c8:	80 62       	ori	r24, 0x20	; 32
    17ca:	50 96       	adiw	r26, 0x10	; 16
    17cc:	8c 93       	st	X, r24
    17ce:	50 97       	sbiw	r26, 0x10	; 16
    17d0:	63 c0       	rjmp	.+198    	; 0x1898 <TIM_voidIni+0x142>
					SET_BIT(TIMS->TCCR1A,COM1B1);
				#else
					#error "OC1B_MODE Wrong define"
				#endif
			#elif(TIM1_MODE== TIM1_FAST_TOP_ICR1)
				CLR_BIT(TIMS->TCCR1A,WGM10);
    17d2:	a3 e4       	ldi	r26, 0x43	; 67
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e3 e4       	ldi	r30, 0x43	; 67
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	84 85       	ldd	r24, Z+12	; 0x0c
    17dc:	8e 7f       	andi	r24, 0xFE	; 254
    17de:	1c 96       	adiw	r26, 0x0c	; 12
    17e0:	8c 93       	st	X, r24
				SET_BIT(TIMS->TCCR1A,WGM11);
    17e2:	a3 e4       	ldi	r26, 0x43	; 67
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e3 e4       	ldi	r30, 0x43	; 67
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	84 85       	ldd	r24, Z+12	; 0x0c
    17ec:	82 60       	ori	r24, 0x02	; 2
    17ee:	1c 96       	adiw	r26, 0x0c	; 12
    17f0:	8c 93       	st	X, r24
				SET_BIT(TIMS->TCCR1B,WGM12);
    17f2:	a3 e4       	ldi	r26, 0x43	; 67
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e3 e4       	ldi	r30, 0x43	; 67
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	83 85       	ldd	r24, Z+11	; 0x0b
    17fc:	88 60       	ori	r24, 0x08	; 8
    17fe:	1b 96       	adiw	r26, 0x0b	; 11
    1800:	8c 93       	st	X, r24
				SET_BIT(TIMS->TCCR1B,WGM13);
    1802:	a3 e4       	ldi	r26, 0x43	; 67
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e3 e4       	ldi	r30, 0x43	; 67
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	83 85       	ldd	r24, Z+11	; 0x0b
    180c:	80 61       	ori	r24, 0x10	; 16
    180e:	1b 96       	adiw	r26, 0x0b	; 11
    1810:	8c 93       	st	X, r24
				#if(OC1A_MODE==OC_DISCONNECTED)
					CLR_BIT(TIMS->TCCR1A,COM1A0);
					CLR_BIT(TIMS->TCCR1A,COM1A1);
				#elif(OC1A_MODE==OC_CLEAR_COMPARE_SET_ON_BOTTOM)
					CLR_BIT(TIMS->TCCR1A,COM1A0);
    1812:	a3 e4       	ldi	r26, 0x43	; 67
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e3 e4       	ldi	r30, 0x43	; 67
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	84 85       	ldd	r24, Z+12	; 0x0c
    181c:	8f 7b       	andi	r24, 0xBF	; 191
    181e:	1c 96       	adiw	r26, 0x0c	; 12
    1820:	8c 93       	st	X, r24
					SET_BIT(TIMS->TCCR1A,COM1A1);
    1822:	a3 e4       	ldi	r26, 0x43	; 67
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e3 e4       	ldi	r30, 0x43	; 67
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	84 85       	ldd	r24, Z+12	; 0x0c
    182c:	80 68       	ori	r24, 0x80	; 128
    182e:	1c 96       	adiw	r26, 0x0c	; 12
    1830:	8c 93       	st	X, r24
					SET_BIT(TIMS->TCCR1A,COM1A1);
				#else
					#error "OC1A_MODE Wrong define"
				#endif
				#if(OC1B_MODE==OC_DISCONNECTED)
					CLR_BIT(TIMS->TCCR1A,COM1B0);
    1832:	a3 e4       	ldi	r26, 0x43	; 67
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e3 e4       	ldi	r30, 0x43	; 67
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	84 85       	ldd	r24, Z+12	; 0x0c
    183c:	8f 7e       	andi	r24, 0xEF	; 239
    183e:	1c 96       	adiw	r26, 0x0c	; 12
    1840:	8c 93       	st	X, r24
					CLR_BIT(TIMS->TCCR1A,COM1B1);
    1842:	a3 e4       	ldi	r26, 0x43	; 67
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e3 e4       	ldi	r30, 0x43	; 67
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	84 85       	ldd	r24, Z+12	; 0x0c
    184c:	8f 7d       	andi	r24, 0xDF	; 223
    184e:	1c 96       	adiw	r26, 0x0c	; 12
    1850:	8c 93       	st	X, r24
    1852:	1c 97       	sbiw	r26, 0x0c	; 12
    1854:	21 c0       	rjmp	.+66     	; 0x1898 <TIM_voidIni+0x142>
						SET_BIT(TIMS->TCCR2,COM21);
					#else
						#error "OC2_MODE Wrong define"
					#endif
			#elif(TIM2_MODE== TIM0_TIM2_PWM_PHASECORRECT)
					SET_BIT(TIMS->TCCR2,WGM20);
    1856:	a3 e4       	ldi	r26, 0x43	; 67
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e3 e4       	ldi	r30, 0x43	; 67
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	82 81       	ldd	r24, Z+2	; 0x02
    1860:	80 64       	ori	r24, 0x40	; 64
    1862:	12 96       	adiw	r26, 0x02	; 2
    1864:	8c 93       	st	X, r24
					CLR_BIT(TIMS->TCCR2,WGM21);
    1866:	a3 e4       	ldi	r26, 0x43	; 67
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e3 e4       	ldi	r30, 0x43	; 67
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	82 81       	ldd	r24, Z+2	; 0x02
    1870:	87 7f       	andi	r24, 0xF7	; 247
    1872:	12 96       	adiw	r26, 0x02	; 2
    1874:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR2,COM21);
					#elif(OC2_MODE==OC_CLEAR_UP_SET_DOWN)
						CLR_BIT(TIMS->TCCR2,COM20);
						SET_BIT(TIMS->TCCR2,COM21);
					#elif(OC2_MODE==OC_SET_UP_CLEAR_DOWN)
						SET_BIT(TIMS->TCCR2,COM20);
    1876:	a3 e4       	ldi	r26, 0x43	; 67
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e3 e4       	ldi	r30, 0x43	; 67
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	82 81       	ldd	r24, Z+2	; 0x02
    1880:	80 61       	ori	r24, 0x10	; 16
    1882:	12 96       	adiw	r26, 0x02	; 2
    1884:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR2,COM21);
    1886:	a3 e4       	ldi	r26, 0x43	; 67
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e3 e4       	ldi	r30, 0x43	; 67
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	80 62       	ori	r24, 0x20	; 32
    1892:	12 96       	adiw	r26, 0x02	; 2
    1894:	8c 93       	st	X, r24
    1896:	12 97       	sbiw	r26, 0x02	; 2
			default:

				break;

		}
}
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <TIM_voidStart>:
void TIM_voidStart(TIM_ID copy_TIM_ID,TIMS_CLOCK_T copy_TIMS_CLOCK){
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	2a 97       	sbiw	r28, 0x0a	; 10
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	cd bf       	out	0x3d, r28	; 61
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_TIM_ID){
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	3a 87       	std	Y+10, r19	; 0x0a
    18c4:	29 87       	std	Y+9, r18	; 0x09
    18c6:	89 85       	ldd	r24, Y+9	; 0x09
    18c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	91 05       	cpc	r25, r1
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <TIM_voidStart+0x2e>
    18d0:	1b c1       	rjmp	.+566    	; 0x1b08 <TIM_voidStart+0x264>
    18d2:	29 85       	ldd	r18, Y+9	; 0x09
    18d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    18d6:	22 30       	cpi	r18, 0x02	; 2
    18d8:	31 05       	cpc	r19, r1
    18da:	09 f4       	brne	.+2      	; 0x18de <TIM_voidStart+0x3a>
    18dc:	25 c2       	rjmp	.+1098   	; 0x1d28 <TIM_voidStart+0x484>
    18de:	89 85       	ldd	r24, Y+9	; 0x09
    18e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <TIM_voidStart+0x44>
    18e6:	29 c3       	rjmp	.+1618   	; 0x1f3a <TIM_voidStart+0x696>
			case (TIM0):
				switch(copy_TIMS_CLOCK){
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	38 87       	std	Y+8, r19	; 0x08
    18f0:	2f 83       	std	Y+7, r18	; 0x07
    18f2:	8f 81       	ldd	r24, Y+7	; 0x07
    18f4:	98 85       	ldd	r25, Y+8	; 0x08
    18f6:	84 30       	cpi	r24, 0x04	; 4
    18f8:	91 05       	cpc	r25, r1
    18fa:	09 f4       	brne	.+2      	; 0x18fe <TIM_voidStart+0x5a>
    18fc:	83 c0       	rjmp	.+262    	; 0x1a04 <TIM_voidStart+0x160>
    18fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1900:	38 85       	ldd	r19, Y+8	; 0x08
    1902:	25 30       	cpi	r18, 0x05	; 5
    1904:	31 05       	cpc	r19, r1
    1906:	8c f4       	brge	.+34     	; 0x192a <TIM_voidStart+0x86>
    1908:	8f 81       	ldd	r24, Y+7	; 0x07
    190a:	98 85       	ldd	r25, Y+8	; 0x08
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	91 05       	cpc	r25, r1
    1910:	09 f4       	brne	.+2      	; 0x1914 <TIM_voidStart+0x70>
    1912:	44 c0       	rjmp	.+136    	; 0x199c <TIM_voidStart+0xf8>
    1914:	2f 81       	ldd	r18, Y+7	; 0x07
    1916:	38 85       	ldd	r19, Y+8	; 0x08
    1918:	22 30       	cpi	r18, 0x02	; 2
    191a:	31 05       	cpc	r19, r1
    191c:	09 f4       	brne	.+2      	; 0x1920 <TIM_voidStart+0x7c>
    191e:	58 c0       	rjmp	.+176    	; 0x19d0 <TIM_voidStart+0x12c>
    1920:	8f 81       	ldd	r24, Y+7	; 0x07
    1922:	98 85       	ldd	r25, Y+8	; 0x08
    1924:	00 97       	sbiw	r24, 0x00	; 0
    1926:	01 f1       	breq	.+64     	; 0x1968 <TIM_voidStart+0xc4>
    1928:	08 c3       	rjmp	.+1552   	; 0x1f3a <TIM_voidStart+0x696>
    192a:	2f 81       	ldd	r18, Y+7	; 0x07
    192c:	38 85       	ldd	r19, Y+8	; 0x08
    192e:	27 30       	cpi	r18, 0x07	; 7
    1930:	31 05       	cpc	r19, r1
    1932:	09 f4       	brne	.+2      	; 0x1936 <TIM_voidStart+0x92>
    1934:	9b c0       	rjmp	.+310    	; 0x1a6c <TIM_voidStart+0x1c8>
    1936:	8f 81       	ldd	r24, Y+7	; 0x07
    1938:	98 85       	ldd	r25, Y+8	; 0x08
    193a:	88 30       	cpi	r24, 0x08	; 8
    193c:	91 05       	cpc	r25, r1
    193e:	3c f4       	brge	.+14     	; 0x194e <TIM_voidStart+0xaa>
    1940:	2f 81       	ldd	r18, Y+7	; 0x07
    1942:	38 85       	ldd	r19, Y+8	; 0x08
    1944:	26 30       	cpi	r18, 0x06	; 6
    1946:	31 05       	cpc	r19, r1
    1948:	09 f4       	brne	.+2      	; 0x194c <TIM_voidStart+0xa8>
    194a:	76 c0       	rjmp	.+236    	; 0x1a38 <TIM_voidStart+0x194>
    194c:	f6 c2       	rjmp	.+1516   	; 0x1f3a <TIM_voidStart+0x696>
    194e:	8f 81       	ldd	r24, Y+7	; 0x07
    1950:	98 85       	ldd	r25, Y+8	; 0x08
    1952:	88 30       	cpi	r24, 0x08	; 8
    1954:	91 05       	cpc	r25, r1
    1956:	09 f4       	brne	.+2      	; 0x195a <TIM_voidStart+0xb6>
    1958:	a3 c0       	rjmp	.+326    	; 0x1aa0 <TIM_voidStart+0x1fc>
    195a:	2f 81       	ldd	r18, Y+7	; 0x07
    195c:	38 85       	ldd	r19, Y+8	; 0x08
    195e:	29 30       	cpi	r18, 0x09	; 9
    1960:	31 05       	cpc	r19, r1
    1962:	09 f4       	brne	.+2      	; 0x1966 <TIM_voidStart+0xc2>
    1964:	b7 c0       	rjmp	.+366    	; 0x1ad4 <TIM_voidStart+0x230>
    1966:	e9 c2       	rjmp	.+1490   	; 0x1f3a <TIM_voidStart+0x696>
					case TIMS_STOP:
						CLR_BIT(TIMS->TCCR0,CS00);
    1968:	a3 e4       	ldi	r26, 0x43	; 67
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e3 e4       	ldi	r30, 0x43	; 67
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 89       	ldd	r24, Z+16	; 0x10
    1972:	8e 7f       	andi	r24, 0xFE	; 254
    1974:	50 96       	adiw	r26, 0x10	; 16
    1976:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR0,CS01);
    1978:	a3 e4       	ldi	r26, 0x43	; 67
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e3 e4       	ldi	r30, 0x43	; 67
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 89       	ldd	r24, Z+16	; 0x10
    1982:	8d 7f       	andi	r24, 0xFD	; 253
    1984:	50 96       	adiw	r26, 0x10	; 16
    1986:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR0,CS02);
    1988:	a3 e4       	ldi	r26, 0x43	; 67
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e3 e4       	ldi	r30, 0x43	; 67
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 89       	ldd	r24, Z+16	; 0x10
    1992:	8b 7f       	andi	r24, 0xFB	; 251
    1994:	50 96       	adiw	r26, 0x10	; 16
    1996:	8c 93       	st	X, r24
    1998:	50 97       	sbiw	r26, 0x10	; 16
    199a:	cf c2       	rjmp	.+1438   	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_1:
						SET_BIT(TIMS->TCCR0,CS00);
    199c:	a3 e4       	ldi	r26, 0x43	; 67
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e3 e4       	ldi	r30, 0x43	; 67
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 89       	ldd	r24, Z+16	; 0x10
    19a6:	81 60       	ori	r24, 0x01	; 1
    19a8:	50 96       	adiw	r26, 0x10	; 16
    19aa:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR0,CS01);
    19ac:	a3 e4       	ldi	r26, 0x43	; 67
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e3 e4       	ldi	r30, 0x43	; 67
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 89       	ldd	r24, Z+16	; 0x10
    19b6:	8d 7f       	andi	r24, 0xFD	; 253
    19b8:	50 96       	adiw	r26, 0x10	; 16
    19ba:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR0,CS02);
    19bc:	a3 e4       	ldi	r26, 0x43	; 67
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e3 e4       	ldi	r30, 0x43	; 67
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 89       	ldd	r24, Z+16	; 0x10
    19c6:	8b 7f       	andi	r24, 0xFB	; 251
    19c8:	50 96       	adiw	r26, 0x10	; 16
    19ca:	8c 93       	st	X, r24
    19cc:	50 97       	sbiw	r26, 0x10	; 16
    19ce:	b5 c2       	rjmp	.+1386   	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_8:
						CLR_BIT(TIMS->TCCR0,CS00);
    19d0:	a3 e4       	ldi	r26, 0x43	; 67
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e3 e4       	ldi	r30, 0x43	; 67
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 89       	ldd	r24, Z+16	; 0x10
    19da:	8e 7f       	andi	r24, 0xFE	; 254
    19dc:	50 96       	adiw	r26, 0x10	; 16
    19de:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR0,CS01);
    19e0:	a3 e4       	ldi	r26, 0x43	; 67
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e3 e4       	ldi	r30, 0x43	; 67
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 89       	ldd	r24, Z+16	; 0x10
    19ea:	82 60       	ori	r24, 0x02	; 2
    19ec:	50 96       	adiw	r26, 0x10	; 16
    19ee:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR0,CS02);
    19f0:	a3 e4       	ldi	r26, 0x43	; 67
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e3 e4       	ldi	r30, 0x43	; 67
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 89       	ldd	r24, Z+16	; 0x10
    19fa:	8b 7f       	andi	r24, 0xFB	; 251
    19fc:	50 96       	adiw	r26, 0x10	; 16
    19fe:	8c 93       	st	X, r24
    1a00:	50 97       	sbiw	r26, 0x10	; 16
    1a02:	9b c2       	rjmp	.+1334   	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_64:
						SET_BIT(TIMS->TCCR0,CS00);
    1a04:	a3 e4       	ldi	r26, 0x43	; 67
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e3 e4       	ldi	r30, 0x43	; 67
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 89       	ldd	r24, Z+16	; 0x10
    1a0e:	81 60       	ori	r24, 0x01	; 1
    1a10:	50 96       	adiw	r26, 0x10	; 16
    1a12:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR0,CS01);
    1a14:	a3 e4       	ldi	r26, 0x43	; 67
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e3 e4       	ldi	r30, 0x43	; 67
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 89       	ldd	r24, Z+16	; 0x10
    1a1e:	82 60       	ori	r24, 0x02	; 2
    1a20:	50 96       	adiw	r26, 0x10	; 16
    1a22:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR0,CS02);
    1a24:	a3 e4       	ldi	r26, 0x43	; 67
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e3 e4       	ldi	r30, 0x43	; 67
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 89       	ldd	r24, Z+16	; 0x10
    1a2e:	8b 7f       	andi	r24, 0xFB	; 251
    1a30:	50 96       	adiw	r26, 0x10	; 16
    1a32:	8c 93       	st	X, r24
    1a34:	50 97       	sbiw	r26, 0x10	; 16
    1a36:	81 c2       	rjmp	.+1282   	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_256:
						CLR_BIT(TIMS->TCCR0,CS00);
    1a38:	a3 e4       	ldi	r26, 0x43	; 67
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e3 e4       	ldi	r30, 0x43	; 67
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 89       	ldd	r24, Z+16	; 0x10
    1a42:	8e 7f       	andi	r24, 0xFE	; 254
    1a44:	50 96       	adiw	r26, 0x10	; 16
    1a46:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR0,CS01);
    1a48:	a3 e4       	ldi	r26, 0x43	; 67
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e3 e4       	ldi	r30, 0x43	; 67
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 89       	ldd	r24, Z+16	; 0x10
    1a52:	8d 7f       	andi	r24, 0xFD	; 253
    1a54:	50 96       	adiw	r26, 0x10	; 16
    1a56:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR0,CS02);
    1a58:	a3 e4       	ldi	r26, 0x43	; 67
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e3 e4       	ldi	r30, 0x43	; 67
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 89       	ldd	r24, Z+16	; 0x10
    1a62:	84 60       	ori	r24, 0x04	; 4
    1a64:	50 96       	adiw	r26, 0x10	; 16
    1a66:	8c 93       	st	X, r24
    1a68:	50 97       	sbiw	r26, 0x10	; 16
    1a6a:	67 c2       	rjmp	.+1230   	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_1024:
						SET_BIT(TIMS->TCCR0,CS00);
    1a6c:	a3 e4       	ldi	r26, 0x43	; 67
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e3 e4       	ldi	r30, 0x43	; 67
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 89       	ldd	r24, Z+16	; 0x10
    1a76:	81 60       	ori	r24, 0x01	; 1
    1a78:	50 96       	adiw	r26, 0x10	; 16
    1a7a:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR0,CS01);
    1a7c:	a3 e4       	ldi	r26, 0x43	; 67
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e3 e4       	ldi	r30, 0x43	; 67
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 89       	ldd	r24, Z+16	; 0x10
    1a86:	8d 7f       	andi	r24, 0xFD	; 253
    1a88:	50 96       	adiw	r26, 0x10	; 16
    1a8a:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR0,CS02);
    1a8c:	a3 e4       	ldi	r26, 0x43	; 67
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e3 e4       	ldi	r30, 0x43	; 67
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 89       	ldd	r24, Z+16	; 0x10
    1a96:	84 60       	ori	r24, 0x04	; 4
    1a98:	50 96       	adiw	r26, 0x10	; 16
    1a9a:	8c 93       	st	X, r24
    1a9c:	50 97       	sbiw	r26, 0x10	; 16
    1a9e:	4d c2       	rjmp	.+1178   	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIM0_TIM1_T_PIN_FALLINGEVENT:
						CLR_BIT(TIMS->TCCR0,CS00);
    1aa0:	a3 e4       	ldi	r26, 0x43	; 67
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e3 e4       	ldi	r30, 0x43	; 67
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 89       	ldd	r24, Z+16	; 0x10
    1aaa:	8e 7f       	andi	r24, 0xFE	; 254
    1aac:	50 96       	adiw	r26, 0x10	; 16
    1aae:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR0,CS01);
    1ab0:	a3 e4       	ldi	r26, 0x43	; 67
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e3 e4       	ldi	r30, 0x43	; 67
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 89       	ldd	r24, Z+16	; 0x10
    1aba:	82 60       	ori	r24, 0x02	; 2
    1abc:	50 96       	adiw	r26, 0x10	; 16
    1abe:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR0,CS02);
    1ac0:	a3 e4       	ldi	r26, 0x43	; 67
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e3 e4       	ldi	r30, 0x43	; 67
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 89       	ldd	r24, Z+16	; 0x10
    1aca:	84 60       	ori	r24, 0x04	; 4
    1acc:	50 96       	adiw	r26, 0x10	; 16
    1ace:	8c 93       	st	X, r24
    1ad0:	50 97       	sbiw	r26, 0x10	; 16
    1ad2:	33 c2       	rjmp	.+1126   	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIM0_TIM1_T_PIN_RISINGEVENT:
						SET_BIT(TIMS->TCCR0,CS00);
    1ad4:	a3 e4       	ldi	r26, 0x43	; 67
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e3 e4       	ldi	r30, 0x43	; 67
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 89       	ldd	r24, Z+16	; 0x10
    1ade:	81 60       	ori	r24, 0x01	; 1
    1ae0:	50 96       	adiw	r26, 0x10	; 16
    1ae2:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR0,CS01);
    1ae4:	a3 e4       	ldi	r26, 0x43	; 67
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e3 e4       	ldi	r30, 0x43	; 67
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 89       	ldd	r24, Z+16	; 0x10
    1aee:	82 60       	ori	r24, 0x02	; 2
    1af0:	50 96       	adiw	r26, 0x10	; 16
    1af2:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR0,CS02);
    1af4:	a3 e4       	ldi	r26, 0x43	; 67
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e3 e4       	ldi	r30, 0x43	; 67
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 89       	ldd	r24, Z+16	; 0x10
    1afe:	84 60       	ori	r24, 0x04	; 4
    1b00:	50 96       	adiw	r26, 0x10	; 16
    1b02:	8c 93       	st	X, r24
    1b04:	50 97       	sbiw	r26, 0x10	; 16
    1b06:	19 c2       	rjmp	.+1074   	; 0x1f3a <TIM_voidStart+0x696>
					default:
						break;
				}
				break;
			case (TIM1):
				switch(copy_TIMS_CLOCK){
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	3e 83       	std	Y+6, r19	; 0x06
    1b10:	2d 83       	std	Y+5, r18	; 0x05
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	9e 81       	ldd	r25, Y+6	; 0x06
    1b16:	84 30       	cpi	r24, 0x04	; 4
    1b18:	91 05       	cpc	r25, r1
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <TIM_voidStart+0x27a>
    1b1c:	83 c0       	rjmp	.+262    	; 0x1c24 <TIM_voidStart+0x380>
    1b1e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b20:	3e 81       	ldd	r19, Y+6	; 0x06
    1b22:	25 30       	cpi	r18, 0x05	; 5
    1b24:	31 05       	cpc	r19, r1
    1b26:	8c f4       	brge	.+34     	; 0x1b4a <TIM_voidStart+0x2a6>
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2c:	81 30       	cpi	r24, 0x01	; 1
    1b2e:	91 05       	cpc	r25, r1
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <TIM_voidStart+0x290>
    1b32:	44 c0       	rjmp	.+136    	; 0x1bbc <TIM_voidStart+0x318>
    1b34:	2d 81       	ldd	r18, Y+5	; 0x05
    1b36:	3e 81       	ldd	r19, Y+6	; 0x06
    1b38:	22 30       	cpi	r18, 0x02	; 2
    1b3a:	31 05       	cpc	r19, r1
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <TIM_voidStart+0x29c>
    1b3e:	58 c0       	rjmp	.+176    	; 0x1bf0 <TIM_voidStart+0x34c>
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	01 f1       	breq	.+64     	; 0x1b88 <TIM_voidStart+0x2e4>
    1b48:	f8 c1       	rjmp	.+1008   	; 0x1f3a <TIM_voidStart+0x696>
    1b4a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b4c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b4e:	27 30       	cpi	r18, 0x07	; 7
    1b50:	31 05       	cpc	r19, r1
    1b52:	09 f4       	brne	.+2      	; 0x1b56 <TIM_voidStart+0x2b2>
    1b54:	9b c0       	rjmp	.+310    	; 0x1c8c <TIM_voidStart+0x3e8>
    1b56:	8d 81       	ldd	r24, Y+5	; 0x05
    1b58:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5a:	88 30       	cpi	r24, 0x08	; 8
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	3c f4       	brge	.+14     	; 0x1b6e <TIM_voidStart+0x2ca>
    1b60:	2d 81       	ldd	r18, Y+5	; 0x05
    1b62:	3e 81       	ldd	r19, Y+6	; 0x06
    1b64:	26 30       	cpi	r18, 0x06	; 6
    1b66:	31 05       	cpc	r19, r1
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <TIM_voidStart+0x2c8>
    1b6a:	76 c0       	rjmp	.+236    	; 0x1c58 <TIM_voidStart+0x3b4>
    1b6c:	e6 c1       	rjmp	.+972    	; 0x1f3a <TIM_voidStart+0x696>
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	88 30       	cpi	r24, 0x08	; 8
    1b74:	91 05       	cpc	r25, r1
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <TIM_voidStart+0x2d6>
    1b78:	a3 c0       	rjmp	.+326    	; 0x1cc0 <TIM_voidStart+0x41c>
    1b7a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b7c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b7e:	29 30       	cpi	r18, 0x09	; 9
    1b80:	31 05       	cpc	r19, r1
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <TIM_voidStart+0x2e2>
    1b84:	b7 c0       	rjmp	.+366    	; 0x1cf4 <TIM_voidStart+0x450>
    1b86:	d9 c1       	rjmp	.+946    	; 0x1f3a <TIM_voidStart+0x696>
					case TIMS_STOP:
						CLR_BIT(TIMS->TCCR1B,CS10);
    1b88:	a3 e4       	ldi	r26, 0x43	; 67
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e3 e4       	ldi	r30, 0x43	; 67
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	83 85       	ldd	r24, Z+11	; 0x0b
    1b92:	8e 7f       	andi	r24, 0xFE	; 254
    1b94:	1b 96       	adiw	r26, 0x0b	; 11
    1b96:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR1B,CS11);
    1b98:	a3 e4       	ldi	r26, 0x43	; 67
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e3 e4       	ldi	r30, 0x43	; 67
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	83 85       	ldd	r24, Z+11	; 0x0b
    1ba2:	8d 7f       	andi	r24, 0xFD	; 253
    1ba4:	1b 96       	adiw	r26, 0x0b	; 11
    1ba6:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR1B,CS12);
    1ba8:	a3 e4       	ldi	r26, 0x43	; 67
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e3 e4       	ldi	r30, 0x43	; 67
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	83 85       	ldd	r24, Z+11	; 0x0b
    1bb2:	8b 7f       	andi	r24, 0xFB	; 251
    1bb4:	1b 96       	adiw	r26, 0x0b	; 11
    1bb6:	8c 93       	st	X, r24
    1bb8:	1b 97       	sbiw	r26, 0x0b	; 11
    1bba:	bf c1       	rjmp	.+894    	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_1:
						SET_BIT(TIMS->TCCR1B,CS10);
    1bbc:	a3 e4       	ldi	r26, 0x43	; 67
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e3 e4       	ldi	r30, 0x43	; 67
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	83 85       	ldd	r24, Z+11	; 0x0b
    1bc6:	81 60       	ori	r24, 0x01	; 1
    1bc8:	1b 96       	adiw	r26, 0x0b	; 11
    1bca:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR1B,CS11);
    1bcc:	a3 e4       	ldi	r26, 0x43	; 67
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e3 e4       	ldi	r30, 0x43	; 67
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	83 85       	ldd	r24, Z+11	; 0x0b
    1bd6:	8d 7f       	andi	r24, 0xFD	; 253
    1bd8:	1b 96       	adiw	r26, 0x0b	; 11
    1bda:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR1B,CS12);
    1bdc:	a3 e4       	ldi	r26, 0x43	; 67
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e3 e4       	ldi	r30, 0x43	; 67
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	83 85       	ldd	r24, Z+11	; 0x0b
    1be6:	8b 7f       	andi	r24, 0xFB	; 251
    1be8:	1b 96       	adiw	r26, 0x0b	; 11
    1bea:	8c 93       	st	X, r24
    1bec:	1b 97       	sbiw	r26, 0x0b	; 11
    1bee:	a5 c1       	rjmp	.+842    	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_8:
						CLR_BIT(TIMS->TCCR1B,CS10);
    1bf0:	a3 e4       	ldi	r26, 0x43	; 67
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e3 e4       	ldi	r30, 0x43	; 67
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	83 85       	ldd	r24, Z+11	; 0x0b
    1bfa:	8e 7f       	andi	r24, 0xFE	; 254
    1bfc:	1b 96       	adiw	r26, 0x0b	; 11
    1bfe:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR1B,CS11);
    1c00:	a3 e4       	ldi	r26, 0x43	; 67
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e3 e4       	ldi	r30, 0x43	; 67
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	83 85       	ldd	r24, Z+11	; 0x0b
    1c0a:	82 60       	ori	r24, 0x02	; 2
    1c0c:	1b 96       	adiw	r26, 0x0b	; 11
    1c0e:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR1B,CS12);
    1c10:	a3 e4       	ldi	r26, 0x43	; 67
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e3 e4       	ldi	r30, 0x43	; 67
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	83 85       	ldd	r24, Z+11	; 0x0b
    1c1a:	8b 7f       	andi	r24, 0xFB	; 251
    1c1c:	1b 96       	adiw	r26, 0x0b	; 11
    1c1e:	8c 93       	st	X, r24
    1c20:	1b 97       	sbiw	r26, 0x0b	; 11
    1c22:	8b c1       	rjmp	.+790    	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_64:
						SET_BIT(TIMS->TCCR1B,CS10);
    1c24:	a3 e4       	ldi	r26, 0x43	; 67
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e3 e4       	ldi	r30, 0x43	; 67
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	83 85       	ldd	r24, Z+11	; 0x0b
    1c2e:	81 60       	ori	r24, 0x01	; 1
    1c30:	1b 96       	adiw	r26, 0x0b	; 11
    1c32:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR1B,CS11);
    1c34:	a3 e4       	ldi	r26, 0x43	; 67
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e3 e4       	ldi	r30, 0x43	; 67
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	83 85       	ldd	r24, Z+11	; 0x0b
    1c3e:	82 60       	ori	r24, 0x02	; 2
    1c40:	1b 96       	adiw	r26, 0x0b	; 11
    1c42:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR1B,CS12);
    1c44:	a3 e4       	ldi	r26, 0x43	; 67
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e3 e4       	ldi	r30, 0x43	; 67
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	83 85       	ldd	r24, Z+11	; 0x0b
    1c4e:	8b 7f       	andi	r24, 0xFB	; 251
    1c50:	1b 96       	adiw	r26, 0x0b	; 11
    1c52:	8c 93       	st	X, r24
    1c54:	1b 97       	sbiw	r26, 0x0b	; 11
    1c56:	71 c1       	rjmp	.+738    	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_256:
						CLR_BIT(TIMS->TCCR1B,CS10);
    1c58:	a3 e4       	ldi	r26, 0x43	; 67
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e3 e4       	ldi	r30, 0x43	; 67
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	83 85       	ldd	r24, Z+11	; 0x0b
    1c62:	8e 7f       	andi	r24, 0xFE	; 254
    1c64:	1b 96       	adiw	r26, 0x0b	; 11
    1c66:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR1B,CS11);
    1c68:	a3 e4       	ldi	r26, 0x43	; 67
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e3 e4       	ldi	r30, 0x43	; 67
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	83 85       	ldd	r24, Z+11	; 0x0b
    1c72:	8d 7f       	andi	r24, 0xFD	; 253
    1c74:	1b 96       	adiw	r26, 0x0b	; 11
    1c76:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR1B,CS12);
    1c78:	a3 e4       	ldi	r26, 0x43	; 67
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e3 e4       	ldi	r30, 0x43	; 67
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	83 85       	ldd	r24, Z+11	; 0x0b
    1c82:	84 60       	ori	r24, 0x04	; 4
    1c84:	1b 96       	adiw	r26, 0x0b	; 11
    1c86:	8c 93       	st	X, r24
    1c88:	1b 97       	sbiw	r26, 0x0b	; 11
    1c8a:	57 c1       	rjmp	.+686    	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_1024:
						SET_BIT(TIMS->TCCR1B,CS10);
    1c8c:	a3 e4       	ldi	r26, 0x43	; 67
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e3 e4       	ldi	r30, 0x43	; 67
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	83 85       	ldd	r24, Z+11	; 0x0b
    1c96:	81 60       	ori	r24, 0x01	; 1
    1c98:	1b 96       	adiw	r26, 0x0b	; 11
    1c9a:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR1B,CS11);
    1c9c:	a3 e4       	ldi	r26, 0x43	; 67
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e3 e4       	ldi	r30, 0x43	; 67
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	83 85       	ldd	r24, Z+11	; 0x0b
    1ca6:	8d 7f       	andi	r24, 0xFD	; 253
    1ca8:	1b 96       	adiw	r26, 0x0b	; 11
    1caa:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR1B,CS12);
    1cac:	a3 e4       	ldi	r26, 0x43	; 67
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e3 e4       	ldi	r30, 0x43	; 67
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	83 85       	ldd	r24, Z+11	; 0x0b
    1cb6:	84 60       	ori	r24, 0x04	; 4
    1cb8:	1b 96       	adiw	r26, 0x0b	; 11
    1cba:	8c 93       	st	X, r24
    1cbc:	1b 97       	sbiw	r26, 0x0b	; 11
    1cbe:	3d c1       	rjmp	.+634    	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIM0_TIM1_T_PIN_FALLINGEVENT:
						CLR_BIT(TIMS->TCCR1B,CS10);
    1cc0:	a3 e4       	ldi	r26, 0x43	; 67
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e3 e4       	ldi	r30, 0x43	; 67
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	83 85       	ldd	r24, Z+11	; 0x0b
    1cca:	8e 7f       	andi	r24, 0xFE	; 254
    1ccc:	1b 96       	adiw	r26, 0x0b	; 11
    1cce:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR1B,CS11);
    1cd0:	a3 e4       	ldi	r26, 0x43	; 67
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e3 e4       	ldi	r30, 0x43	; 67
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	83 85       	ldd	r24, Z+11	; 0x0b
    1cda:	82 60       	ori	r24, 0x02	; 2
    1cdc:	1b 96       	adiw	r26, 0x0b	; 11
    1cde:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR1B,CS12);
    1ce0:	a3 e4       	ldi	r26, 0x43	; 67
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e3 e4       	ldi	r30, 0x43	; 67
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	83 85       	ldd	r24, Z+11	; 0x0b
    1cea:	84 60       	ori	r24, 0x04	; 4
    1cec:	1b 96       	adiw	r26, 0x0b	; 11
    1cee:	8c 93       	st	X, r24
    1cf0:	1b 97       	sbiw	r26, 0x0b	; 11
    1cf2:	23 c1       	rjmp	.+582    	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIM0_TIM1_T_PIN_RISINGEVENT:
						SET_BIT(TIMS->TCCR1B,CS10);
    1cf4:	a3 e4       	ldi	r26, 0x43	; 67
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e3 e4       	ldi	r30, 0x43	; 67
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	83 85       	ldd	r24, Z+11	; 0x0b
    1cfe:	81 60       	ori	r24, 0x01	; 1
    1d00:	1b 96       	adiw	r26, 0x0b	; 11
    1d02:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR1B,CS11);
    1d04:	a3 e4       	ldi	r26, 0x43	; 67
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e3 e4       	ldi	r30, 0x43	; 67
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	83 85       	ldd	r24, Z+11	; 0x0b
    1d0e:	82 60       	ori	r24, 0x02	; 2
    1d10:	1b 96       	adiw	r26, 0x0b	; 11
    1d12:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR1B,CS12);
    1d14:	a3 e4       	ldi	r26, 0x43	; 67
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e3 e4       	ldi	r30, 0x43	; 67
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	83 85       	ldd	r24, Z+11	; 0x0b
    1d1e:	84 60       	ori	r24, 0x04	; 4
    1d20:	1b 96       	adiw	r26, 0x0b	; 11
    1d22:	8c 93       	st	X, r24
    1d24:	1b 97       	sbiw	r26, 0x0b	; 11
    1d26:	09 c1       	rjmp	.+530    	; 0x1f3a <TIM_voidStart+0x696>
					default:
						break;
						}
				break;
			case (TIM2):
				switch(copy_TIMS_CLOCK){
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	3c 83       	std	Y+4, r19	; 0x04
    1d30:	2b 83       	std	Y+3, r18	; 0x03
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	83 30       	cpi	r24, 0x03	; 3
    1d38:	91 05       	cpc	r25, r1
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <TIM_voidStart+0x49a>
    1d3c:	7d c0       	rjmp	.+250    	; 0x1e38 <TIM_voidStart+0x594>
    1d3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d40:	3c 81       	ldd	r19, Y+4	; 0x04
    1d42:	24 30       	cpi	r18, 0x04	; 4
    1d44:	31 05       	cpc	r19, r1
    1d46:	8c f4       	brge	.+34     	; 0x1d6a <TIM_voidStart+0x4c6>
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	81 30       	cpi	r24, 0x01	; 1
    1d4e:	91 05       	cpc	r25, r1
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <TIM_voidStart+0x4b0>
    1d52:	3e c0       	rjmp	.+124    	; 0x1dd0 <TIM_voidStart+0x52c>
    1d54:	2b 81       	ldd	r18, Y+3	; 0x03
    1d56:	3c 81       	ldd	r19, Y+4	; 0x04
    1d58:	22 30       	cpi	r18, 0x02	; 2
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	0c f0       	brlt	.+2      	; 0x1d60 <TIM_voidStart+0x4bc>
    1d5e:	52 c0       	rjmp	.+164    	; 0x1e04 <TIM_voidStart+0x560>
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	9c 81       	ldd	r25, Y+4	; 0x04
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	d1 f0       	breq	.+52     	; 0x1d9c <TIM_voidStart+0x4f8>
    1d68:	e8 c0       	rjmp	.+464    	; 0x1f3a <TIM_voidStart+0x696>
    1d6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6e:	25 30       	cpi	r18, 0x05	; 5
    1d70:	31 05       	cpc	r19, r1
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <TIM_voidStart+0x4d2>
    1d74:	95 c0       	rjmp	.+298    	; 0x1ea0 <TIM_voidStart+0x5fc>
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	85 30       	cpi	r24, 0x05	; 5
    1d7c:	91 05       	cpc	r25, r1
    1d7e:	0c f4       	brge	.+2      	; 0x1d82 <TIM_voidStart+0x4de>
    1d80:	75 c0       	rjmp	.+234    	; 0x1e6c <TIM_voidStart+0x5c8>
    1d82:	2b 81       	ldd	r18, Y+3	; 0x03
    1d84:	3c 81       	ldd	r19, Y+4	; 0x04
    1d86:	26 30       	cpi	r18, 0x06	; 6
    1d88:	31 05       	cpc	r19, r1
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <TIM_voidStart+0x4ea>
    1d8c:	a3 c0       	rjmp	.+326    	; 0x1ed4 <TIM_voidStart+0x630>
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	87 30       	cpi	r24, 0x07	; 7
    1d94:	91 05       	cpc	r25, r1
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <TIM_voidStart+0x4f6>
    1d98:	b7 c0       	rjmp	.+366    	; 0x1f08 <TIM_voidStart+0x664>
    1d9a:	cf c0       	rjmp	.+414    	; 0x1f3a <TIM_voidStart+0x696>
					case TIMS_STOP:
						CLR_BIT(TIMS->TCCR2,CS20);
    1d9c:	a3 e4       	ldi	r26, 0x43	; 67
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e3 e4       	ldi	r30, 0x43	; 67
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	8e 7f       	andi	r24, 0xFE	; 254
    1da8:	12 96       	adiw	r26, 0x02	; 2
    1daa:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR2,CS21);
    1dac:	a3 e4       	ldi	r26, 0x43	; 67
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e3 e4       	ldi	r30, 0x43	; 67
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	82 81       	ldd	r24, Z+2	; 0x02
    1db6:	8d 7f       	andi	r24, 0xFD	; 253
    1db8:	12 96       	adiw	r26, 0x02	; 2
    1dba:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR2,CS22);
    1dbc:	a3 e4       	ldi	r26, 0x43	; 67
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e3 e4       	ldi	r30, 0x43	; 67
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	82 81       	ldd	r24, Z+2	; 0x02
    1dc6:	8b 7f       	andi	r24, 0xFB	; 251
    1dc8:	12 96       	adiw	r26, 0x02	; 2
    1dca:	8c 93       	st	X, r24
    1dcc:	12 97       	sbiw	r26, 0x02	; 2
    1dce:	b5 c0       	rjmp	.+362    	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_1:
						SET_BIT(TIMS->TCCR2,CS20);
    1dd0:	a3 e4       	ldi	r26, 0x43	; 67
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e3 e4       	ldi	r30, 0x43	; 67
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	81 60       	ori	r24, 0x01	; 1
    1ddc:	12 96       	adiw	r26, 0x02	; 2
    1dde:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR2,CS21);
    1de0:	a3 e4       	ldi	r26, 0x43	; 67
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e3 e4       	ldi	r30, 0x43	; 67
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	8d 7f       	andi	r24, 0xFD	; 253
    1dec:	12 96       	adiw	r26, 0x02	; 2
    1dee:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR2,CS22);
    1df0:	a3 e4       	ldi	r26, 0x43	; 67
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e3 e4       	ldi	r30, 0x43	; 67
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	82 81       	ldd	r24, Z+2	; 0x02
    1dfa:	8b 7f       	andi	r24, 0xFB	; 251
    1dfc:	12 96       	adiw	r26, 0x02	; 2
    1dfe:	8c 93       	st	X, r24
    1e00:	12 97       	sbiw	r26, 0x02	; 2
    1e02:	9b c0       	rjmp	.+310    	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_8:
						CLR_BIT(TIMS->TCCR2,CS20);
    1e04:	a3 e4       	ldi	r26, 0x43	; 67
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e3 e4       	ldi	r30, 0x43	; 67
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	82 81       	ldd	r24, Z+2	; 0x02
    1e0e:	8e 7f       	andi	r24, 0xFE	; 254
    1e10:	12 96       	adiw	r26, 0x02	; 2
    1e12:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR2,CS21);
    1e14:	a3 e4       	ldi	r26, 0x43	; 67
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e3 e4       	ldi	r30, 0x43	; 67
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	82 81       	ldd	r24, Z+2	; 0x02
    1e1e:	82 60       	ori	r24, 0x02	; 2
    1e20:	12 96       	adiw	r26, 0x02	; 2
    1e22:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR2,CS22);
    1e24:	a3 e4       	ldi	r26, 0x43	; 67
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e3 e4       	ldi	r30, 0x43	; 67
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	8b 7f       	andi	r24, 0xFB	; 251
    1e30:	12 96       	adiw	r26, 0x02	; 2
    1e32:	8c 93       	st	X, r24
    1e34:	12 97       	sbiw	r26, 0x02	; 2
    1e36:	81 c0       	rjmp	.+258    	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIM2_DIVISION_32:
						SET_BIT(TIMS->TCCR2,CS20);
    1e38:	a3 e4       	ldi	r26, 0x43	; 67
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e3 e4       	ldi	r30, 0x43	; 67
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	82 81       	ldd	r24, Z+2	; 0x02
    1e42:	81 60       	ori	r24, 0x01	; 1
    1e44:	12 96       	adiw	r26, 0x02	; 2
    1e46:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR2,CS21);
    1e48:	a3 e4       	ldi	r26, 0x43	; 67
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e3 e4       	ldi	r30, 0x43	; 67
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	82 81       	ldd	r24, Z+2	; 0x02
    1e52:	82 60       	ori	r24, 0x02	; 2
    1e54:	12 96       	adiw	r26, 0x02	; 2
    1e56:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR2,CS22);
    1e58:	a3 e4       	ldi	r26, 0x43	; 67
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e3 e4       	ldi	r30, 0x43	; 67
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	82 81       	ldd	r24, Z+2	; 0x02
    1e62:	8b 7f       	andi	r24, 0xFB	; 251
    1e64:	12 96       	adiw	r26, 0x02	; 2
    1e66:	8c 93       	st	X, r24
    1e68:	12 97       	sbiw	r26, 0x02	; 2
    1e6a:	67 c0       	rjmp	.+206    	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_64:
						CLR_BIT(TIMS->TCCR2,CS20);
    1e6c:	a3 e4       	ldi	r26, 0x43	; 67
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e3 e4       	ldi	r30, 0x43	; 67
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	82 81       	ldd	r24, Z+2	; 0x02
    1e76:	8e 7f       	andi	r24, 0xFE	; 254
    1e78:	12 96       	adiw	r26, 0x02	; 2
    1e7a:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR2,CS21);
    1e7c:	a3 e4       	ldi	r26, 0x43	; 67
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e3 e4       	ldi	r30, 0x43	; 67
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	8d 7f       	andi	r24, 0xFD	; 253
    1e88:	12 96       	adiw	r26, 0x02	; 2
    1e8a:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR2,CS22);
    1e8c:	a3 e4       	ldi	r26, 0x43	; 67
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e3 e4       	ldi	r30, 0x43	; 67
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	82 81       	ldd	r24, Z+2	; 0x02
    1e96:	84 60       	ori	r24, 0x04	; 4
    1e98:	12 96       	adiw	r26, 0x02	; 2
    1e9a:	8c 93       	st	X, r24
    1e9c:	12 97       	sbiw	r26, 0x02	; 2
    1e9e:	4d c0       	rjmp	.+154    	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIM2_DIVISION_128:
						SET_BIT(TIMS->TCCR2,CS20);
    1ea0:	a3 e4       	ldi	r26, 0x43	; 67
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e3 e4       	ldi	r30, 0x43	; 67
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	82 81       	ldd	r24, Z+2	; 0x02
    1eaa:	81 60       	ori	r24, 0x01	; 1
    1eac:	12 96       	adiw	r26, 0x02	; 2
    1eae:	8c 93       	st	X, r24
						CLR_BIT(TIMS->TCCR2,CS21);
    1eb0:	a3 e4       	ldi	r26, 0x43	; 67
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e3 e4       	ldi	r30, 0x43	; 67
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	82 81       	ldd	r24, Z+2	; 0x02
    1eba:	8d 7f       	andi	r24, 0xFD	; 253
    1ebc:	12 96       	adiw	r26, 0x02	; 2
    1ebe:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR2,CS22);
    1ec0:	a3 e4       	ldi	r26, 0x43	; 67
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e3 e4       	ldi	r30, 0x43	; 67
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	84 60       	ori	r24, 0x04	; 4
    1ecc:	12 96       	adiw	r26, 0x02	; 2
    1ece:	8c 93       	st	X, r24
    1ed0:	12 97       	sbiw	r26, 0x02	; 2
    1ed2:	33 c0       	rjmp	.+102    	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_256:
						CLR_BIT(TIMS->TCCR2,CS20);
    1ed4:	a3 e4       	ldi	r26, 0x43	; 67
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e3 e4       	ldi	r30, 0x43	; 67
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	8e 7f       	andi	r24, 0xFE	; 254
    1ee0:	12 96       	adiw	r26, 0x02	; 2
    1ee2:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR2,CS21);
    1ee4:	a3 e4       	ldi	r26, 0x43	; 67
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e3 e4       	ldi	r30, 0x43	; 67
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	82 81       	ldd	r24, Z+2	; 0x02
    1eee:	82 60       	ori	r24, 0x02	; 2
    1ef0:	12 96       	adiw	r26, 0x02	; 2
    1ef2:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR2,CS22);
    1ef4:	a3 e4       	ldi	r26, 0x43	; 67
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e3 e4       	ldi	r30, 0x43	; 67
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	82 81       	ldd	r24, Z+2	; 0x02
    1efe:	84 60       	ori	r24, 0x04	; 4
    1f00:	12 96       	adiw	r26, 0x02	; 2
    1f02:	8c 93       	st	X, r24
    1f04:	12 97       	sbiw	r26, 0x02	; 2
    1f06:	19 c0       	rjmp	.+50     	; 0x1f3a <TIM_voidStart+0x696>
						break;
					case TIMS_DIVISION_1024:
						SET_BIT(TIMS->TCCR2,CS20);
    1f08:	a3 e4       	ldi	r26, 0x43	; 67
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e3 e4       	ldi	r30, 0x43	; 67
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	82 81       	ldd	r24, Z+2	; 0x02
    1f12:	81 60       	ori	r24, 0x01	; 1
    1f14:	12 96       	adiw	r26, 0x02	; 2
    1f16:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR2,CS21);
    1f18:	a3 e4       	ldi	r26, 0x43	; 67
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e3 e4       	ldi	r30, 0x43	; 67
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	82 81       	ldd	r24, Z+2	; 0x02
    1f22:	82 60       	ori	r24, 0x02	; 2
    1f24:	12 96       	adiw	r26, 0x02	; 2
    1f26:	8c 93       	st	X, r24
						SET_BIT(TIMS->TCCR2,CS22);
    1f28:	a3 e4       	ldi	r26, 0x43	; 67
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e3 e4       	ldi	r30, 0x43	; 67
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	82 81       	ldd	r24, Z+2	; 0x02
    1f32:	84 60       	ori	r24, 0x04	; 4
    1f34:	12 96       	adiw	r26, 0x02	; 2
    1f36:	8c 93       	st	X, r24
    1f38:	12 97       	sbiw	r26, 0x02	; 2
			default:
				break;

		}

}
    1f3a:	2a 96       	adiw	r28, 0x0a	; 10
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <TIM_voidStop>:
void TIM_voidStop(TIM_ID copy_TIM_ID){
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <TIM_voidStop+0x6>
    1f52:	0f 92       	push	r0
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_TIM_ID){
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	3b 83       	std	Y+3, r19	; 0x03
    1f62:	2a 83       	std	Y+2, r18	; 0x02
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	9b 81       	ldd	r25, Y+3	; 0x03
    1f68:	81 30       	cpi	r24, 0x01	; 1
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	21 f1       	breq	.+72     	; 0x1fb6 <TIM_voidStop+0x6a>
    1f6e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f70:	3b 81       	ldd	r19, Y+3	; 0x03
    1f72:	22 30       	cpi	r18, 0x02	; 2
    1f74:	31 05       	cpc	r19, r1
    1f76:	c9 f1       	breq	.+114    	; 0x1fea <TIM_voidStop+0x9e>
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <TIM_voidStop+0x36>
    1f80:	4d c0       	rjmp	.+154    	; 0x201c <TIM_voidStop+0xd0>
			case (TIM0):
				CLR_BIT(TIMS->TCCR0,CS00);
    1f82:	a3 e4       	ldi	r26, 0x43	; 67
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e3 e4       	ldi	r30, 0x43	; 67
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 89       	ldd	r24, Z+16	; 0x10
    1f8c:	8e 7f       	andi	r24, 0xFE	; 254
    1f8e:	50 96       	adiw	r26, 0x10	; 16
    1f90:	8c 93       	st	X, r24
				CLR_BIT(TIMS->TCCR0,CS01);
    1f92:	a3 e4       	ldi	r26, 0x43	; 67
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e3 e4       	ldi	r30, 0x43	; 67
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 89       	ldd	r24, Z+16	; 0x10
    1f9c:	8d 7f       	andi	r24, 0xFD	; 253
    1f9e:	50 96       	adiw	r26, 0x10	; 16
    1fa0:	8c 93       	st	X, r24
				CLR_BIT(TIMS->TCCR0,CS02);
    1fa2:	a3 e4       	ldi	r26, 0x43	; 67
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e3 e4       	ldi	r30, 0x43	; 67
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 89       	ldd	r24, Z+16	; 0x10
    1fac:	8b 7f       	andi	r24, 0xFB	; 251
    1fae:	50 96       	adiw	r26, 0x10	; 16
    1fb0:	8c 93       	st	X, r24
    1fb2:	50 97       	sbiw	r26, 0x10	; 16
    1fb4:	33 c0       	rjmp	.+102    	; 0x201c <TIM_voidStop+0xd0>
				break;
			case (TIM1):
				CLR_BIT(TIMS->TCCR1B,CS10);
    1fb6:	a3 e4       	ldi	r26, 0x43	; 67
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e3 e4       	ldi	r30, 0x43	; 67
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	83 85       	ldd	r24, Z+11	; 0x0b
    1fc0:	8e 7f       	andi	r24, 0xFE	; 254
    1fc2:	1b 96       	adiw	r26, 0x0b	; 11
    1fc4:	8c 93       	st	X, r24
				CLR_BIT(TIMS->TCCR1B,CS11);
    1fc6:	a3 e4       	ldi	r26, 0x43	; 67
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e3 e4       	ldi	r30, 0x43	; 67
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	83 85       	ldd	r24, Z+11	; 0x0b
    1fd0:	8d 7f       	andi	r24, 0xFD	; 253
    1fd2:	1b 96       	adiw	r26, 0x0b	; 11
    1fd4:	8c 93       	st	X, r24
				CLR_BIT(TIMS->TCCR1B,CS12);
    1fd6:	a3 e4       	ldi	r26, 0x43	; 67
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e3 e4       	ldi	r30, 0x43	; 67
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	83 85       	ldd	r24, Z+11	; 0x0b
    1fe0:	8b 7f       	andi	r24, 0xFB	; 251
    1fe2:	1b 96       	adiw	r26, 0x0b	; 11
    1fe4:	8c 93       	st	X, r24
    1fe6:	1b 97       	sbiw	r26, 0x0b	; 11
    1fe8:	19 c0       	rjmp	.+50     	; 0x201c <TIM_voidStop+0xd0>
				break;
			case (TIM2):
				CLR_BIT(TIMS->TCCR2,CS20);
    1fea:	a3 e4       	ldi	r26, 0x43	; 67
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e3 e4       	ldi	r30, 0x43	; 67
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	8e 7f       	andi	r24, 0xFE	; 254
    1ff6:	12 96       	adiw	r26, 0x02	; 2
    1ff8:	8c 93       	st	X, r24
				CLR_BIT(TIMS->TCCR2,CS21);
    1ffa:	a3 e4       	ldi	r26, 0x43	; 67
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	e3 e4       	ldi	r30, 0x43	; 67
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	82 81       	ldd	r24, Z+2	; 0x02
    2004:	8d 7f       	andi	r24, 0xFD	; 253
    2006:	12 96       	adiw	r26, 0x02	; 2
    2008:	8c 93       	st	X, r24
				CLR_BIT(TIMS->TCCR2,CS22);
    200a:	a3 e4       	ldi	r26, 0x43	; 67
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e3 e4       	ldi	r30, 0x43	; 67
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	82 81       	ldd	r24, Z+2	; 0x02
    2014:	8b 7f       	andi	r24, 0xFB	; 251
    2016:	12 96       	adiw	r26, 0x02	; 2
    2018:	8c 93       	st	X, r24
    201a:	12 97       	sbiw	r26, 0x02	; 2
				break;
			default:
				break;
		}
}
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <TIM_voidEnableIntterput>:
void TIM_voidEnableIntterput(TIM_INTERRUPT_ID copy_TIM_INTERRUPT_ID){
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	00 d0       	rcall	.+0      	; 0x202e <TIM_voidEnableIntterput+0x6>
    202e:	0f 92       	push	r0
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_TIM_INTERRUPT_ID){
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	3b 83       	std	Y+3, r19	; 0x03
    203e:	2a 83       	std	Y+2, r18	; 0x02
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	9b 81       	ldd	r25, Y+3	; 0x03
    2044:	83 30       	cpi	r24, 0x03	; 3
    2046:	91 05       	cpc	r25, r1
    2048:	09 f4       	brne	.+2      	; 0x204c <TIM_voidEnableIntterput+0x24>
    204a:	4a c0       	rjmp	.+148    	; 0x20e0 <TIM_voidEnableIntterput+0xb8>
    204c:	2a 81       	ldd	r18, Y+2	; 0x02
    204e:	3b 81       	ldd	r19, Y+3	; 0x03
    2050:	24 30       	cpi	r18, 0x04	; 4
    2052:	31 05       	cpc	r19, r1
    2054:	7c f4       	brge	.+30     	; 0x2074 <TIM_voidEnableIntterput+0x4c>
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	9b 81       	ldd	r25, Y+3	; 0x03
    205a:	81 30       	cpi	r24, 0x01	; 1
    205c:	91 05       	cpc	r25, r1
    205e:	61 f1       	breq	.+88     	; 0x20b8 <TIM_voidEnableIntterput+0x90>
    2060:	2a 81       	ldd	r18, Y+2	; 0x02
    2062:	3b 81       	ldd	r19, Y+3	; 0x03
    2064:	22 30       	cpi	r18, 0x02	; 2
    2066:	31 05       	cpc	r19, r1
    2068:	8c f5       	brge	.+98     	; 0x20cc <TIM_voidEnableIntterput+0xa4>
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	9b 81       	ldd	r25, Y+3	; 0x03
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	c9 f0       	breq	.+50     	; 0x20a4 <TIM_voidEnableIntterput+0x7c>
    2072:	66 c0       	rjmp	.+204    	; 0x2140 <TIM_voidEnableIntterput+0x118>
    2074:	2a 81       	ldd	r18, Y+2	; 0x02
    2076:	3b 81       	ldd	r19, Y+3	; 0x03
    2078:	25 30       	cpi	r18, 0x05	; 5
    207a:	31 05       	cpc	r19, r1
    207c:	09 f4       	brne	.+2      	; 0x2080 <TIM_voidEnableIntterput+0x58>
    207e:	44 c0       	rjmp	.+136    	; 0x2108 <TIM_voidEnableIntterput+0xe0>
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	9b 81       	ldd	r25, Y+3	; 0x03
    2084:	85 30       	cpi	r24, 0x05	; 5
    2086:	91 05       	cpc	r25, r1
    2088:	ac f1       	brlt	.+106    	; 0x20f4 <TIM_voidEnableIntterput+0xcc>
    208a:	2a 81       	ldd	r18, Y+2	; 0x02
    208c:	3b 81       	ldd	r19, Y+3	; 0x03
    208e:	26 30       	cpi	r18, 0x06	; 6
    2090:	31 05       	cpc	r19, r1
    2092:	09 f4       	brne	.+2      	; 0x2096 <TIM_voidEnableIntterput+0x6e>
    2094:	43 c0       	rjmp	.+134    	; 0x211c <TIM_voidEnableIntterput+0xf4>
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	9b 81       	ldd	r25, Y+3	; 0x03
    209a:	87 30       	cpi	r24, 0x07	; 7
    209c:	91 05       	cpc	r25, r1
    209e:	09 f4       	brne	.+2      	; 0x20a2 <TIM_voidEnableIntterput+0x7a>
    20a0:	47 c0       	rjmp	.+142    	; 0x2130 <TIM_voidEnableIntterput+0x108>
    20a2:	4e c0       	rjmp	.+156    	; 0x2140 <TIM_voidEnableIntterput+0x118>
		case(TOI0):
			SET_BIT(TIMS->TIMSK,TOIE0);
    20a4:	a3 e4       	ldi	r26, 0x43	; 67
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e3 e4       	ldi	r30, 0x43	; 67
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	86 89       	ldd	r24, Z+22	; 0x16
    20ae:	81 60       	ori	r24, 0x01	; 1
    20b0:	56 96       	adiw	r26, 0x16	; 22
    20b2:	8c 93       	st	X, r24
    20b4:	56 97       	sbiw	r26, 0x16	; 22
    20b6:	44 c0       	rjmp	.+136    	; 0x2140 <TIM_voidEnableIntterput+0x118>
			break;
		case(OCI0):
			SET_BIT(TIMS->TIMSK,OCIE0);
    20b8:	a3 e4       	ldi	r26, 0x43	; 67
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e3 e4       	ldi	r30, 0x43	; 67
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	86 89       	ldd	r24, Z+22	; 0x16
    20c2:	82 60       	ori	r24, 0x02	; 2
    20c4:	56 96       	adiw	r26, 0x16	; 22
    20c6:	8c 93       	st	X, r24
    20c8:	56 97       	sbiw	r26, 0x16	; 22
    20ca:	3a c0       	rjmp	.+116    	; 0x2140 <TIM_voidEnableIntterput+0x118>
			break;
		case(TOI1):
			SET_BIT(TIMS->TIMSK,TOIE1);
    20cc:	a3 e4       	ldi	r26, 0x43	; 67
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	e3 e4       	ldi	r30, 0x43	; 67
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	86 89       	ldd	r24, Z+22	; 0x16
    20d6:	84 60       	ori	r24, 0x04	; 4
    20d8:	56 96       	adiw	r26, 0x16	; 22
    20da:	8c 93       	st	X, r24
    20dc:	56 97       	sbiw	r26, 0x16	; 22
    20de:	30 c0       	rjmp	.+96     	; 0x2140 <TIM_voidEnableIntterput+0x118>
			break;
		case(OCI1B):
			SET_BIT(TIMS->TIMSK,OCIE1B);
    20e0:	a3 e4       	ldi	r26, 0x43	; 67
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e3 e4       	ldi	r30, 0x43	; 67
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	86 89       	ldd	r24, Z+22	; 0x16
    20ea:	88 60       	ori	r24, 0x08	; 8
    20ec:	56 96       	adiw	r26, 0x16	; 22
    20ee:	8c 93       	st	X, r24
    20f0:	56 97       	sbiw	r26, 0x16	; 22
    20f2:	26 c0       	rjmp	.+76     	; 0x2140 <TIM_voidEnableIntterput+0x118>
			break;
		case(OCI1A):
			SET_BIT(TIMS->TIMSK,OCI1A);
    20f4:	a3 e4       	ldi	r26, 0x43	; 67
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e3 e4       	ldi	r30, 0x43	; 67
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	86 89       	ldd	r24, Z+22	; 0x16
    20fe:	80 61       	ori	r24, 0x10	; 16
    2100:	56 96       	adiw	r26, 0x16	; 22
    2102:	8c 93       	st	X, r24
    2104:	56 97       	sbiw	r26, 0x16	; 22
    2106:	1c c0       	rjmp	.+56     	; 0x2140 <TIM_voidEnableIntterput+0x118>
			break;
		case(TICI1):
			SET_BIT(TIMS->TIMSK,TICIE1);
    2108:	a3 e4       	ldi	r26, 0x43	; 67
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e3 e4       	ldi	r30, 0x43	; 67
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	86 89       	ldd	r24, Z+22	; 0x16
    2112:	80 62       	ori	r24, 0x20	; 32
    2114:	56 96       	adiw	r26, 0x16	; 22
    2116:	8c 93       	st	X, r24
    2118:	56 97       	sbiw	r26, 0x16	; 22
    211a:	12 c0       	rjmp	.+36     	; 0x2140 <TIM_voidEnableIntterput+0x118>
			break;
		case(TOI2):
			SET_BIT(TIMS->TIMSK,TOIE2);
    211c:	a3 e4       	ldi	r26, 0x43	; 67
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e3 e4       	ldi	r30, 0x43	; 67
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	86 89       	ldd	r24, Z+22	; 0x16
    2126:	80 64       	ori	r24, 0x40	; 64
    2128:	56 96       	adiw	r26, 0x16	; 22
    212a:	8c 93       	st	X, r24
    212c:	56 97       	sbiw	r26, 0x16	; 22
    212e:	08 c0       	rjmp	.+16     	; 0x2140 <TIM_voidEnableIntterput+0x118>
			break;
		case(OCI2):
			SET_BIT(TIMS->TIMSK,OCIE2);
    2130:	a3 e4       	ldi	r26, 0x43	; 67
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e3 e4       	ldi	r30, 0x43	; 67
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	86 89       	ldd	r24, Z+22	; 0x16
    213a:	80 68       	ori	r24, 0x80	; 128
    213c:	56 96       	adiw	r26, 0x16	; 22
    213e:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
	SET_BIT(TIMS->SREG,GIE);
    2140:	a3 e4       	ldi	r26, 0x43	; 67
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e3 e4       	ldi	r30, 0x43	; 67
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	84 8d       	ldd	r24, Z+28	; 0x1c
    214a:	80 68       	ori	r24, 0x80	; 128
    214c:	5c 96       	adiw	r26, 0x1c	; 28
    214e:	8c 93       	st	X, r24
    2150:	5c 97       	sbiw	r26, 0x1c	; 28
}
    2152:	0f 90       	pop	r0
    2154:	0f 90       	pop	r0
    2156:	0f 90       	pop	r0
    2158:	cf 91       	pop	r28
    215a:	df 91       	pop	r29
    215c:	08 95       	ret

0000215e <TIM_voidDisableIntterput>:
void TIM_voidDisableIntterput(TIM_INTERRUPT_ID copy_TIM_INTERRUPT_ID){
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	00 d0       	rcall	.+0      	; 0x2164 <TIM_voidDisableIntterput+0x6>
    2164:	0f 92       	push	r0
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_TIM_INTERRUPT_ID){
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	28 2f       	mov	r18, r24
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	3b 83       	std	Y+3, r19	; 0x03
    2174:	2a 83       	std	Y+2, r18	; 0x02
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	9b 81       	ldd	r25, Y+3	; 0x03
    217a:	83 30       	cpi	r24, 0x03	; 3
    217c:	91 05       	cpc	r25, r1
    217e:	09 f4       	brne	.+2      	; 0x2182 <TIM_voidDisableIntterput+0x24>
    2180:	4a c0       	rjmp	.+148    	; 0x2216 <TIM_voidDisableIntterput+0xb8>
    2182:	2a 81       	ldd	r18, Y+2	; 0x02
    2184:	3b 81       	ldd	r19, Y+3	; 0x03
    2186:	24 30       	cpi	r18, 0x04	; 4
    2188:	31 05       	cpc	r19, r1
    218a:	7c f4       	brge	.+30     	; 0x21aa <TIM_voidDisableIntterput+0x4c>
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	9b 81       	ldd	r25, Y+3	; 0x03
    2190:	81 30       	cpi	r24, 0x01	; 1
    2192:	91 05       	cpc	r25, r1
    2194:	61 f1       	breq	.+88     	; 0x21ee <TIM_voidDisableIntterput+0x90>
    2196:	2a 81       	ldd	r18, Y+2	; 0x02
    2198:	3b 81       	ldd	r19, Y+3	; 0x03
    219a:	22 30       	cpi	r18, 0x02	; 2
    219c:	31 05       	cpc	r19, r1
    219e:	8c f5       	brge	.+98     	; 0x2202 <TIM_voidDisableIntterput+0xa4>
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	9b 81       	ldd	r25, Y+3	; 0x03
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	c9 f0       	breq	.+50     	; 0x21da <TIM_voidDisableIntterput+0x7c>
    21a8:	67 c0       	rjmp	.+206    	; 0x2278 <TIM_voidDisableIntterput+0x11a>
    21aa:	2a 81       	ldd	r18, Y+2	; 0x02
    21ac:	3b 81       	ldd	r19, Y+3	; 0x03
    21ae:	25 30       	cpi	r18, 0x05	; 5
    21b0:	31 05       	cpc	r19, r1
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <TIM_voidDisableIntterput+0x58>
    21b4:	44 c0       	rjmp	.+136    	; 0x223e <TIM_voidDisableIntterput+0xe0>
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ba:	85 30       	cpi	r24, 0x05	; 5
    21bc:	91 05       	cpc	r25, r1
    21be:	ac f1       	brlt	.+106    	; 0x222a <TIM_voidDisableIntterput+0xcc>
    21c0:	2a 81       	ldd	r18, Y+2	; 0x02
    21c2:	3b 81       	ldd	r19, Y+3	; 0x03
    21c4:	26 30       	cpi	r18, 0x06	; 6
    21c6:	31 05       	cpc	r19, r1
    21c8:	09 f4       	brne	.+2      	; 0x21cc <TIM_voidDisableIntterput+0x6e>
    21ca:	43 c0       	rjmp	.+134    	; 0x2252 <TIM_voidDisableIntterput+0xf4>
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	9b 81       	ldd	r25, Y+3	; 0x03
    21d0:	87 30       	cpi	r24, 0x07	; 7
    21d2:	91 05       	cpc	r25, r1
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <TIM_voidDisableIntterput+0x7a>
    21d6:	47 c0       	rjmp	.+142    	; 0x2266 <TIM_voidDisableIntterput+0x108>
    21d8:	4f c0       	rjmp	.+158    	; 0x2278 <TIM_voidDisableIntterput+0x11a>
		case(TOI0):
			CLR_BIT(TIMS->TIMSK,TOIE0);
    21da:	a3 e4       	ldi	r26, 0x43	; 67
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e3 e4       	ldi	r30, 0x43	; 67
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	86 89       	ldd	r24, Z+22	; 0x16
    21e4:	8e 7f       	andi	r24, 0xFE	; 254
    21e6:	56 96       	adiw	r26, 0x16	; 22
    21e8:	8c 93       	st	X, r24
    21ea:	56 97       	sbiw	r26, 0x16	; 22
    21ec:	45 c0       	rjmp	.+138    	; 0x2278 <TIM_voidDisableIntterput+0x11a>
			break;
		case(OCI0):
			CLR_BIT(TIMS->TIMSK,OCIE0);
    21ee:	a3 e4       	ldi	r26, 0x43	; 67
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	e3 e4       	ldi	r30, 0x43	; 67
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	86 89       	ldd	r24, Z+22	; 0x16
    21f8:	8d 7f       	andi	r24, 0xFD	; 253
    21fa:	56 96       	adiw	r26, 0x16	; 22
    21fc:	8c 93       	st	X, r24
    21fe:	56 97       	sbiw	r26, 0x16	; 22
    2200:	3b c0       	rjmp	.+118    	; 0x2278 <TIM_voidDisableIntterput+0x11a>
			break;
		case(TOI1):
			CLR_BIT(TIMS->TIMSK,TOIE1);
    2202:	a3 e4       	ldi	r26, 0x43	; 67
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e3 e4       	ldi	r30, 0x43	; 67
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	86 89       	ldd	r24, Z+22	; 0x16
    220c:	8b 7f       	andi	r24, 0xFB	; 251
    220e:	56 96       	adiw	r26, 0x16	; 22
    2210:	8c 93       	st	X, r24
    2212:	56 97       	sbiw	r26, 0x16	; 22
    2214:	31 c0       	rjmp	.+98     	; 0x2278 <TIM_voidDisableIntterput+0x11a>
			break;
		case(OCI1B):
			CLR_BIT(TIMS->TIMSK,OCIE1B);
    2216:	a3 e4       	ldi	r26, 0x43	; 67
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e3 e4       	ldi	r30, 0x43	; 67
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	86 89       	ldd	r24, Z+22	; 0x16
    2220:	87 7f       	andi	r24, 0xF7	; 247
    2222:	56 96       	adiw	r26, 0x16	; 22
    2224:	8c 93       	st	X, r24
    2226:	56 97       	sbiw	r26, 0x16	; 22
    2228:	27 c0       	rjmp	.+78     	; 0x2278 <TIM_voidDisableIntterput+0x11a>
			break;
		case(OCI1A):
			CLR_BIT(TIMS->TIMSK,OCI1A);
    222a:	a3 e4       	ldi	r26, 0x43	; 67
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	e3 e4       	ldi	r30, 0x43	; 67
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	86 89       	ldd	r24, Z+22	; 0x16
    2234:	8f 7e       	andi	r24, 0xEF	; 239
    2236:	56 96       	adiw	r26, 0x16	; 22
    2238:	8c 93       	st	X, r24
    223a:	56 97       	sbiw	r26, 0x16	; 22
    223c:	1d c0       	rjmp	.+58     	; 0x2278 <TIM_voidDisableIntterput+0x11a>
			break;
		case(TICI1):
			CLR_BIT(TIMS->TIMSK,TICIE1);
    223e:	a3 e4       	ldi	r26, 0x43	; 67
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e3 e4       	ldi	r30, 0x43	; 67
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	86 89       	ldd	r24, Z+22	; 0x16
    2248:	8f 7d       	andi	r24, 0xDF	; 223
    224a:	56 96       	adiw	r26, 0x16	; 22
    224c:	8c 93       	st	X, r24
    224e:	56 97       	sbiw	r26, 0x16	; 22
    2250:	13 c0       	rjmp	.+38     	; 0x2278 <TIM_voidDisableIntterput+0x11a>
			break;
		case(TOI2):
			CLR_BIT(TIMS->TIMSK,TOIE2);
    2252:	a3 e4       	ldi	r26, 0x43	; 67
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	e3 e4       	ldi	r30, 0x43	; 67
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	86 89       	ldd	r24, Z+22	; 0x16
    225c:	8f 7b       	andi	r24, 0xBF	; 191
    225e:	56 96       	adiw	r26, 0x16	; 22
    2260:	8c 93       	st	X, r24
    2262:	56 97       	sbiw	r26, 0x16	; 22
    2264:	09 c0       	rjmp	.+18     	; 0x2278 <TIM_voidDisableIntterput+0x11a>
			break;
		case(OCI2):
			CLR_BIT(TIMS->TIMSK,OCIE2);
    2266:	a3 e4       	ldi	r26, 0x43	; 67
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e3 e4       	ldi	r30, 0x43	; 67
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	86 89       	ldd	r24, Z+22	; 0x16
    2270:	8f 77       	andi	r24, 0x7F	; 127
    2272:	56 96       	adiw	r26, 0x16	; 22
    2274:	8c 93       	st	X, r24
    2276:	56 97       	sbiw	r26, 0x16	; 22
			break;
		default:
			break;
		}
}
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <TIM_voidGetISR>:
void TIM_voidGetISR(TIM_INTERRUPT_ID copy_TIM_INTERRUPT_ID,void (*pf)(void)){
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	00 d0       	rcall	.+0      	; 0x228a <TIM_voidGetISR+0x6>
    228a:	00 d0       	rcall	.+0      	; 0x228c <TIM_voidGetISR+0x8>
    228c:	0f 92       	push	r0
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	89 83       	std	Y+1, r24	; 0x01
    2294:	7b 83       	std	Y+3, r23	; 0x03
    2296:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_TIM_INTERRUPT_ID){
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	28 2f       	mov	r18, r24
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	3d 83       	std	Y+5, r19	; 0x05
    22a0:	2c 83       	std	Y+4, r18	; 0x04
    22a2:	8c 81       	ldd	r24, Y+4	; 0x04
    22a4:	9d 81       	ldd	r25, Y+5	; 0x05
    22a6:	83 30       	cpi	r24, 0x03	; 3
    22a8:	91 05       	cpc	r25, r1
    22aa:	09 f4       	brne	.+2      	; 0x22ae <TIM_voidGetISR+0x2a>
    22ac:	3e c0       	rjmp	.+124    	; 0x232a <TIM_voidGetISR+0xa6>
    22ae:	2c 81       	ldd	r18, Y+4	; 0x04
    22b0:	3d 81       	ldd	r19, Y+5	; 0x05
    22b2:	24 30       	cpi	r18, 0x04	; 4
    22b4:	31 05       	cpc	r19, r1
    22b6:	7c f4       	brge	.+30     	; 0x22d6 <TIM_voidGetISR+0x52>
    22b8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ba:	9d 81       	ldd	r25, Y+5	; 0x05
    22bc:	81 30       	cpi	r24, 0x01	; 1
    22be:	91 05       	cpc	r25, r1
    22c0:	31 f1       	breq	.+76     	; 0x230e <TIM_voidGetISR+0x8a>
    22c2:	2c 81       	ldd	r18, Y+4	; 0x04
    22c4:	3d 81       	ldd	r19, Y+5	; 0x05
    22c6:	22 30       	cpi	r18, 0x02	; 2
    22c8:	31 05       	cpc	r19, r1
    22ca:	44 f5       	brge	.+80     	; 0x231c <TIM_voidGetISR+0x98>
    22cc:	8c 81       	ldd	r24, Y+4	; 0x04
    22ce:	9d 81       	ldd	r25, Y+5	; 0x05
    22d0:	00 97       	sbiw	r24, 0x00	; 0
    22d2:	b1 f0       	breq	.+44     	; 0x2300 <TIM_voidGetISR+0x7c>
    22d4:	4c c0       	rjmp	.+152    	; 0x236e <TIM_voidGetISR+0xea>
    22d6:	2c 81       	ldd	r18, Y+4	; 0x04
    22d8:	3d 81       	ldd	r19, Y+5	; 0x05
    22da:	25 30       	cpi	r18, 0x05	; 5
    22dc:	31 05       	cpc	r19, r1
    22de:	99 f1       	breq	.+102    	; 0x2346 <TIM_voidGetISR+0xc2>
    22e0:	8c 81       	ldd	r24, Y+4	; 0x04
    22e2:	9d 81       	ldd	r25, Y+5	; 0x05
    22e4:	85 30       	cpi	r24, 0x05	; 5
    22e6:	91 05       	cpc	r25, r1
    22e8:	3c f1       	brlt	.+78     	; 0x2338 <TIM_voidGetISR+0xb4>
    22ea:	2c 81       	ldd	r18, Y+4	; 0x04
    22ec:	3d 81       	ldd	r19, Y+5	; 0x05
    22ee:	26 30       	cpi	r18, 0x06	; 6
    22f0:	31 05       	cpc	r19, r1
    22f2:	81 f1       	breq	.+96     	; 0x2354 <TIM_voidGetISR+0xd0>
    22f4:	8c 81       	ldd	r24, Y+4	; 0x04
    22f6:	9d 81       	ldd	r25, Y+5	; 0x05
    22f8:	87 30       	cpi	r24, 0x07	; 7
    22fa:	91 05       	cpc	r25, r1
    22fc:	91 f1       	breq	.+100    	; 0x2362 <TIM_voidGetISR+0xde>
    22fe:	37 c0       	rjmp	.+110    	; 0x236e <TIM_voidGetISR+0xea>
		case(TOI0):
			TIMER0_OVF_pf=pf;
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	9b 81       	ldd	r25, Y+3	; 0x03
    2304:	90 93 41 02 	sts	0x0241, r25
    2308:	80 93 40 02 	sts	0x0240, r24
    230c:	30 c0       	rjmp	.+96     	; 0x236e <TIM_voidGetISR+0xea>
			break;
		case(OCI0):
			TIMER0_COMP_pf=pf;
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	9b 81       	ldd	r25, Y+3	; 0x03
    2312:	90 93 3f 02 	sts	0x023F, r25
    2316:	80 93 3e 02 	sts	0x023E, r24
    231a:	29 c0       	rjmp	.+82     	; 0x236e <TIM_voidGetISR+0xea>
			break;
		case(TOI1):
			TIMER1_OVF_pf=pf;
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	9b 81       	ldd	r25, Y+3	; 0x03
    2320:	90 93 3d 02 	sts	0x023D, r25
    2324:	80 93 3c 02 	sts	0x023C, r24
    2328:	22 c0       	rjmp	.+68     	; 0x236e <TIM_voidGetISR+0xea>
			break;
		case(OCI1B):
			TIMER1_COMPB_pf=pf;
    232a:	8a 81       	ldd	r24, Y+2	; 0x02
    232c:	9b 81       	ldd	r25, Y+3	; 0x03
    232e:	90 93 3b 02 	sts	0x023B, r25
    2332:	80 93 3a 02 	sts	0x023A, r24
    2336:	1b c0       	rjmp	.+54     	; 0x236e <TIM_voidGetISR+0xea>
			break;
		case(OCI1A):
			TIMER1_COMPA_pf=pf;
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	9b 81       	ldd	r25, Y+3	; 0x03
    233c:	90 93 39 02 	sts	0x0239, r25
    2340:	80 93 38 02 	sts	0x0238, r24
    2344:	14 c0       	rjmp	.+40     	; 0x236e <TIM_voidGetISR+0xea>
			break;
		case(TICI1):
			TIMER1_CAPT_pf=pf;
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	9b 81       	ldd	r25, Y+3	; 0x03
    234a:	90 93 37 02 	sts	0x0237, r25
    234e:	80 93 36 02 	sts	0x0236, r24
    2352:	0d c0       	rjmp	.+26     	; 0x236e <TIM_voidGetISR+0xea>
			break;
		case(TOI2):
			TIMER2_OVF_pf=pf;
    2354:	8a 81       	ldd	r24, Y+2	; 0x02
    2356:	9b 81       	ldd	r25, Y+3	; 0x03
    2358:	90 93 35 02 	sts	0x0235, r25
    235c:	80 93 34 02 	sts	0x0234, r24
    2360:	06 c0       	rjmp	.+12     	; 0x236e <TIM_voidGetISR+0xea>
			break;
		case(OCI2):
			TIMER2_COMP_pf=pf;
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	9b 81       	ldd	r25, Y+3	; 0x03
    2366:	90 93 33 02 	sts	0x0233, r25
    236a:	80 93 32 02 	sts	0x0232, r24
			break;
		default:
			break;
			}
}
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	cf 91       	pop	r28
    237a:	df 91       	pop	r29
    237c:	08 95       	ret

0000237e <TIM_u16GetTimerCount>:
u16  TIM_u16GetTimerCount(TIM_ID copy_TIM_ID){
    237e:	df 93       	push	r29
    2380:	cf 93       	push	r28
    2382:	00 d0       	rcall	.+0      	; 0x2384 <TIM_u16GetTimerCount+0x6>
    2384:	00 d0       	rcall	.+0      	; 0x2386 <TIM_u16GetTimerCount+0x8>
    2386:	0f 92       	push	r0
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_TIM_ID){
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	28 2f       	mov	r18, r24
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	3d 83       	std	Y+5, r19	; 0x05
    2396:	2c 83       	std	Y+4, r18	; 0x04
    2398:	8c 81       	ldd	r24, Y+4	; 0x04
    239a:	9d 81       	ldd	r25, Y+5	; 0x05
    239c:	81 30       	cpi	r24, 0x01	; 1
    239e:	91 05       	cpc	r25, r1
    23a0:	89 f0       	breq	.+34     	; 0x23c4 <TIM_u16GetTimerCount+0x46>
    23a2:	2c 81       	ldd	r18, Y+4	; 0x04
    23a4:	3d 81       	ldd	r19, Y+5	; 0x05
    23a6:	22 30       	cpi	r18, 0x02	; 2
    23a8:	31 05       	cpc	r19, r1
    23aa:	99 f0       	breq	.+38     	; 0x23d2 <TIM_u16GetTimerCount+0x54>
    23ac:	8c 81       	ldd	r24, Y+4	; 0x04
    23ae:	9d 81       	ldd	r25, Y+5	; 0x05
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	b9 f4       	brne	.+46     	; 0x23e2 <TIM_u16GetTimerCount+0x64>
		case (TIM0):
				return (u16) TIMS->TCNT0;
    23b4:	e3 e4       	ldi	r30, 0x43	; 67
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	87 85       	ldd	r24, Z+15	; 0x0f
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	3b 83       	std	Y+3, r19	; 0x03
    23c0:	2a 83       	std	Y+2, r18	; 0x02
    23c2:	11 c0       	rjmp	.+34     	; 0x23e6 <TIM_u16GetTimerCount+0x68>
			break;
		case (TIM1):
				return (u16) TIMS->TCNT1;
    23c4:	e3 e4       	ldi	r30, 0x43	; 67
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	81 85       	ldd	r24, Z+9	; 0x09
    23ca:	92 85       	ldd	r25, Z+10	; 0x0a
    23cc:	9b 83       	std	Y+3, r25	; 0x03
    23ce:	8a 83       	std	Y+2, r24	; 0x02
    23d0:	0a c0       	rjmp	.+20     	; 0x23e6 <TIM_u16GetTimerCount+0x68>
			break;
		case (TIM2):
				return (u16) TIMS->TCNT2;
    23d2:	e3 e4       	ldi	r30, 0x43	; 67
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	81 81       	ldd	r24, Z+1	; 0x01
    23d8:	28 2f       	mov	r18, r24
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	3b 83       	std	Y+3, r19	; 0x03
    23de:	2a 83       	std	Y+2, r18	; 0x02
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <TIM_u16GetTimerCount+0x68>
			break;
		default:
				return (u16) 0;
    23e2:	1b 82       	std	Y+3, r1	; 0x03
    23e4:	1a 82       	std	Y+2, r1	; 0x02
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	9b 81       	ldd	r25, Y+3	; 0x03
			break;

	}
}
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	cf 91       	pop	r28
    23f6:	df 91       	pop	r29
    23f8:	08 95       	ret

000023fa <TIM_voidSetComperMatch>:
void TIM_voidSetComperMatch(TIMS_COMPERMATCH_T copy_TIMS_COMPERMATCH_T,u16 copy_u16ComperMatchValue){
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	00 d0       	rcall	.+0      	; 0x2400 <TIM_voidSetComperMatch+0x6>
    2400:	00 d0       	rcall	.+0      	; 0x2402 <TIM_voidSetComperMatch+0x8>
    2402:	0f 92       	push	r0
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	89 83       	std	Y+1, r24	; 0x01
    240a:	7b 83       	std	Y+3, r23	; 0x03
    240c:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_TIMS_COMPERMATCH_T){
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	28 2f       	mov	r18, r24
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	3d 83       	std	Y+5, r19	; 0x05
    2416:	2c 83       	std	Y+4, r18	; 0x04
    2418:	8c 81       	ldd	r24, Y+4	; 0x04
    241a:	9d 81       	ldd	r25, Y+5	; 0x05
    241c:	82 30       	cpi	r24, 0x02	; 2
    241e:	91 05       	cpc	r25, r1
    2420:	31 f1       	breq	.+76     	; 0x246e <TIM_voidSetComperMatch+0x74>
    2422:	2c 81       	ldd	r18, Y+4	; 0x04
    2424:	3d 81       	ldd	r19, Y+5	; 0x05
    2426:	23 30       	cpi	r18, 0x03	; 3
    2428:	31 05       	cpc	r19, r1
    242a:	54 f4       	brge	.+20     	; 0x2440 <TIM_voidSetComperMatch+0x46>
    242c:	8c 81       	ldd	r24, Y+4	; 0x04
    242e:	9d 81       	ldd	r25, Y+5	; 0x05
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	89 f0       	breq	.+34     	; 0x2456 <TIM_voidSetComperMatch+0x5c>
    2434:	2c 81       	ldd	r18, Y+4	; 0x04
    2436:	3d 81       	ldd	r19, Y+5	; 0x05
    2438:	21 30       	cpi	r18, 0x01	; 1
    243a:	31 05       	cpc	r19, r1
    243c:	89 f0       	breq	.+34     	; 0x2460 <TIM_voidSetComperMatch+0x66>
    243e:	29 c0       	rjmp	.+82     	; 0x2492 <TIM_voidSetComperMatch+0x98>
    2440:	8c 81       	ldd	r24, Y+4	; 0x04
    2442:	9d 81       	ldd	r25, Y+5	; 0x05
    2444:	83 30       	cpi	r24, 0x03	; 3
    2446:	91 05       	cpc	r25, r1
    2448:	01 f1       	breq	.+64     	; 0x248a <TIM_voidSetComperMatch+0x90>
    244a:	2c 81       	ldd	r18, Y+4	; 0x04
    244c:	3d 81       	ldd	r19, Y+5	; 0x05
    244e:	24 30       	cpi	r18, 0x04	; 4
    2450:	31 05       	cpc	r19, r1
    2452:	a1 f0       	breq	.+40     	; 0x247c <TIM_voidSetComperMatch+0x82>
    2454:	1e c0       	rjmp	.+60     	; 0x2492 <TIM_voidSetComperMatch+0x98>
	case(OC0):
		TIMS->OCR0 =	(u8)copy_u16ComperMatchValue;
    2456:	e3 e4       	ldi	r30, 0x43	; 67
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	8a 81       	ldd	r24, Y+2	; 0x02
    245c:	81 8f       	std	Z+25, r24	; 0x19
    245e:	19 c0       	rjmp	.+50     	; 0x2492 <TIM_voidSetComperMatch+0x98>
	break;
	case(OC1B):
		TIMS->OCR1B =	(u16)copy_u16ComperMatchValue;
    2460:	e3 e4       	ldi	r30, 0x43	; 67
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	9b 81       	ldd	r25, Y+3	; 0x03
    2468:	96 83       	std	Z+6, r25	; 0x06
    246a:	85 83       	std	Z+5, r24	; 0x05
    246c:	12 c0       	rjmp	.+36     	; 0x2492 <TIM_voidSetComperMatch+0x98>
		break;
	case(OC1A):
		TIMS->OCR1A =	(u16)copy_u16ComperMatchValue;
    246e:	e3 e4       	ldi	r30, 0x43	; 67
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	8a 81       	ldd	r24, Y+2	; 0x02
    2474:	9b 81       	ldd	r25, Y+3	; 0x03
    2476:	90 87       	std	Z+8, r25	; 0x08
    2478:	87 83       	std	Z+7, r24	; 0x07
    247a:	0b c0       	rjmp	.+22     	; 0x2492 <TIM_voidSetComperMatch+0x98>
		break;
	case(ICR):
		TIMS->ICR1 =	(u16)copy_u16ComperMatchValue;
    247c:	e3 e4       	ldi	r30, 0x43	; 67
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	9b 81       	ldd	r25, Y+3	; 0x03
    2484:	94 83       	std	Z+4, r25	; 0x04
    2486:	83 83       	std	Z+3, r24	; 0x03
    2488:	04 c0       	rjmp	.+8      	; 0x2492 <TIM_voidSetComperMatch+0x98>
		break;
	case(OC2):
		TIMS->OCR2 = 	(u8)copy_u16ComperMatchValue;
    248a:	e3 e4       	ldi	r30, 0x43	; 67
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
    2490:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	08 95       	ret

000024a2 <TIM_voidSetCountRegister>:
void TIM_voidSetCountRegister(TIM_ID copy_TIM_ID, u16 copy_u16CountValue){
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <TIM_voidSetCountRegister+0x6>
    24a8:	00 d0       	rcall	.+0      	; 0x24aa <TIM_voidSetCountRegister+0x8>
    24aa:	0f 92       	push	r0
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    24b0:	89 83       	std	Y+1, r24	; 0x01
    24b2:	7b 83       	std	Y+3, r23	; 0x03
    24b4:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_TIM_ID){
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	28 2f       	mov	r18, r24
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	3d 83       	std	Y+5, r19	; 0x05
    24be:	2c 83       	std	Y+4, r18	; 0x04
    24c0:	8c 81       	ldd	r24, Y+4	; 0x04
    24c2:	9d 81       	ldd	r25, Y+5	; 0x05
    24c4:	81 30       	cpi	r24, 0x01	; 1
    24c6:	91 05       	cpc	r25, r1
    24c8:	71 f0       	breq	.+28     	; 0x24e6 <TIM_voidSetCountRegister+0x44>
    24ca:	2c 81       	ldd	r18, Y+4	; 0x04
    24cc:	3d 81       	ldd	r19, Y+5	; 0x05
    24ce:	22 30       	cpi	r18, 0x02	; 2
    24d0:	31 05       	cpc	r19, r1
    24d2:	81 f0       	breq	.+32     	; 0x24f4 <TIM_voidSetCountRegister+0x52>
    24d4:	8c 81       	ldd	r24, Y+4	; 0x04
    24d6:	9d 81       	ldd	r25, Y+5	; 0x05
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	81 f4       	brne	.+32     	; 0x24fc <TIM_voidSetCountRegister+0x5a>
		case (TIM0):
			TIMS->TCNT0=	(u8)copy_u16CountValue;
    24dc:	e3 e4       	ldi	r30, 0x43	; 67
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	87 87       	std	Z+15, r24	; 0x0f
    24e4:	0b c0       	rjmp	.+22     	; 0x24fc <TIM_voidSetCountRegister+0x5a>
			break;
		case (TIM1):
			TIMS->TCNT1=	(u16)copy_u16CountValue;
    24e6:	e3 e4       	ldi	r30, 0x43	; 67
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	9b 81       	ldd	r25, Y+3	; 0x03
    24ee:	92 87       	std	Z+10, r25	; 0x0a
    24f0:	81 87       	std	Z+9, r24	; 0x09
    24f2:	04 c0       	rjmp	.+8      	; 0x24fc <TIM_voidSetCountRegister+0x5a>
			break;
		case (TIM2):
			TIMS->TCNT2=	(u8)copy_u16CountValue;
    24f4:	e3 e4       	ldi	r30, 0x43	; 67
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	81 83       	std	Z+1, r24	; 0x01
			break;
		default:
			break;

		}
}
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	0f 90       	pop	r0
    2504:	0f 90       	pop	r0
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	08 95       	ret

0000250c <TIM_voidMakeActionAsynchronous>:
void TIM_voidMakeActionAsynchronous(TIM_ID copy_TIM_ID,u32 copy_Delay_ms,void (*pf)(void)){
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    2514:	63 97       	sbiw	r28, 0x13	; 19
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	f8 94       	cli
    251a:	de bf       	out	0x3e, r29	; 62
    251c:	0f be       	out	0x3f, r0	; 63
    251e:	cd bf       	out	0x3d, r28	; 61
    2520:	8b 87       	std	Y+11, r24	; 0x0b
    2522:	4c 87       	std	Y+12, r20	; 0x0c
    2524:	5d 87       	std	Y+13, r21	; 0x0d
    2526:	6e 87       	std	Y+14, r22	; 0x0e
    2528:	7f 87       	std	Y+15, r23	; 0x0f
    252a:	39 8b       	std	Y+17, r19	; 0x11
    252c:	28 8b       	std	Y+16, r18	; 0x10
	u32 TickTime=1024/TIM_CPU_F;
    252e:	80 e8       	ldi	r24, 0x80	; 128
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	a0 e0       	ldi	r26, 0x00	; 0
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	8f 83       	std	Y+7, r24	; 0x07
    2538:	98 87       	std	Y+8, r25	; 0x08
    253a:	a9 87       	std	Y+9, r26	; 0x09
    253c:	ba 87       	std	Y+10, r27	; 0x0a
	u16 Drisredcounts=0;
    253e:	1e 82       	std	Y+6, r1	; 0x06
    2540:	1d 82       	std	Y+5, r1	; 0x05
	u32 OverFlowTime=0;
    2542:	19 82       	std	Y+1, r1	; 0x01
    2544:	1a 82       	std	Y+2, r1	; 0x02
    2546:	1b 82       	std	Y+3, r1	; 0x03
    2548:	1c 82       	std	Y+4, r1	; 0x04
	switch(copy_TIM_ID){
    254a:	8b 85       	ldd	r24, Y+11	; 0x0b
    254c:	28 2f       	mov	r18, r24
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	3b 8b       	std	Y+19, r19	; 0x13
    2552:	2a 8b       	std	Y+18, r18	; 0x12
    2554:	8a 89       	ldd	r24, Y+18	; 0x12
    2556:	9b 89       	ldd	r25, Y+19	; 0x13
    2558:	81 30       	cpi	r24, 0x01	; 1
    255a:	91 05       	cpc	r25, r1
    255c:	09 f4       	brne	.+2      	; 0x2560 <TIM_voidMakeActionAsynchronous+0x54>
    255e:	82 c0       	rjmp	.+260    	; 0x2664 <TIM_voidMakeActionAsynchronous+0x158>
    2560:	2a 89       	ldd	r18, Y+18	; 0x12
    2562:	3b 89       	ldd	r19, Y+19	; 0x13
    2564:	22 30       	cpi	r18, 0x02	; 2
    2566:	31 05       	cpc	r19, r1
    2568:	09 f4       	brne	.+2      	; 0x256c <TIM_voidMakeActionAsynchronous+0x60>
    256a:	fe c0       	rjmp	.+508    	; 0x2768 <TIM_voidMakeActionAsynchronous+0x25c>
    256c:	8a 89       	ldd	r24, Y+18	; 0x12
    256e:	9b 89       	ldd	r25, Y+19	; 0x13
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	09 f0       	breq	.+2      	; 0x2576 <TIM_voidMakeActionAsynchronous+0x6a>
    2574:	6f c1       	rjmp	.+734    	; 0x2854 <TIM_voidMakeActionAsynchronous+0x348>
			case (TIM0):
				OverFlowTime=TickTime*TIM0_OVERFLOW_COUNTS;
    2576:	8f 81       	ldd	r24, Y+7	; 0x07
    2578:	98 85       	ldd	r25, Y+8	; 0x08
    257a:	a9 85       	ldd	r26, Y+9	; 0x09
    257c:	ba 85       	ldd	r27, Y+10	; 0x0a
    257e:	ba 2f       	mov	r27, r26
    2580:	a9 2f       	mov	r26, r25
    2582:	98 2f       	mov	r25, r24
    2584:	88 27       	eor	r24, r24
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	9a 83       	std	Y+2, r25	; 0x02
    258a:	ab 83       	std	Y+3, r26	; 0x03
    258c:	bc 83       	std	Y+4, r27	; 0x04
				TIM0_OverFlowTimes=(copy_Delay_ms*1000)/OverFlowTime;
    258e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2590:	9d 85       	ldd	r25, Y+13	; 0x0d
    2592:	ae 85       	ldd	r26, Y+14	; 0x0e
    2594:	bf 85       	ldd	r27, Y+15	; 0x0f
    2596:	28 ee       	ldi	r18, 0xE8	; 232
    2598:	33 e0       	ldi	r19, 0x03	; 3
    259a:	40 e0       	ldi	r20, 0x00	; 0
    259c:	50 e0       	ldi	r21, 0x00	; 0
    259e:	bc 01       	movw	r22, r24
    25a0:	cd 01       	movw	r24, r26
    25a2:	0e 94 12 36 	call	0x6c24	; 0x6c24 <__mulsi3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	29 81       	ldd	r18, Y+1	; 0x01
    25ac:	3a 81       	ldd	r19, Y+2	; 0x02
    25ae:	4b 81       	ldd	r20, Y+3	; 0x03
    25b0:	5c 81       	ldd	r21, Y+4	; 0x04
    25b2:	bc 01       	movw	r22, r24
    25b4:	cd 01       	movw	r24, r26
    25b6:	0e 94 31 36 	call	0x6c62	; 0x6c62 <__udivmodsi4>
    25ba:	da 01       	movw	r26, r20
    25bc:	c9 01       	movw	r24, r18
    25be:	80 93 4c 02 	sts	0x024C, r24
    25c2:	90 93 4d 02 	sts	0x024D, r25
    25c6:	a0 93 4e 02 	sts	0x024E, r26
    25ca:	b0 93 4f 02 	sts	0x024F, r27
				Drisredcounts=(copy_Delay_ms*1000)%OverFlowTime;
    25ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    25d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    25d2:	ae 85       	ldd	r26, Y+14	; 0x0e
    25d4:	bf 85       	ldd	r27, Y+15	; 0x0f
    25d6:	28 ee       	ldi	r18, 0xE8	; 232
    25d8:	33 e0       	ldi	r19, 0x03	; 3
    25da:	40 e0       	ldi	r20, 0x00	; 0
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    25de:	bc 01       	movw	r22, r24
    25e0:	cd 01       	movw	r24, r26
    25e2:	0e 94 12 36 	call	0x6c24	; 0x6c24 <__mulsi3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	29 81       	ldd	r18, Y+1	; 0x01
    25ec:	3a 81       	ldd	r19, Y+2	; 0x02
    25ee:	4b 81       	ldd	r20, Y+3	; 0x03
    25f0:	5c 81       	ldd	r21, Y+4	; 0x04
    25f2:	bc 01       	movw	r22, r24
    25f4:	cd 01       	movw	r24, r26
    25f6:	0e 94 31 36 	call	0x6c62	; 0x6c62 <__udivmodsi4>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	9e 83       	std	Y+6, r25	; 0x06
    2600:	8d 83       	std	Y+5, r24	; 0x05
				TIM0_PreLoadCunts=TIM0_OVERFLOW_COUNTS-(Drisredcounts/TickTime);
    2602:	8d 81       	ldd	r24, Y+5	; 0x05
    2604:	9e 81       	ldd	r25, Y+6	; 0x06
    2606:	cc 01       	movw	r24, r24
    2608:	a0 e0       	ldi	r26, 0x00	; 0
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	2f 81       	ldd	r18, Y+7	; 0x07
    260e:	38 85       	ldd	r19, Y+8	; 0x08
    2610:	49 85       	ldd	r20, Y+9	; 0x09
    2612:	5a 85       	ldd	r21, Y+10	; 0x0a
    2614:	bc 01       	movw	r22, r24
    2616:	cd 01       	movw	r24, r26
    2618:	0e 94 31 36 	call	0x6c62	; 0x6c62 <__udivmodsi4>
    261c:	da 01       	movw	r26, r20
    261e:	c9 01       	movw	r24, r18
    2620:	81 95       	neg	r24
    2622:	80 93 48 02 	sts	0x0248, r24
				TIM_voidIni(TIM0);
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	0e 94 ab 0b 	call	0x1756	; 0x1756 <TIM_voidIni>
				TIM_voidSetCountRegister(TIM0,TIM0_PreLoadCunts);
    262c:	80 91 48 02 	lds	r24, 0x0248
    2630:	28 2f       	mov	r18, r24
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	b9 01       	movw	r22, r18
    2638:	0e 94 51 12 	call	0x24a2	; 0x24a2 <TIM_voidSetCountRegister>
				TIM_voidEnableIntterput(TOI0);
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	0e 94 14 10 	call	0x2028	; 0x2028 <TIM_voidEnableIntterput>
				TIM0_ActionAsynchronou_ptr=pf;
    2642:	88 89       	ldd	r24, Y+16	; 0x10
    2644:	99 89       	ldd	r25, Y+17	; 0x11
    2646:	90 93 43 02 	sts	0x0243, r25
    264a:	80 93 42 02 	sts	0x0242, r24
				TIM_voidGetISR(TOI0,TIM0_ActionAsynchronou);
    264e:	25 ee       	ldi	r18, 0xE5	; 229
    2650:	34 e1       	ldi	r19, 0x14	; 20
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	b9 01       	movw	r22, r18
    2656:	0e 94 42 11 	call	0x2284	; 0x2284 <TIM_voidGetISR>
				TIM_voidStart(TIM0,TIMS_DIVISION_1024);
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	67 e0       	ldi	r22, 0x07	; 7
    265e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <TIM_voidStart>
    2662:	f8 c0       	rjmp	.+496    	; 0x2854 <TIM_voidMakeActionAsynchronous+0x348>
				break;
			case (TIM1):
				TickTime=8/TIM_CPU_F;
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	a0 e0       	ldi	r26, 0x00	; 0
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	8f 83       	std	Y+7, r24	; 0x07
    266e:	98 87       	std	Y+8, r25	; 0x08
    2670:	a9 87       	std	Y+9, r26	; 0x09
    2672:	ba 87       	std	Y+10, r27	; 0x0a
				OverFlowTime=TickTime*TIM1_OVERFLOW_COUNTS;
    2674:	8f 81       	ldd	r24, Y+7	; 0x07
    2676:	98 85       	ldd	r25, Y+8	; 0x08
    2678:	a9 85       	ldd	r26, Y+9	; 0x09
    267a:	ba 85       	ldd	r27, Y+10	; 0x0a
    267c:	dc 01       	movw	r26, r24
    267e:	99 27       	eor	r25, r25
    2680:	88 27       	eor	r24, r24
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	9a 83       	std	Y+2, r25	; 0x02
    2686:	ab 83       	std	Y+3, r26	; 0x03
    2688:	bc 83       	std	Y+4, r27	; 0x04
				TIM1_OverFlowTimes=(copy_Delay_ms*1000)/OverFlowTime;
    268a:	8c 85       	ldd	r24, Y+12	; 0x0c
    268c:	9d 85       	ldd	r25, Y+13	; 0x0d
    268e:	ae 85       	ldd	r26, Y+14	; 0x0e
    2690:	bf 85       	ldd	r27, Y+15	; 0x0f
    2692:	28 ee       	ldi	r18, 0xE8	; 232
    2694:	33 e0       	ldi	r19, 0x03	; 3
    2696:	40 e0       	ldi	r20, 0x00	; 0
    2698:	50 e0       	ldi	r21, 0x00	; 0
    269a:	bc 01       	movw	r22, r24
    269c:	cd 01       	movw	r24, r26
    269e:	0e 94 12 36 	call	0x6c24	; 0x6c24 <__mulsi3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	29 81       	ldd	r18, Y+1	; 0x01
    26a8:	3a 81       	ldd	r19, Y+2	; 0x02
    26aa:	4b 81       	ldd	r20, Y+3	; 0x03
    26ac:	5c 81       	ldd	r21, Y+4	; 0x04
    26ae:	bc 01       	movw	r22, r24
    26b0:	cd 01       	movw	r24, r26
    26b2:	0e 94 31 36 	call	0x6c62	; 0x6c62 <__udivmodsi4>
    26b6:	da 01       	movw	r26, r20
    26b8:	c9 01       	movw	r24, r18
    26ba:	80 93 50 02 	sts	0x0250, r24
    26be:	90 93 51 02 	sts	0x0251, r25
    26c2:	a0 93 52 02 	sts	0x0252, r26
    26c6:	b0 93 53 02 	sts	0x0253, r27
				Drisredcounts=(copy_Delay_ms*1000)%OverFlowTime;
    26ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    26cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    26ce:	ae 85       	ldd	r26, Y+14	; 0x0e
    26d0:	bf 85       	ldd	r27, Y+15	; 0x0f
    26d2:	28 ee       	ldi	r18, 0xE8	; 232
    26d4:	33 e0       	ldi	r19, 0x03	; 3
    26d6:	40 e0       	ldi	r20, 0x00	; 0
    26d8:	50 e0       	ldi	r21, 0x00	; 0
    26da:	bc 01       	movw	r22, r24
    26dc:	cd 01       	movw	r24, r26
    26de:	0e 94 12 36 	call	0x6c24	; 0x6c24 <__mulsi3>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	29 81       	ldd	r18, Y+1	; 0x01
    26e8:	3a 81       	ldd	r19, Y+2	; 0x02
    26ea:	4b 81       	ldd	r20, Y+3	; 0x03
    26ec:	5c 81       	ldd	r21, Y+4	; 0x04
    26ee:	bc 01       	movw	r22, r24
    26f0:	cd 01       	movw	r24, r26
    26f2:	0e 94 31 36 	call	0x6c62	; 0x6c62 <__udivmodsi4>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	9e 83       	std	Y+6, r25	; 0x06
    26fc:	8d 83       	std	Y+5, r24	; 0x05
				TIM1_PreLoadCunts=TIM1_OVERFLOW_COUNTS-(Drisredcounts/TickTime);
    26fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2700:	9e 81       	ldd	r25, Y+6	; 0x06
    2702:	cc 01       	movw	r24, r24
    2704:	a0 e0       	ldi	r26, 0x00	; 0
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	2f 81       	ldd	r18, Y+7	; 0x07
    270a:	38 85       	ldd	r19, Y+8	; 0x08
    270c:	49 85       	ldd	r20, Y+9	; 0x09
    270e:	5a 85       	ldd	r21, Y+10	; 0x0a
    2710:	bc 01       	movw	r22, r24
    2712:	cd 01       	movw	r24, r26
    2714:	0e 94 31 36 	call	0x6c62	; 0x6c62 <__udivmodsi4>
    2718:	da 01       	movw	r26, r20
    271a:	c9 01       	movw	r24, r18
    271c:	90 95       	com	r25
    271e:	81 95       	neg	r24
    2720:	9f 4f       	sbci	r25, 0xFF	; 255
    2722:	90 93 4a 02 	sts	0x024A, r25
    2726:	80 93 49 02 	sts	0x0249, r24
				TIM_voidIni(TIM1);
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	0e 94 ab 0b 	call	0x1756	; 0x1756 <TIM_voidIni>
				TIM_voidSetCountRegister(TIM1,TIM1_PreLoadCunts);
    2730:	20 91 49 02 	lds	r18, 0x0249
    2734:	30 91 4a 02 	lds	r19, 0x024A
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	b9 01       	movw	r22, r18
    273c:	0e 94 51 12 	call	0x24a2	; 0x24a2 <TIM_voidSetCountRegister>
				TIM_voidEnableIntterput(TOI1);
    2740:	82 e0       	ldi	r24, 0x02	; 2
    2742:	0e 94 14 10 	call	0x2028	; 0x2028 <TIM_voidEnableIntterput>
				TIM1_ActionAsynchronou_ptr=pf;
    2746:	88 89       	ldd	r24, Y+16	; 0x10
    2748:	99 89       	ldd	r25, Y+17	; 0x11
    274a:	90 93 45 02 	sts	0x0245, r25
    274e:	80 93 44 02 	sts	0x0244, r24
				TIM_voidGetISR(TOI1,TIM1_ActionAsynchronou);
    2752:	26 e3       	ldi	r18, 0x36	; 54
    2754:	35 e1       	ldi	r19, 0x15	; 21
    2756:	82 e0       	ldi	r24, 0x02	; 2
    2758:	b9 01       	movw	r22, r18
    275a:	0e 94 42 11 	call	0x2284	; 0x2284 <TIM_voidGetISR>
				TIM_voidStart(TIM1,TIMS_DIVISION_8);
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	62 e0       	ldi	r22, 0x02	; 2
    2762:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <TIM_voidStart>
    2766:	76 c0       	rjmp	.+236    	; 0x2854 <TIM_voidMakeActionAsynchronous+0x348>
				break;
			case (TIM2):
				OverFlowTime=TickTime*TIM2_OVERFLOW_COUNTS;
    2768:	8f 81       	ldd	r24, Y+7	; 0x07
    276a:	98 85       	ldd	r25, Y+8	; 0x08
    276c:	a9 85       	ldd	r26, Y+9	; 0x09
    276e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2770:	ba 2f       	mov	r27, r26
    2772:	a9 2f       	mov	r26, r25
    2774:	98 2f       	mov	r25, r24
    2776:	88 27       	eor	r24, r24
    2778:	89 83       	std	Y+1, r24	; 0x01
    277a:	9a 83       	std	Y+2, r25	; 0x02
    277c:	ab 83       	std	Y+3, r26	; 0x03
    277e:	bc 83       	std	Y+4, r27	; 0x04
				TIM2_OverFlowTimes=(copy_Delay_ms*1000)/OverFlowTime;
    2780:	8c 85       	ldd	r24, Y+12	; 0x0c
    2782:	9d 85       	ldd	r25, Y+13	; 0x0d
    2784:	ae 85       	ldd	r26, Y+14	; 0x0e
    2786:	bf 85       	ldd	r27, Y+15	; 0x0f
    2788:	28 ee       	ldi	r18, 0xE8	; 232
    278a:	33 e0       	ldi	r19, 0x03	; 3
    278c:	40 e0       	ldi	r20, 0x00	; 0
    278e:	50 e0       	ldi	r21, 0x00	; 0
    2790:	bc 01       	movw	r22, r24
    2792:	cd 01       	movw	r24, r26
    2794:	0e 94 12 36 	call	0x6c24	; 0x6c24 <__mulsi3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	29 81       	ldd	r18, Y+1	; 0x01
    279e:	3a 81       	ldd	r19, Y+2	; 0x02
    27a0:	4b 81       	ldd	r20, Y+3	; 0x03
    27a2:	5c 81       	ldd	r21, Y+4	; 0x04
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 31 36 	call	0x6c62	; 0x6c62 <__udivmodsi4>
    27ac:	da 01       	movw	r26, r20
    27ae:	c9 01       	movw	r24, r18
    27b0:	80 93 54 02 	sts	0x0254, r24
    27b4:	90 93 55 02 	sts	0x0255, r25
    27b8:	a0 93 56 02 	sts	0x0256, r26
    27bc:	b0 93 57 02 	sts	0x0257, r27
				Drisredcounts=(copy_Delay_ms*1000)%OverFlowTime;
    27c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    27c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    27c4:	ae 85       	ldd	r26, Y+14	; 0x0e
    27c6:	bf 85       	ldd	r27, Y+15	; 0x0f
    27c8:	28 ee       	ldi	r18, 0xE8	; 232
    27ca:	33 e0       	ldi	r19, 0x03	; 3
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	50 e0       	ldi	r21, 0x00	; 0
    27d0:	bc 01       	movw	r22, r24
    27d2:	cd 01       	movw	r24, r26
    27d4:	0e 94 12 36 	call	0x6c24	; 0x6c24 <__mulsi3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	29 81       	ldd	r18, Y+1	; 0x01
    27de:	3a 81       	ldd	r19, Y+2	; 0x02
    27e0:	4b 81       	ldd	r20, Y+3	; 0x03
    27e2:	5c 81       	ldd	r21, Y+4	; 0x04
    27e4:	bc 01       	movw	r22, r24
    27e6:	cd 01       	movw	r24, r26
    27e8:	0e 94 31 36 	call	0x6c62	; 0x6c62 <__udivmodsi4>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	9e 83       	std	Y+6, r25	; 0x06
    27f2:	8d 83       	std	Y+5, r24	; 0x05
				TIM2_PreLoadCunts=TIM2_OVERFLOW_COUNTS-(Drisredcounts/TickTime);
    27f4:	8d 81       	ldd	r24, Y+5	; 0x05
    27f6:	9e 81       	ldd	r25, Y+6	; 0x06
    27f8:	cc 01       	movw	r24, r24
    27fa:	a0 e0       	ldi	r26, 0x00	; 0
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	2f 81       	ldd	r18, Y+7	; 0x07
    2800:	38 85       	ldd	r19, Y+8	; 0x08
    2802:	49 85       	ldd	r20, Y+9	; 0x09
    2804:	5a 85       	ldd	r21, Y+10	; 0x0a
    2806:	bc 01       	movw	r22, r24
    2808:	cd 01       	movw	r24, r26
    280a:	0e 94 31 36 	call	0x6c62	; 0x6c62 <__udivmodsi4>
    280e:	da 01       	movw	r26, r20
    2810:	c9 01       	movw	r24, r18
    2812:	81 95       	neg	r24
    2814:	80 93 4b 02 	sts	0x024B, r24
				TIM_voidIni(TIM2);
    2818:	82 e0       	ldi	r24, 0x02	; 2
    281a:	0e 94 ab 0b 	call	0x1756	; 0x1756 <TIM_voidIni>
				TIM_voidSetCountRegister(TIM2,TIM2_PreLoadCunts);
    281e:	80 91 4b 02 	lds	r24, 0x024B
    2822:	28 2f       	mov	r18, r24
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	82 e0       	ldi	r24, 0x02	; 2
    2828:	b9 01       	movw	r22, r18
    282a:	0e 94 51 12 	call	0x24a2	; 0x24a2 <TIM_voidSetCountRegister>
				TIM_voidEnableIntterput(TOI2);
    282e:	86 e0       	ldi	r24, 0x06	; 6
    2830:	0e 94 14 10 	call	0x2028	; 0x2028 <TIM_voidEnableIntterput>
				TIM2_ActionAsynchronou_ptr=pf;
    2834:	88 89       	ldd	r24, Y+16	; 0x10
    2836:	99 89       	ldd	r25, Y+17	; 0x11
    2838:	90 93 47 02 	sts	0x0247, r25
    283c:	80 93 46 02 	sts	0x0246, r24
				TIM_voidGetISR(TOI2,TIM2_ActionAsynchronou);
    2840:	27 e8       	ldi	r18, 0x87	; 135
    2842:	35 e1       	ldi	r19, 0x15	; 21
    2844:	86 e0       	ldi	r24, 0x06	; 6
    2846:	b9 01       	movw	r22, r18
    2848:	0e 94 42 11 	call	0x2284	; 0x2284 <TIM_voidGetISR>
				TIM_voidStart(TIM2,TIMS_DIVISION_1024);
    284c:	82 e0       	ldi	r24, 0x02	; 2
    284e:	67 e0       	ldi	r22, 0x07	; 7
    2850:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <TIM_voidStart>
				break;
			default:
				break;

			}
}
    2854:	63 96       	adiw	r28, 0x13	; 19
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	08 95       	ret

00002866 <TIM_voidSetPWMDC>:
void TIM_voidSetPWMDC(TIMS_COMPERMATCH_T copy_TIMS_COMPERMATCH_T,f32 copy_DC){
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	27 97       	sbiw	r28, 0x07	; 7
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	89 83       	std	Y+1, r24	; 0x01
    287c:	4a 83       	std	Y+2, r20	; 0x02
    287e:	5b 83       	std	Y+3, r21	; 0x03
    2880:	6c 83       	std	Y+4, r22	; 0x04
    2882:	7d 83       	std	Y+5, r23	; 0x05

	switch(copy_TIMS_COMPERMATCH_T){
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	28 2f       	mov	r18, r24
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	3f 83       	std	Y+7, r19	; 0x07
    288c:	2e 83       	std	Y+6, r18	; 0x06
    288e:	8e 81       	ldd	r24, Y+6	; 0x06
    2890:	9f 81       	ldd	r25, Y+7	; 0x07
    2892:	81 30       	cpi	r24, 0x01	; 1
    2894:	91 05       	cpc	r25, r1
    2896:	09 f4       	brne	.+2      	; 0x289a <TIM_voidSetPWMDC+0x34>
    2898:	8f c0       	rjmp	.+286    	; 0x29b8 <TIM_voidSetPWMDC+0x152>
    289a:	2e 81       	ldd	r18, Y+6	; 0x06
    289c:	3f 81       	ldd	r19, Y+7	; 0x07
    289e:	22 30       	cpi	r18, 0x02	; 2
    28a0:	31 05       	cpc	r19, r1
    28a2:	2c f4       	brge	.+10     	; 0x28ae <TIM_voidSetPWMDC+0x48>
    28a4:	8e 81       	ldd	r24, Y+6	; 0x06
    28a6:	9f 81       	ldd	r25, Y+7	; 0x07
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	69 f0       	breq	.+26     	; 0x28c6 <TIM_voidSetPWMDC+0x60>
    28ac:	85 c0       	rjmp	.+266    	; 0x29b8 <TIM_voidSetPWMDC+0x152>
    28ae:	2e 81       	ldd	r18, Y+6	; 0x06
    28b0:	3f 81       	ldd	r19, Y+7	; 0x07
    28b2:	22 30       	cpi	r18, 0x02	; 2
    28b4:	31 05       	cpc	r19, r1
    28b6:	99 f1       	breq	.+102    	; 0x291e <TIM_voidSetPWMDC+0xb8>
    28b8:	8e 81       	ldd	r24, Y+6	; 0x06
    28ba:	9f 81       	ldd	r25, Y+7	; 0x07
    28bc:	83 30       	cpi	r24, 0x03	; 3
    28be:	91 05       	cpc	r25, r1
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <TIM_voidSetPWMDC+0x5e>
    28c2:	4f c0       	rjmp	.+158    	; 0x2962 <TIM_voidSetPWMDC+0xfc>
    28c4:	79 c0       	rjmp	.+242    	; 0x29b8 <TIM_voidSetPWMDC+0x152>
			case (OC0):
			#if((OC0_MODE==OC_CLEAR_COMPARE_SET_ON_BOTTOM)||(OC0_MODE==OC_CLEAR_UP_SET_DOWN))
				TIM_voidSetComperMatch(OC0,((copy_DC*TIM0_OVERFLOW_COUNTS)/100));
			#elif((OC0_MODE==OC_SET_COMPARE_CLEAR_ON_BOTTOM)||(OC0_MODE==OC_SET_UP_CLEAR_DOWN))
				TIM_voidSetComperMatch(OC0,(TIM0_OVERFLOW_COUNTS-((copy_DC*TIM0_OVERFLOW_COUNTS)/100)));
    28c6:	6a 81       	ldd	r22, Y+2	; 0x02
    28c8:	7b 81       	ldd	r23, Y+3	; 0x03
    28ca:	8c 81       	ldd	r24, Y+4	; 0x04
    28cc:	9d 81       	ldd	r25, Y+5	; 0x05
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	40 e8       	ldi	r20, 0x80	; 128
    28d4:	53 e4       	ldi	r21, 0x43	; 67
    28d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	bc 01       	movw	r22, r24
    28e0:	cd 01       	movw	r24, r26
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	48 ec       	ldi	r20, 0xC8	; 200
    28e8:	52 ec       	ldi	r21, 0xC2	; 194
    28ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	bc 01       	movw	r22, r24
    28f4:	cd 01       	movw	r24, r26
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e8       	ldi	r20, 0x80	; 128
    28fc:	53 e4       	ldi	r21, 0x43	; 67
    28fe:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	bc 01       	movw	r22, r24
    2908:	cd 01       	movw	r24, r26
    290a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	9c 01       	movw	r18, r24
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	b9 01       	movw	r22, r18
    2918:	0e 94 fd 11 	call	0x23fa	; 0x23fa <TIM_voidSetComperMatch>
    291c:	4d c0       	rjmp	.+154    	; 0x29b8 <TIM_voidSetPWMDC+0x152>
			#endif
				break;
			case (OC1A):
			#if((OC1A_MODE==OC_CLEAR_COMPARE_SET_ON_BOTTOM)||(OC1A_MODE==OC_CLEAR_UP_SET_DOWN))
				TIM_voidSetComperMatch(OC1A,((copy_DC*TIMS_TOP_TIM1)/100));
    291e:	6a 81       	ldd	r22, Y+2	; 0x02
    2920:	7b 81       	ldd	r23, Y+3	; 0x03
    2922:	8c 81       	ldd	r24, Y+4	; 0x04
    2924:	9d 81       	ldd	r25, Y+5	; 0x05
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e4       	ldi	r19, 0x40	; 64
    292a:	4c e9       	ldi	r20, 0x9C	; 156
    292c:	56 e4       	ldi	r21, 0x46	; 70
    292e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	bc 01       	movw	r22, r24
    2938:	cd 01       	movw	r24, r26
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	48 ec       	ldi	r20, 0xC8	; 200
    2940:	52 e4       	ldi	r21, 0x42	; 66
    2942:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	bc 01       	movw	r22, r24
    294c:	cd 01       	movw	r24, r26
    294e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	9c 01       	movw	r18, r24
    2958:	82 e0       	ldi	r24, 0x02	; 2
    295a:	b9 01       	movw	r22, r18
    295c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <TIM_voidSetComperMatch>
    2960:	2b c0       	rjmp	.+86     	; 0x29b8 <TIM_voidSetPWMDC+0x152>
				break;
			case (OC2):
			#if((OC2_MODE==OC_CLEAR_COMPARE_SET_ON_BOTTOM)||(OC2_MODE==OC_CLEAR_UP_SET_DOWN))
				TIM_voidSetComperMatch(OC2,((copy_DC*TIM2_OVERFLOW_COUNTS)/100));
			#elif((OC2_MODE==OC_SET_COMPARE_CLEAR_ON_BOTTOM)||(OC2_MODE==OC_SET_UP_CLEAR_DOWN))
				TIM_voidSetComperMatch(OC2,(TIM2_OVERFLOW_COUNTS-((copy_DC*TIM2_OVERFLOW_COUNTS)/100)));
    2962:	6a 81       	ldd	r22, Y+2	; 0x02
    2964:	7b 81       	ldd	r23, Y+3	; 0x03
    2966:	8c 81       	ldd	r24, Y+4	; 0x04
    2968:	9d 81       	ldd	r25, Y+5	; 0x05
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e8       	ldi	r20, 0x80	; 128
    2970:	53 e4       	ldi	r21, 0x43	; 67
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	bc 01       	movw	r22, r24
    297c:	cd 01       	movw	r24, r26
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	48 ec       	ldi	r20, 0xC8	; 200
    2984:	52 ec       	ldi	r21, 0xC2	; 194
    2986:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e8       	ldi	r20, 0x80	; 128
    2998:	53 e4       	ldi	r21, 0x43	; 67
    299a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	bc 01       	movw	r22, r24
    29a4:	cd 01       	movw	r24, r26
    29a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	9c 01       	movw	r18, r24
    29b0:	83 e0       	ldi	r24, 0x03	; 3
    29b2:	b9 01       	movw	r22, r18
    29b4:	0e 94 fd 11 	call	0x23fa	; 0x23fa <TIM_voidSetComperMatch>
			default:
				break;

			}

}
    29b8:	27 96       	adiw	r28, 0x07	; 7
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	de bf       	out	0x3e, r29	; 62
    29c0:	0f be       	out	0x3f, r0	; 63
    29c2:	cd bf       	out	0x3d, r28	; 61
    29c4:	cf 91       	pop	r28
    29c6:	df 91       	pop	r29
    29c8:	08 95       	ret

000029ca <TIM0_ActionAsynchronou>:
static void TIM0_ActionAsynchronou(void){
    29ca:	df 93       	push	r29
    29cc:	cf 93       	push	r28
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
	u32 static counter=0;
	if (counter==TIM0_OverFlowTimes+1){
    29d2:	80 91 4c 02 	lds	r24, 0x024C
    29d6:	90 91 4d 02 	lds	r25, 0x024D
    29da:	a0 91 4e 02 	lds	r26, 0x024E
    29de:	b0 91 4f 02 	lds	r27, 0x024F
    29e2:	9c 01       	movw	r18, r24
    29e4:	ad 01       	movw	r20, r26
    29e6:	2f 5f       	subi	r18, 0xFF	; 255
    29e8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ea:	4f 4f       	sbci	r20, 0xFF	; 255
    29ec:	5f 4f       	sbci	r21, 0xFF	; 255
    29ee:	80 91 58 02 	lds	r24, 0x0258
    29f2:	90 91 59 02 	lds	r25, 0x0259
    29f6:	a0 91 5a 02 	lds	r26, 0x025A
    29fa:	b0 91 5b 02 	lds	r27, 0x025B
    29fe:	28 17       	cp	r18, r24
    2a00:	39 07       	cpc	r19, r25
    2a02:	4a 07       	cpc	r20, r26
    2a04:	5b 07       	cpc	r21, r27
    2a06:	e1 f4       	brne	.+56     	; 0x2a40 <TIM0_ActionAsynchronou+0x76>
		if(TIM0_ActionAsynchronou_ptr!=NULL){
    2a08:	80 91 42 02 	lds	r24, 0x0242
    2a0c:	90 91 43 02 	lds	r25, 0x0243
    2a10:	00 97       	sbiw	r24, 0x00	; 0
    2a12:	69 f0       	breq	.+26     	; 0x2a2e <TIM0_ActionAsynchronou+0x64>
			TIM_voidSetCountRegister(TIM0,TIM0_PreLoadCunts);
    2a14:	80 91 48 02 	lds	r24, 0x0248
    2a18:	28 2f       	mov	r18, r24
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	b9 01       	movw	r22, r18
    2a20:	0e 94 51 12 	call	0x24a2	; 0x24a2 <TIM_voidSetCountRegister>
			TIM0_ActionAsynchronou_ptr();
    2a24:	e0 91 42 02 	lds	r30, 0x0242
    2a28:	f0 91 43 02 	lds	r31, 0x0243
    2a2c:	09 95       	icall
		}
		counter=0;
    2a2e:	10 92 58 02 	sts	0x0258, r1
    2a32:	10 92 59 02 	sts	0x0259, r1
    2a36:	10 92 5a 02 	sts	0x025A, r1
    2a3a:	10 92 5b 02 	sts	0x025B, r1
    2a3e:	13 c0       	rjmp	.+38     	; 0x2a66 <TIM0_ActionAsynchronou+0x9c>
	}
	else{
	counter++;
    2a40:	80 91 58 02 	lds	r24, 0x0258
    2a44:	90 91 59 02 	lds	r25, 0x0259
    2a48:	a0 91 5a 02 	lds	r26, 0x025A
    2a4c:	b0 91 5b 02 	lds	r27, 0x025B
    2a50:	01 96       	adiw	r24, 0x01	; 1
    2a52:	a1 1d       	adc	r26, r1
    2a54:	b1 1d       	adc	r27, r1
    2a56:	80 93 58 02 	sts	0x0258, r24
    2a5a:	90 93 59 02 	sts	0x0259, r25
    2a5e:	a0 93 5a 02 	sts	0x025A, r26
    2a62:	b0 93 5b 02 	sts	0x025B, r27
	}
}
    2a66:	cf 91       	pop	r28
    2a68:	df 91       	pop	r29
    2a6a:	08 95       	ret

00002a6c <TIM1_ActionAsynchronou>:
static void TIM1_ActionAsynchronou(void){
    2a6c:	df 93       	push	r29
    2a6e:	cf 93       	push	r28
    2a70:	cd b7       	in	r28, 0x3d	; 61
    2a72:	de b7       	in	r29, 0x3e	; 62
	u32 static counter=0;
	if (counter==TIM1_OverFlowTimes+1){
    2a74:	80 91 50 02 	lds	r24, 0x0250
    2a78:	90 91 51 02 	lds	r25, 0x0251
    2a7c:	a0 91 52 02 	lds	r26, 0x0252
    2a80:	b0 91 53 02 	lds	r27, 0x0253
    2a84:	9c 01       	movw	r18, r24
    2a86:	ad 01       	movw	r20, r26
    2a88:	2f 5f       	subi	r18, 0xFF	; 255
    2a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8c:	4f 4f       	sbci	r20, 0xFF	; 255
    2a8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a90:	80 91 5c 02 	lds	r24, 0x025C
    2a94:	90 91 5d 02 	lds	r25, 0x025D
    2a98:	a0 91 5e 02 	lds	r26, 0x025E
    2a9c:	b0 91 5f 02 	lds	r27, 0x025F
    2aa0:	28 17       	cp	r18, r24
    2aa2:	39 07       	cpc	r19, r25
    2aa4:	4a 07       	cpc	r20, r26
    2aa6:	5b 07       	cpc	r21, r27
    2aa8:	e1 f4       	brne	.+56     	; 0x2ae2 <TIM1_ActionAsynchronou+0x76>
		if(TIM1_ActionAsynchronou_ptr!=NULL){
    2aaa:	80 91 44 02 	lds	r24, 0x0244
    2aae:	90 91 45 02 	lds	r25, 0x0245
    2ab2:	00 97       	sbiw	r24, 0x00	; 0
    2ab4:	69 f0       	breq	.+26     	; 0x2ad0 <TIM1_ActionAsynchronou+0x64>
			TIM_voidSetCountRegister(TIM1,TIM1_PreLoadCunts);
    2ab6:	20 91 49 02 	lds	r18, 0x0249
    2aba:	30 91 4a 02 	lds	r19, 0x024A
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	b9 01       	movw	r22, r18
    2ac2:	0e 94 51 12 	call	0x24a2	; 0x24a2 <TIM_voidSetCountRegister>
			TIM1_ActionAsynchronou_ptr();
    2ac6:	e0 91 44 02 	lds	r30, 0x0244
    2aca:	f0 91 45 02 	lds	r31, 0x0245
    2ace:	09 95       	icall

		}
		counter=0;
    2ad0:	10 92 5c 02 	sts	0x025C, r1
    2ad4:	10 92 5d 02 	sts	0x025D, r1
    2ad8:	10 92 5e 02 	sts	0x025E, r1
    2adc:	10 92 5f 02 	sts	0x025F, r1
    2ae0:	13 c0       	rjmp	.+38     	; 0x2b08 <TIM1_ActionAsynchronou+0x9c>
	}
	else{
		counter++;
    2ae2:	80 91 5c 02 	lds	r24, 0x025C
    2ae6:	90 91 5d 02 	lds	r25, 0x025D
    2aea:	a0 91 5e 02 	lds	r26, 0x025E
    2aee:	b0 91 5f 02 	lds	r27, 0x025F
    2af2:	01 96       	adiw	r24, 0x01	; 1
    2af4:	a1 1d       	adc	r26, r1
    2af6:	b1 1d       	adc	r27, r1
    2af8:	80 93 5c 02 	sts	0x025C, r24
    2afc:	90 93 5d 02 	sts	0x025D, r25
    2b00:	a0 93 5e 02 	sts	0x025E, r26
    2b04:	b0 93 5f 02 	sts	0x025F, r27
		}
}
    2b08:	cf 91       	pop	r28
    2b0a:	df 91       	pop	r29
    2b0c:	08 95       	ret

00002b0e <TIM2_ActionAsynchronou>:
static void TIM2_ActionAsynchronou(void){
    2b0e:	df 93       	push	r29
    2b10:	cf 93       	push	r28
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
	u32 static counter=0;
	if (counter==TIM2_OverFlowTimes+1){
    2b16:	80 91 54 02 	lds	r24, 0x0254
    2b1a:	90 91 55 02 	lds	r25, 0x0255
    2b1e:	a0 91 56 02 	lds	r26, 0x0256
    2b22:	b0 91 57 02 	lds	r27, 0x0257
    2b26:	9c 01       	movw	r18, r24
    2b28:	ad 01       	movw	r20, r26
    2b2a:	2f 5f       	subi	r18, 0xFF	; 255
    2b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2e:	4f 4f       	sbci	r20, 0xFF	; 255
    2b30:	5f 4f       	sbci	r21, 0xFF	; 255
    2b32:	80 91 60 02 	lds	r24, 0x0260
    2b36:	90 91 61 02 	lds	r25, 0x0261
    2b3a:	a0 91 62 02 	lds	r26, 0x0262
    2b3e:	b0 91 63 02 	lds	r27, 0x0263
    2b42:	28 17       	cp	r18, r24
    2b44:	39 07       	cpc	r19, r25
    2b46:	4a 07       	cpc	r20, r26
    2b48:	5b 07       	cpc	r21, r27
    2b4a:	e1 f4       	brne	.+56     	; 0x2b84 <TIM2_ActionAsynchronou+0x76>
		if(TIM2_ActionAsynchronou_ptr!=NULL){
    2b4c:	80 91 46 02 	lds	r24, 0x0246
    2b50:	90 91 47 02 	lds	r25, 0x0247
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	69 f0       	breq	.+26     	; 0x2b72 <TIM2_ActionAsynchronou+0x64>
			TIM_voidSetCountRegister(TIM2,TIM2_PreLoadCunts);
    2b58:	80 91 4b 02 	lds	r24, 0x024B
    2b5c:	28 2f       	mov	r18, r24
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	82 e0       	ldi	r24, 0x02	; 2
    2b62:	b9 01       	movw	r22, r18
    2b64:	0e 94 51 12 	call	0x24a2	; 0x24a2 <TIM_voidSetCountRegister>
			TIM2_ActionAsynchronou_ptr();
    2b68:	e0 91 46 02 	lds	r30, 0x0246
    2b6c:	f0 91 47 02 	lds	r31, 0x0247
    2b70:	09 95       	icall
		}
	counter=0;
    2b72:	10 92 60 02 	sts	0x0260, r1
    2b76:	10 92 61 02 	sts	0x0261, r1
    2b7a:	10 92 62 02 	sts	0x0262, r1
    2b7e:	10 92 63 02 	sts	0x0263, r1
    2b82:	13 c0       	rjmp	.+38     	; 0x2baa <TIM2_ActionAsynchronou+0x9c>
	}
	else{
		counter++;
    2b84:	80 91 60 02 	lds	r24, 0x0260
    2b88:	90 91 61 02 	lds	r25, 0x0261
    2b8c:	a0 91 62 02 	lds	r26, 0x0262
    2b90:	b0 91 63 02 	lds	r27, 0x0263
    2b94:	01 96       	adiw	r24, 0x01	; 1
    2b96:	a1 1d       	adc	r26, r1
    2b98:	b1 1d       	adc	r27, r1
    2b9a:	80 93 60 02 	sts	0x0260, r24
    2b9e:	90 93 61 02 	sts	0x0261, r25
    2ba2:	a0 93 62 02 	sts	0x0262, r26
    2ba6:	b0 93 63 02 	sts	0x0263, r27
		}
}
    2baa:	cf 91       	pop	r28
    2bac:	df 91       	pop	r29
    2bae:	08 95       	ret

00002bb0 <__vector_4>:

void __vector_4(void) __attribute__((signal));
void __vector_4(void){
    2bb0:	1f 92       	push	r1
    2bb2:	0f 92       	push	r0
    2bb4:	0f b6       	in	r0, 0x3f	; 63
    2bb6:	0f 92       	push	r0
    2bb8:	11 24       	eor	r1, r1
    2bba:	2f 93       	push	r18
    2bbc:	3f 93       	push	r19
    2bbe:	4f 93       	push	r20
    2bc0:	5f 93       	push	r21
    2bc2:	6f 93       	push	r22
    2bc4:	7f 93       	push	r23
    2bc6:	8f 93       	push	r24
    2bc8:	9f 93       	push	r25
    2bca:	af 93       	push	r26
    2bcc:	bf 93       	push	r27
    2bce:	ef 93       	push	r30
    2bd0:	ff 93       	push	r31
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
if(TIMER2_COMP_pf!=NULL){
    2bda:	80 91 32 02 	lds	r24, 0x0232
    2bde:	90 91 33 02 	lds	r25, 0x0233
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	29 f0       	breq	.+10     	; 0x2bf0 <__vector_4+0x40>
	TIMER2_COMP_pf();
    2be6:	e0 91 32 02 	lds	r30, 0x0232
    2bea:	f0 91 33 02 	lds	r31, 0x0233
    2bee:	09 95       	icall
}
}
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	ff 91       	pop	r31
    2bf6:	ef 91       	pop	r30
    2bf8:	bf 91       	pop	r27
    2bfa:	af 91       	pop	r26
    2bfc:	9f 91       	pop	r25
    2bfe:	8f 91       	pop	r24
    2c00:	7f 91       	pop	r23
    2c02:	6f 91       	pop	r22
    2c04:	5f 91       	pop	r21
    2c06:	4f 91       	pop	r20
    2c08:	3f 91       	pop	r19
    2c0a:	2f 91       	pop	r18
    2c0c:	0f 90       	pop	r0
    2c0e:	0f be       	out	0x3f, r0	; 63
    2c10:	0f 90       	pop	r0
    2c12:	1f 90       	pop	r1
    2c14:	18 95       	reti

00002c16 <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void){
    2c16:	1f 92       	push	r1
    2c18:	0f 92       	push	r0
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	0f 92       	push	r0
    2c1e:	11 24       	eor	r1, r1
    2c20:	2f 93       	push	r18
    2c22:	3f 93       	push	r19
    2c24:	4f 93       	push	r20
    2c26:	5f 93       	push	r21
    2c28:	6f 93       	push	r22
    2c2a:	7f 93       	push	r23
    2c2c:	8f 93       	push	r24
    2c2e:	9f 93       	push	r25
    2c30:	af 93       	push	r26
    2c32:	bf 93       	push	r27
    2c34:	ef 93       	push	r30
    2c36:	ff 93       	push	r31
    2c38:	df 93       	push	r29
    2c3a:	cf 93       	push	r28
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_OVF_pf!=NULL){
    2c40:	80 91 34 02 	lds	r24, 0x0234
    2c44:	90 91 35 02 	lds	r25, 0x0235
    2c48:	00 97       	sbiw	r24, 0x00	; 0
    2c4a:	29 f0       	breq	.+10     	; 0x2c56 <__vector_5+0x40>
		TIMER2_OVF_pf();
    2c4c:	e0 91 34 02 	lds	r30, 0x0234
    2c50:	f0 91 35 02 	lds	r31, 0x0235
    2c54:	09 95       	icall
	}
}
    2c56:	cf 91       	pop	r28
    2c58:	df 91       	pop	r29
    2c5a:	ff 91       	pop	r31
    2c5c:	ef 91       	pop	r30
    2c5e:	bf 91       	pop	r27
    2c60:	af 91       	pop	r26
    2c62:	9f 91       	pop	r25
    2c64:	8f 91       	pop	r24
    2c66:	7f 91       	pop	r23
    2c68:	6f 91       	pop	r22
    2c6a:	5f 91       	pop	r21
    2c6c:	4f 91       	pop	r20
    2c6e:	3f 91       	pop	r19
    2c70:	2f 91       	pop	r18
    2c72:	0f 90       	pop	r0
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	0f 90       	pop	r0
    2c78:	1f 90       	pop	r1
    2c7a:	18 95       	reti

00002c7c <__vector_6>:
void __vector_6(void) __attribute__((signal));
void __vector_6(void){
    2c7c:	1f 92       	push	r1
    2c7e:	0f 92       	push	r0
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	0f 92       	push	r0
    2c84:	11 24       	eor	r1, r1
    2c86:	2f 93       	push	r18
    2c88:	3f 93       	push	r19
    2c8a:	4f 93       	push	r20
    2c8c:	5f 93       	push	r21
    2c8e:	6f 93       	push	r22
    2c90:	7f 93       	push	r23
    2c92:	8f 93       	push	r24
    2c94:	9f 93       	push	r25
    2c96:	af 93       	push	r26
    2c98:	bf 93       	push	r27
    2c9a:	ef 93       	push	r30
    2c9c:	ff 93       	push	r31
    2c9e:	df 93       	push	r29
    2ca0:	cf 93       	push	r28
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_CAPT_pf!=NULL){
    2ca6:	80 91 36 02 	lds	r24, 0x0236
    2caa:	90 91 37 02 	lds	r25, 0x0237
    2cae:	00 97       	sbiw	r24, 0x00	; 0
    2cb0:	29 f0       	breq	.+10     	; 0x2cbc <__vector_6+0x40>
		TIMER1_CAPT_pf();
    2cb2:	e0 91 36 02 	lds	r30, 0x0236
    2cb6:	f0 91 37 02 	lds	r31, 0x0237
    2cba:	09 95       	icall
	}
}
    2cbc:	cf 91       	pop	r28
    2cbe:	df 91       	pop	r29
    2cc0:	ff 91       	pop	r31
    2cc2:	ef 91       	pop	r30
    2cc4:	bf 91       	pop	r27
    2cc6:	af 91       	pop	r26
    2cc8:	9f 91       	pop	r25
    2cca:	8f 91       	pop	r24
    2ccc:	7f 91       	pop	r23
    2cce:	6f 91       	pop	r22
    2cd0:	5f 91       	pop	r21
    2cd2:	4f 91       	pop	r20
    2cd4:	3f 91       	pop	r19
    2cd6:	2f 91       	pop	r18
    2cd8:	0f 90       	pop	r0
    2cda:	0f be       	out	0x3f, r0	; 63
    2cdc:	0f 90       	pop	r0
    2cde:	1f 90       	pop	r1
    2ce0:	18 95       	reti

00002ce2 <__vector_7>:
void __vector_7(void) __attribute__((signal));
void __vector_7(void){
    2ce2:	1f 92       	push	r1
    2ce4:	0f 92       	push	r0
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	0f 92       	push	r0
    2cea:	11 24       	eor	r1, r1
    2cec:	2f 93       	push	r18
    2cee:	3f 93       	push	r19
    2cf0:	4f 93       	push	r20
    2cf2:	5f 93       	push	r21
    2cf4:	6f 93       	push	r22
    2cf6:	7f 93       	push	r23
    2cf8:	8f 93       	push	r24
    2cfa:	9f 93       	push	r25
    2cfc:	af 93       	push	r26
    2cfe:	bf 93       	push	r27
    2d00:	ef 93       	push	r30
    2d02:	ff 93       	push	r31
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_COMPA_pf!=NULL){
    2d0c:	80 91 38 02 	lds	r24, 0x0238
    2d10:	90 91 39 02 	lds	r25, 0x0239
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	29 f0       	breq	.+10     	; 0x2d22 <__vector_7+0x40>
		TIMER1_COMPA_pf();
    2d18:	e0 91 38 02 	lds	r30, 0x0238
    2d1c:	f0 91 39 02 	lds	r31, 0x0239
    2d20:	09 95       	icall
	}
}
    2d22:	cf 91       	pop	r28
    2d24:	df 91       	pop	r29
    2d26:	ff 91       	pop	r31
    2d28:	ef 91       	pop	r30
    2d2a:	bf 91       	pop	r27
    2d2c:	af 91       	pop	r26
    2d2e:	9f 91       	pop	r25
    2d30:	8f 91       	pop	r24
    2d32:	7f 91       	pop	r23
    2d34:	6f 91       	pop	r22
    2d36:	5f 91       	pop	r21
    2d38:	4f 91       	pop	r20
    2d3a:	3f 91       	pop	r19
    2d3c:	2f 91       	pop	r18
    2d3e:	0f 90       	pop	r0
    2d40:	0f be       	out	0x3f, r0	; 63
    2d42:	0f 90       	pop	r0
    2d44:	1f 90       	pop	r1
    2d46:	18 95       	reti

00002d48 <__vector_8>:
void __vector_8(void) __attribute__((signal));
void __vector_8(void){
    2d48:	1f 92       	push	r1
    2d4a:	0f 92       	push	r0
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	0f 92       	push	r0
    2d50:	11 24       	eor	r1, r1
    2d52:	2f 93       	push	r18
    2d54:	3f 93       	push	r19
    2d56:	4f 93       	push	r20
    2d58:	5f 93       	push	r21
    2d5a:	6f 93       	push	r22
    2d5c:	7f 93       	push	r23
    2d5e:	8f 93       	push	r24
    2d60:	9f 93       	push	r25
    2d62:	af 93       	push	r26
    2d64:	bf 93       	push	r27
    2d66:	ef 93       	push	r30
    2d68:	ff 93       	push	r31
    2d6a:	df 93       	push	r29
    2d6c:	cf 93       	push	r28
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_COMPB_pf!=NULL){
    2d72:	80 91 3a 02 	lds	r24, 0x023A
    2d76:	90 91 3b 02 	lds	r25, 0x023B
    2d7a:	00 97       	sbiw	r24, 0x00	; 0
    2d7c:	29 f0       	breq	.+10     	; 0x2d88 <__vector_8+0x40>
		TIMER1_COMPB_pf();
    2d7e:	e0 91 3a 02 	lds	r30, 0x023A
    2d82:	f0 91 3b 02 	lds	r31, 0x023B
    2d86:	09 95       	icall
	}
}
    2d88:	cf 91       	pop	r28
    2d8a:	df 91       	pop	r29
    2d8c:	ff 91       	pop	r31
    2d8e:	ef 91       	pop	r30
    2d90:	bf 91       	pop	r27
    2d92:	af 91       	pop	r26
    2d94:	9f 91       	pop	r25
    2d96:	8f 91       	pop	r24
    2d98:	7f 91       	pop	r23
    2d9a:	6f 91       	pop	r22
    2d9c:	5f 91       	pop	r21
    2d9e:	4f 91       	pop	r20
    2da0:	3f 91       	pop	r19
    2da2:	2f 91       	pop	r18
    2da4:	0f 90       	pop	r0
    2da6:	0f be       	out	0x3f, r0	; 63
    2da8:	0f 90       	pop	r0
    2daa:	1f 90       	pop	r1
    2dac:	18 95       	reti

00002dae <__vector_9>:
void __vector_9(void) __attribute__((signal));
void __vector_9(void){
    2dae:	1f 92       	push	r1
    2db0:	0f 92       	push	r0
    2db2:	0f b6       	in	r0, 0x3f	; 63
    2db4:	0f 92       	push	r0
    2db6:	11 24       	eor	r1, r1
    2db8:	2f 93       	push	r18
    2dba:	3f 93       	push	r19
    2dbc:	4f 93       	push	r20
    2dbe:	5f 93       	push	r21
    2dc0:	6f 93       	push	r22
    2dc2:	7f 93       	push	r23
    2dc4:	8f 93       	push	r24
    2dc6:	9f 93       	push	r25
    2dc8:	af 93       	push	r26
    2dca:	bf 93       	push	r27
    2dcc:	ef 93       	push	r30
    2dce:	ff 93       	push	r31
    2dd0:	df 93       	push	r29
    2dd2:	cf 93       	push	r28
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_OVF_pf!=NULL){
    2dd8:	80 91 3c 02 	lds	r24, 0x023C
    2ddc:	90 91 3d 02 	lds	r25, 0x023D
    2de0:	00 97       	sbiw	r24, 0x00	; 0
    2de2:	29 f0       	breq	.+10     	; 0x2dee <__vector_9+0x40>
		TIMER1_OVF_pf();
    2de4:	e0 91 3c 02 	lds	r30, 0x023C
    2de8:	f0 91 3d 02 	lds	r31, 0x023D
    2dec:	09 95       	icall
	}
}
    2dee:	cf 91       	pop	r28
    2df0:	df 91       	pop	r29
    2df2:	ff 91       	pop	r31
    2df4:	ef 91       	pop	r30
    2df6:	bf 91       	pop	r27
    2df8:	af 91       	pop	r26
    2dfa:	9f 91       	pop	r25
    2dfc:	8f 91       	pop	r24
    2dfe:	7f 91       	pop	r23
    2e00:	6f 91       	pop	r22
    2e02:	5f 91       	pop	r21
    2e04:	4f 91       	pop	r20
    2e06:	3f 91       	pop	r19
    2e08:	2f 91       	pop	r18
    2e0a:	0f 90       	pop	r0
    2e0c:	0f be       	out	0x3f, r0	; 63
    2e0e:	0f 90       	pop	r0
    2e10:	1f 90       	pop	r1
    2e12:	18 95       	reti

00002e14 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void){
    2e14:	1f 92       	push	r1
    2e16:	0f 92       	push	r0
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	0f 92       	push	r0
    2e1c:	11 24       	eor	r1, r1
    2e1e:	2f 93       	push	r18
    2e20:	3f 93       	push	r19
    2e22:	4f 93       	push	r20
    2e24:	5f 93       	push	r21
    2e26:	6f 93       	push	r22
    2e28:	7f 93       	push	r23
    2e2a:	8f 93       	push	r24
    2e2c:	9f 93       	push	r25
    2e2e:	af 93       	push	r26
    2e30:	bf 93       	push	r27
    2e32:	ef 93       	push	r30
    2e34:	ff 93       	push	r31
    2e36:	df 93       	push	r29
    2e38:	cf 93       	push	r28
    2e3a:	cd b7       	in	r28, 0x3d	; 61
    2e3c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_COMP_pf!=NULL){
    2e3e:	80 91 3e 02 	lds	r24, 0x023E
    2e42:	90 91 3f 02 	lds	r25, 0x023F
    2e46:	00 97       	sbiw	r24, 0x00	; 0
    2e48:	29 f0       	breq	.+10     	; 0x2e54 <__vector_10+0x40>
		TIMER0_COMP_pf();
    2e4a:	e0 91 3e 02 	lds	r30, 0x023E
    2e4e:	f0 91 3f 02 	lds	r31, 0x023F
    2e52:	09 95       	icall
	}
}
    2e54:	cf 91       	pop	r28
    2e56:	df 91       	pop	r29
    2e58:	ff 91       	pop	r31
    2e5a:	ef 91       	pop	r30
    2e5c:	bf 91       	pop	r27
    2e5e:	af 91       	pop	r26
    2e60:	9f 91       	pop	r25
    2e62:	8f 91       	pop	r24
    2e64:	7f 91       	pop	r23
    2e66:	6f 91       	pop	r22
    2e68:	5f 91       	pop	r21
    2e6a:	4f 91       	pop	r20
    2e6c:	3f 91       	pop	r19
    2e6e:	2f 91       	pop	r18
    2e70:	0f 90       	pop	r0
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	0f 90       	pop	r0
    2e76:	1f 90       	pop	r1
    2e78:	18 95       	reti

00002e7a <__vector_11>:
void __vector_11(void) __attribute__((signal));
void __vector_11(void){
    2e7a:	1f 92       	push	r1
    2e7c:	0f 92       	push	r0
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	0f 92       	push	r0
    2e82:	11 24       	eor	r1, r1
    2e84:	2f 93       	push	r18
    2e86:	3f 93       	push	r19
    2e88:	4f 93       	push	r20
    2e8a:	5f 93       	push	r21
    2e8c:	6f 93       	push	r22
    2e8e:	7f 93       	push	r23
    2e90:	8f 93       	push	r24
    2e92:	9f 93       	push	r25
    2e94:	af 93       	push	r26
    2e96:	bf 93       	push	r27
    2e98:	ef 93       	push	r30
    2e9a:	ff 93       	push	r31
    2e9c:	df 93       	push	r29
    2e9e:	cf 93       	push	r28
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_OVF_pf!=NULL){
    2ea4:	80 91 40 02 	lds	r24, 0x0240
    2ea8:	90 91 41 02 	lds	r25, 0x0241
    2eac:	00 97       	sbiw	r24, 0x00	; 0
    2eae:	29 f0       	breq	.+10     	; 0x2eba <__vector_11+0x40>
		TIMER0_OVF_pf();
    2eb0:	e0 91 40 02 	lds	r30, 0x0240
    2eb4:	f0 91 41 02 	lds	r31, 0x0241
    2eb8:	09 95       	icall
	}
}
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	ff 91       	pop	r31
    2ec0:	ef 91       	pop	r30
    2ec2:	bf 91       	pop	r27
    2ec4:	af 91       	pop	r26
    2ec6:	9f 91       	pop	r25
    2ec8:	8f 91       	pop	r24
    2eca:	7f 91       	pop	r23
    2ecc:	6f 91       	pop	r22
    2ece:	5f 91       	pop	r21
    2ed0:	4f 91       	pop	r20
    2ed2:	3f 91       	pop	r19
    2ed4:	2f 91       	pop	r18
    2ed6:	0f 90       	pop	r0
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	0f 90       	pop	r0
    2edc:	1f 90       	pop	r1
    2ede:	18 95       	reti

00002ee0 <SPI_voidInit_Master>:
#include "SPI_private.h"
#include "SPI_config.h"
#include "SPI_interface.h"

#if (SPI_MODE == SPI_MODE_SELECT_MASTER)
void SPI_voidInit_Master(ClockDivision copy_ClockDivisionType) {
    2ee0:	df 93       	push	r29
    2ee2:	cf 93       	push	r28
    2ee4:	00 d0       	rcall	.+0      	; 0x2ee6 <SPI_voidInit_Master+0x6>
    2ee6:	0f 92       	push	r0
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
    2eec:	89 83       	std	Y+1, r24	; 0x01
    /*
     * Data Order
     */
    #if (SPI_DATA_ORDER == SPI_DATA_ORDER_MSB_TRANSMITTED_FIRST)
        CLR_BIT(SPI->SPCR, DORD);
    2eee:	ad e2       	ldi	r26, 0x2D	; 45
    2ef0:	b0 e0       	ldi	r27, 0x00	; 0
    2ef2:	ed e2       	ldi	r30, 0x2D	; 45
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	80 81       	ld	r24, Z
    2ef8:	8f 7d       	andi	r24, 0xDF	; 223
    2efa:	8c 93       	st	X, r24
    #else
        #error "wrong configuration for SPI_DATA_ORDER"
    #endif

    #if (SPI_CLOCK_POLARITY == SPI_CLOCK_POLARITY_IDEAL_LOW)
        CLR_BIT(SPI->SPCR, CPOL);
    2efc:	ad e2       	ldi	r26, 0x2D	; 45
    2efe:	b0 e0       	ldi	r27, 0x00	; 0
    2f00:	ed e2       	ldi	r30, 0x2D	; 45
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	87 7f       	andi	r24, 0xF7	; 247
    2f08:	8c 93       	st	X, r24
    #endif

    #if (SPI_CLOCK_PHASE == SPI_CLOCK_PHASE_SAMPLE_LEADING)
        CLR_BIT(SPI->SPCR, CPHA);
    #elif (SPI_CLOCK_PHASE == SPI_CLOCK_PHASE_SAMPLE_TRAILING)
        SET_BIT(SPI->SPCR, CPHA);
    2f0a:	ad e2       	ldi	r26, 0x2D	; 45
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	ed e2       	ldi	r30, 0x2D	; 45
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	84 60       	ori	r24, 0x04	; 4
    2f16:	8c 93       	st	X, r24
    #else
        #error "wrong configuration for SPI_CLOCK_PHASE"
    #endif

    // Set master mode
    SET_BIT(SPI->SPCR, MSTR);
    2f18:	ad e2       	ldi	r26, 0x2D	; 45
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	ed e2       	ldi	r30, 0x2D	; 45
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	80 61       	ori	r24, 0x10	; 16
    2f24:	8c 93       	st	X, r24

    // Set clock division
    switch (copy_ClockDivisionType) {
    2f26:	89 81       	ldd	r24, Y+1	; 0x01
    2f28:	28 2f       	mov	r18, r24
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	3b 83       	std	Y+3, r19	; 0x03
    2f2e:	2a 83       	std	Y+2, r18	; 0x02
    2f30:	8a 81       	ldd	r24, Y+2	; 0x02
    2f32:	9b 81       	ldd	r25, Y+3	; 0x03
    2f34:	83 30       	cpi	r24, 0x03	; 3
    2f36:	91 05       	cpc	r25, r1
    2f38:	09 f4       	brne	.+2      	; 0x2f3c <SPI_voidInit_Master+0x5c>
    2f3a:	6a c0       	rjmp	.+212    	; 0x3010 <SPI_voidInit_Master+0x130>
    2f3c:	2a 81       	ldd	r18, Y+2	; 0x02
    2f3e:	3b 81       	ldd	r19, Y+3	; 0x03
    2f40:	24 30       	cpi	r18, 0x04	; 4
    2f42:	31 05       	cpc	r19, r1
    2f44:	84 f4       	brge	.+32     	; 0x2f66 <SPI_voidInit_Master+0x86>
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4a:	81 30       	cpi	r24, 0x01	; 1
    2f4c:	91 05       	cpc	r25, r1
    2f4e:	a1 f1       	breq	.+104    	; 0x2fb8 <SPI_voidInit_Master+0xd8>
    2f50:	2a 81       	ldd	r18, Y+2	; 0x02
    2f52:	3b 81       	ldd	r19, Y+3	; 0x03
    2f54:	22 30       	cpi	r18, 0x02	; 2
    2f56:	31 05       	cpc	r19, r1
    2f58:	0c f0       	brlt	.+2      	; 0x2f5c <SPI_voidInit_Master+0x7c>
    2f5a:	44 c0       	rjmp	.+136    	; 0x2fe4 <SPI_voidInit_Master+0x104>
    2f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f60:	00 97       	sbiw	r24, 0x00	; 0
    2f62:	a1 f0       	breq	.+40     	; 0x2f8c <SPI_voidInit_Master+0xac>
    2f64:	ac c0       	rjmp	.+344    	; 0x30be <SPI_voidInit_Master+0x1de>
    2f66:	2a 81       	ldd	r18, Y+2	; 0x02
    2f68:	3b 81       	ldd	r19, Y+3	; 0x03
    2f6a:	25 30       	cpi	r18, 0x05	; 5
    2f6c:	31 05       	cpc	r19, r1
    2f6e:	09 f4       	brne	.+2      	; 0x2f72 <SPI_voidInit_Master+0x92>
    2f70:	7b c0       	rjmp	.+246    	; 0x3068 <SPI_voidInit_Master+0x188>
    2f72:	8a 81       	ldd	r24, Y+2	; 0x02
    2f74:	9b 81       	ldd	r25, Y+3	; 0x03
    2f76:	85 30       	cpi	r24, 0x05	; 5
    2f78:	91 05       	cpc	r25, r1
    2f7a:	0c f4       	brge	.+2      	; 0x2f7e <SPI_voidInit_Master+0x9e>
    2f7c:	5f c0       	rjmp	.+190    	; 0x303c <SPI_voidInit_Master+0x15c>
    2f7e:	2a 81       	ldd	r18, Y+2	; 0x02
    2f80:	3b 81       	ldd	r19, Y+3	; 0x03
    2f82:	26 30       	cpi	r18, 0x06	; 6
    2f84:	31 05       	cpc	r19, r1
    2f86:	09 f4       	brne	.+2      	; 0x2f8a <SPI_voidInit_Master+0xaa>
    2f88:	85 c0       	rjmp	.+266    	; 0x3094 <SPI_voidInit_Master+0x1b4>
    2f8a:	99 c0       	rjmp	.+306    	; 0x30be <SPI_voidInit_Master+0x1de>
        case fosc_div_2:
            CLR_BIT(SPI->SPCR, SPR0);
    2f8c:	ad e2       	ldi	r26, 0x2D	; 45
    2f8e:	b0 e0       	ldi	r27, 0x00	; 0
    2f90:	ed e2       	ldi	r30, 0x2D	; 45
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	80 81       	ld	r24, Z
    2f96:	8e 7f       	andi	r24, 0xFE	; 254
    2f98:	8c 93       	st	X, r24
            CLR_BIT(SPI->SPCR, SPR1);
    2f9a:	ad e2       	ldi	r26, 0x2D	; 45
    2f9c:	b0 e0       	ldi	r27, 0x00	; 0
    2f9e:	ed e2       	ldi	r30, 0x2D	; 45
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	80 81       	ld	r24, Z
    2fa4:	8d 7f       	andi	r24, 0xFD	; 253
    2fa6:	8c 93       	st	X, r24
            SET_BIT(SPI->SPCR, SPI2X);
    2fa8:	ad e2       	ldi	r26, 0x2D	; 45
    2faa:	b0 e0       	ldi	r27, 0x00	; 0
    2fac:	ed e2       	ldi	r30, 0x2D	; 45
    2fae:	f0 e0       	ldi	r31, 0x00	; 0
    2fb0:	80 81       	ld	r24, Z
    2fb2:	81 60       	ori	r24, 0x01	; 1
    2fb4:	8c 93       	st	X, r24
    2fb6:	83 c0       	rjmp	.+262    	; 0x30be <SPI_voidInit_Master+0x1de>
            break;
        case fosc_div_4:
            CLR_BIT(SPI->SPCR, SPR0);
    2fb8:	ad e2       	ldi	r26, 0x2D	; 45
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	ed e2       	ldi	r30, 0x2D	; 45
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	80 81       	ld	r24, Z
    2fc2:	8e 7f       	andi	r24, 0xFE	; 254
    2fc4:	8c 93       	st	X, r24
            CLR_BIT(SPI->SPCR, SPR1);
    2fc6:	ad e2       	ldi	r26, 0x2D	; 45
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	ed e2       	ldi	r30, 0x2D	; 45
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	8d 7f       	andi	r24, 0xFD	; 253
    2fd2:	8c 93       	st	X, r24
            CLR_BIT(SPI->SPCR, SPI2X);
    2fd4:	ad e2       	ldi	r26, 0x2D	; 45
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	ed e2       	ldi	r30, 0x2D	; 45
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	8e 7f       	andi	r24, 0xFE	; 254
    2fe0:	8c 93       	st	X, r24
    2fe2:	6d c0       	rjmp	.+218    	; 0x30be <SPI_voidInit_Master+0x1de>
            break;
        case fosc_div_8:
            SET_BIT(SPI->SPCR, SPR0);
    2fe4:	ad e2       	ldi	r26, 0x2D	; 45
    2fe6:	b0 e0       	ldi	r27, 0x00	; 0
    2fe8:	ed e2       	ldi	r30, 0x2D	; 45
    2fea:	f0 e0       	ldi	r31, 0x00	; 0
    2fec:	80 81       	ld	r24, Z
    2fee:	81 60       	ori	r24, 0x01	; 1
    2ff0:	8c 93       	st	X, r24
            CLR_BIT(SPI->SPCR, SPR1);
    2ff2:	ad e2       	ldi	r26, 0x2D	; 45
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	ed e2       	ldi	r30, 0x2D	; 45
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	80 81       	ld	r24, Z
    2ffc:	8d 7f       	andi	r24, 0xFD	; 253
    2ffe:	8c 93       	st	X, r24
            SET_BIT(SPI->SPCR, SPI2X);
    3000:	ad e2       	ldi	r26, 0x2D	; 45
    3002:	b0 e0       	ldi	r27, 0x00	; 0
    3004:	ed e2       	ldi	r30, 0x2D	; 45
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	80 81       	ld	r24, Z
    300a:	81 60       	ori	r24, 0x01	; 1
    300c:	8c 93       	st	X, r24
    300e:	57 c0       	rjmp	.+174    	; 0x30be <SPI_voidInit_Master+0x1de>
            break;
        case fosc_div_16:
            SET_BIT(SPI->SPCR, SPR0);
    3010:	ad e2       	ldi	r26, 0x2D	; 45
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	ed e2       	ldi	r30, 0x2D	; 45
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	81 60       	ori	r24, 0x01	; 1
    301c:	8c 93       	st	X, r24
            CLR_BIT(SPI->SPCR, SPR1);
    301e:	ad e2       	ldi	r26, 0x2D	; 45
    3020:	b0 e0       	ldi	r27, 0x00	; 0
    3022:	ed e2       	ldi	r30, 0x2D	; 45
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	8d 7f       	andi	r24, 0xFD	; 253
    302a:	8c 93       	st	X, r24
            CLR_BIT(SPI->SPCR, SPI2X);
    302c:	ad e2       	ldi	r26, 0x2D	; 45
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	ed e2       	ldi	r30, 0x2D	; 45
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	8e 7f       	andi	r24, 0xFE	; 254
    3038:	8c 93       	st	X, r24
    303a:	41 c0       	rjmp	.+130    	; 0x30be <SPI_voidInit_Master+0x1de>
            break;
        case fosc_div_32:
            CLR_BIT(SPI->SPCR, SPR0);
    303c:	ad e2       	ldi	r26, 0x2D	; 45
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	ed e2       	ldi	r30, 0x2D	; 45
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	80 81       	ld	r24, Z
    3046:	8e 7f       	andi	r24, 0xFE	; 254
    3048:	8c 93       	st	X, r24
            SET_BIT(SPI->SPCR, SPR1);
    304a:	ad e2       	ldi	r26, 0x2D	; 45
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	ed e2       	ldi	r30, 0x2D	; 45
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	82 60       	ori	r24, 0x02	; 2
    3056:	8c 93       	st	X, r24
            SET_BIT(SPI->SPCR, SPI2X);
    3058:	ad e2       	ldi	r26, 0x2D	; 45
    305a:	b0 e0       	ldi	r27, 0x00	; 0
    305c:	ed e2       	ldi	r30, 0x2D	; 45
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	80 81       	ld	r24, Z
    3062:	81 60       	ori	r24, 0x01	; 1
    3064:	8c 93       	st	X, r24
    3066:	2b c0       	rjmp	.+86     	; 0x30be <SPI_voidInit_Master+0x1de>
            break;
        case fosc_div_64:
            CLR_BIT(SPI->SPCR, SPR0);
    3068:	ad e2       	ldi	r26, 0x2D	; 45
    306a:	b0 e0       	ldi	r27, 0x00	; 0
    306c:	ed e2       	ldi	r30, 0x2D	; 45
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	80 81       	ld	r24, Z
    3072:	8e 7f       	andi	r24, 0xFE	; 254
    3074:	8c 93       	st	X, r24
            SET_BIT(SPI->SPCR, SPR1);
    3076:	ad e2       	ldi	r26, 0x2D	; 45
    3078:	b0 e0       	ldi	r27, 0x00	; 0
    307a:	ed e2       	ldi	r30, 0x2D	; 45
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	80 81       	ld	r24, Z
    3080:	82 60       	ori	r24, 0x02	; 2
    3082:	8c 93       	st	X, r24
            CLR_BIT(SPI->SPCR, SPI2X);
    3084:	ad e2       	ldi	r26, 0x2D	; 45
    3086:	b0 e0       	ldi	r27, 0x00	; 0
    3088:	ed e2       	ldi	r30, 0x2D	; 45
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	80 81       	ld	r24, Z
    308e:	8e 7f       	andi	r24, 0xFE	; 254
    3090:	8c 93       	st	X, r24
    3092:	15 c0       	rjmp	.+42     	; 0x30be <SPI_voidInit_Master+0x1de>
            break;
        case fosc_div_128:
            SET_BIT(SPI->SPCR, SPR0);
    3094:	ad e2       	ldi	r26, 0x2D	; 45
    3096:	b0 e0       	ldi	r27, 0x00	; 0
    3098:	ed e2       	ldi	r30, 0x2D	; 45
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	80 81       	ld	r24, Z
    309e:	81 60       	ori	r24, 0x01	; 1
    30a0:	8c 93       	st	X, r24
            SET_BIT(SPI->SPCR, SPR1);
    30a2:	ad e2       	ldi	r26, 0x2D	; 45
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	ed e2       	ldi	r30, 0x2D	; 45
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	80 81       	ld	r24, Z
    30ac:	82 60       	ori	r24, 0x02	; 2
    30ae:	8c 93       	st	X, r24
            CLR_BIT(SPI->SPCR, SPI2X);
    30b0:	ad e2       	ldi	r26, 0x2D	; 45
    30b2:	b0 e0       	ldi	r27, 0x00	; 0
    30b4:	ed e2       	ldi	r30, 0x2D	; 45
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	80 81       	ld	r24, Z
    30ba:	8e 7f       	andi	r24, 0xFE	; 254
    30bc:	8c 93       	st	X, r24
    }

    /*
     * ENABLE SPI
     */
    SET_BIT(SPI->SPCR, SPE);
    30be:	ad e2       	ldi	r26, 0x2D	; 45
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	ed e2       	ldi	r30, 0x2D	; 45
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	80 64       	ori	r24, 0x40	; 64
    30ca:	8c 93       	st	X, r24
}
    30cc:	0f 90       	pop	r0
    30ce:	0f 90       	pop	r0
    30d0:	0f 90       	pop	r0
    30d2:	cf 91       	pop	r28
    30d4:	df 91       	pop	r29
    30d6:	08 95       	ret

000030d8 <SPI_u8Transcieve>:
}
#else
#error "Invalid SPI mode configuration"
#endif

u8 SPI_u8Transcieve(u8 Copy_u8Value) {
    30d8:	df 93       	push	r29
    30da:	cf 93       	push	r28
    30dc:	0f 92       	push	r0
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
    30e2:	89 83       	std	Y+1, r24	; 0x01

    // Send the data
    SPI->SPDR = Copy_u8Value;
    30e4:	ed e2       	ldi	r30, 0x2D	; 45
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	89 81       	ldd	r24, Y+1	; 0x01
    30ea:	82 83       	std	Z+2, r24	; 0x02

    // Wait for the reception to complete
    while (GET_BIT(SPI->SPSR,SPIF)==0);
    30ec:	ed e2       	ldi	r30, 0x2D	; 45
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	81 81       	ldd	r24, Z+1	; 0x01
    30f2:	88 23       	and	r24, r24
    30f4:	dc f7       	brge	.-10     	; 0x30ec <SPI_u8Transcieve+0x14>

    // Return the received data
    return SPI->SPDR;
    30f6:	ed e2       	ldi	r30, 0x2D	; 45
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	82 81       	ldd	r24, Z+2	; 0x02
}
    30fc:	0f 90       	pop	r0
    30fe:	cf 91       	pop	r28
    3100:	df 91       	pop	r29
    3102:	08 95       	ret

00003104 <Intrrupt_Init>:
static void(*INT0_pf)(void)=NULL;
static void(*INT1_pf)(void)=NULL;
static void(*INT2_pf)(void)=NULL;


void Intrrupt_Init(u8 copy_u8Intrrupt_id,u8 copy_u8Intrrupt_mode){
    3104:	df 93       	push	r29
    3106:	cf 93       	push	r28
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
    310c:	2a 97       	sbiw	r28, 0x0a	; 10
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	f8 94       	cli
    3112:	de bf       	out	0x3e, r29	; 62
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	cd bf       	out	0x3d, r28	; 61
    3118:	89 83       	std	Y+1, r24	; 0x01
    311a:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Intrrupt_id){
    311c:	89 81       	ldd	r24, Y+1	; 0x01
    311e:	28 2f       	mov	r18, r24
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	3a 87       	std	Y+10, r19	; 0x0a
    3124:	29 87       	std	Y+9, r18	; 0x09
    3126:	89 85       	ldd	r24, Y+9	; 0x09
    3128:	9a 85       	ldd	r25, Y+10	; 0x0a
    312a:	81 30       	cpi	r24, 0x01	; 1
    312c:	91 05       	cpc	r25, r1
    312e:	09 f4       	brne	.+2      	; 0x3132 <Intrrupt_Init+0x2e>
    3130:	66 c0       	rjmp	.+204    	; 0x31fe <Intrrupt_Init+0xfa>
    3132:	29 85       	ldd	r18, Y+9	; 0x09
    3134:	3a 85       	ldd	r19, Y+10	; 0x0a
    3136:	22 30       	cpi	r18, 0x02	; 2
    3138:	31 05       	cpc	r19, r1
    313a:	09 f4       	brne	.+2      	; 0x313e <Intrrupt_Init+0x3a>
    313c:	bb c0       	rjmp	.+374    	; 0x32b4 <Intrrupt_Init+0x1b0>
    313e:	89 85       	ldd	r24, Y+9	; 0x09
    3140:	9a 85       	ldd	r25, Y+10	; 0x0a
    3142:	00 97       	sbiw	r24, 0x00	; 0
    3144:	09 f0       	breq	.+2      	; 0x3148 <Intrrupt_Init+0x44>
    3146:	d4 c0       	rjmp	.+424    	; 0x32f0 <Intrrupt_Init+0x1ec>
		case EXT_INT0:
			switch(copy_u8Intrrupt_mode){
    3148:	8a 81       	ldd	r24, Y+2	; 0x02
    314a:	28 2f       	mov	r18, r24
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	38 87       	std	Y+8, r19	; 0x08
    3150:	2f 83       	std	Y+7, r18	; 0x07
    3152:	8f 81       	ldd	r24, Y+7	; 0x07
    3154:	98 85       	ldd	r25, Y+8	; 0x08
    3156:	81 30       	cpi	r24, 0x01	; 1
    3158:	91 05       	cpc	r25, r1
    315a:	21 f1       	breq	.+72     	; 0x31a4 <Intrrupt_Init+0xa0>
    315c:	2f 81       	ldd	r18, Y+7	; 0x07
    315e:	38 85       	ldd	r19, Y+8	; 0x08
    3160:	22 30       	cpi	r18, 0x02	; 2
    3162:	31 05       	cpc	r19, r1
    3164:	2c f4       	brge	.+10     	; 0x3170 <Intrrupt_Init+0x6c>
    3166:	8f 81       	ldd	r24, Y+7	; 0x07
    3168:	98 85       	ldd	r25, Y+8	; 0x08
    316a:	00 97       	sbiw	r24, 0x00	; 0
    316c:	61 f0       	breq	.+24     	; 0x3186 <Intrrupt_Init+0x82>
    316e:	c0 c0       	rjmp	.+384    	; 0x32f0 <Intrrupt_Init+0x1ec>
    3170:	2f 81       	ldd	r18, Y+7	; 0x07
    3172:	38 85       	ldd	r19, Y+8	; 0x08
    3174:	22 30       	cpi	r18, 0x02	; 2
    3176:	31 05       	cpc	r19, r1
    3178:	21 f1       	breq	.+72     	; 0x31c2 <Intrrupt_Init+0xbe>
    317a:	8f 81       	ldd	r24, Y+7	; 0x07
    317c:	98 85       	ldd	r25, Y+8	; 0x08
    317e:	83 30       	cpi	r24, 0x03	; 3
    3180:	91 05       	cpc	r25, r1
    3182:	71 f1       	breq	.+92     	; 0x31e0 <Intrrupt_Init+0xdc>
    3184:	b5 c0       	rjmp	.+362    	; 0x32f0 <Intrrupt_Init+0x1ec>
			case RISING:
				SET_BIT(MCUCR,ISC01);
    3186:	a5 e5       	ldi	r26, 0x55	; 85
    3188:	b0 e0       	ldi	r27, 0x00	; 0
    318a:	e5 e5       	ldi	r30, 0x55	; 85
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	82 60       	ori	r24, 0x02	; 2
    3192:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC00);
    3194:	a5 e5       	ldi	r26, 0x55	; 85
    3196:	b0 e0       	ldi	r27, 0x00	; 0
    3198:	e5 e5       	ldi	r30, 0x55	; 85
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	80 81       	ld	r24, Z
    319e:	81 60       	ori	r24, 0x01	; 1
    31a0:	8c 93       	st	X, r24
    31a2:	a6 c0       	rjmp	.+332    	; 0x32f0 <Intrrupt_Init+0x1ec>
				break;
			case FALLING:
				SET_BIT(MCUCR,ISC01);
    31a4:	a5 e5       	ldi	r26, 0x55	; 85
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	e5 e5       	ldi	r30, 0x55	; 85
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	82 60       	ori	r24, 0x02	; 2
    31b0:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC00);
    31b2:	a5 e5       	ldi	r26, 0x55	; 85
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	e5 e5       	ldi	r30, 0x55	; 85
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	8e 7f       	andi	r24, 0xFE	; 254
    31be:	8c 93       	st	X, r24
    31c0:	97 c0       	rjmp	.+302    	; 0x32f0 <Intrrupt_Init+0x1ec>
				break;
			case LOW_LEVEL:
				CLR_BIT(MCUCR,ISC01);
    31c2:	a5 e5       	ldi	r26, 0x55	; 85
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	e5 e5       	ldi	r30, 0x55	; 85
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	8d 7f       	andi	r24, 0xFD	; 253
    31ce:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC00);
    31d0:	a5 e5       	ldi	r26, 0x55	; 85
    31d2:	b0 e0       	ldi	r27, 0x00	; 0
    31d4:	e5 e5       	ldi	r30, 0x55	; 85
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	80 81       	ld	r24, Z
    31da:	8e 7f       	andi	r24, 0xFE	; 254
    31dc:	8c 93       	st	X, r24
    31de:	88 c0       	rjmp	.+272    	; 0x32f0 <Intrrupt_Init+0x1ec>
				break;
			case TOGGLING:
				CLR_BIT(MCUCR,ISC01);
    31e0:	a5 e5       	ldi	r26, 0x55	; 85
    31e2:	b0 e0       	ldi	r27, 0x00	; 0
    31e4:	e5 e5       	ldi	r30, 0x55	; 85
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	80 81       	ld	r24, Z
    31ea:	8d 7f       	andi	r24, 0xFD	; 253
    31ec:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC00);
    31ee:	a5 e5       	ldi	r26, 0x55	; 85
    31f0:	b0 e0       	ldi	r27, 0x00	; 0
    31f2:	e5 e5       	ldi	r30, 0x55	; 85
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	80 81       	ld	r24, Z
    31f8:	81 60       	ori	r24, 0x01	; 1
    31fa:	8c 93       	st	X, r24
    31fc:	79 c0       	rjmp	.+242    	; 0x32f0 <Intrrupt_Init+0x1ec>
				break;
			}
				break;

	case EXT_INT1:
			switch(copy_u8Intrrupt_mode){
    31fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3200:	28 2f       	mov	r18, r24
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	3e 83       	std	Y+6, r19	; 0x06
    3206:	2d 83       	std	Y+5, r18	; 0x05
    3208:	8d 81       	ldd	r24, Y+5	; 0x05
    320a:	9e 81       	ldd	r25, Y+6	; 0x06
    320c:	81 30       	cpi	r24, 0x01	; 1
    320e:	91 05       	cpc	r25, r1
    3210:	21 f1       	breq	.+72     	; 0x325a <Intrrupt_Init+0x156>
    3212:	2d 81       	ldd	r18, Y+5	; 0x05
    3214:	3e 81       	ldd	r19, Y+6	; 0x06
    3216:	22 30       	cpi	r18, 0x02	; 2
    3218:	31 05       	cpc	r19, r1
    321a:	2c f4       	brge	.+10     	; 0x3226 <Intrrupt_Init+0x122>
    321c:	8d 81       	ldd	r24, Y+5	; 0x05
    321e:	9e 81       	ldd	r25, Y+6	; 0x06
    3220:	00 97       	sbiw	r24, 0x00	; 0
    3222:	61 f0       	breq	.+24     	; 0x323c <Intrrupt_Init+0x138>
    3224:	65 c0       	rjmp	.+202    	; 0x32f0 <Intrrupt_Init+0x1ec>
    3226:	2d 81       	ldd	r18, Y+5	; 0x05
    3228:	3e 81       	ldd	r19, Y+6	; 0x06
    322a:	22 30       	cpi	r18, 0x02	; 2
    322c:	31 05       	cpc	r19, r1
    322e:	21 f1       	breq	.+72     	; 0x3278 <Intrrupt_Init+0x174>
    3230:	8d 81       	ldd	r24, Y+5	; 0x05
    3232:	9e 81       	ldd	r25, Y+6	; 0x06
    3234:	83 30       	cpi	r24, 0x03	; 3
    3236:	91 05       	cpc	r25, r1
    3238:	71 f1       	breq	.+92     	; 0x3296 <Intrrupt_Init+0x192>
    323a:	5a c0       	rjmp	.+180    	; 0x32f0 <Intrrupt_Init+0x1ec>
						case RISING:
							SET_BIT(MCUCR,ISC11);
    323c:	a5 e5       	ldi	r26, 0x55	; 85
    323e:	b0 e0       	ldi	r27, 0x00	; 0
    3240:	e5 e5       	ldi	r30, 0x55	; 85
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	80 81       	ld	r24, Z
    3246:	88 60       	ori	r24, 0x08	; 8
    3248:	8c 93       	st	X, r24
							SET_BIT(MCUCR,ISC10);
    324a:	a5 e5       	ldi	r26, 0x55	; 85
    324c:	b0 e0       	ldi	r27, 0x00	; 0
    324e:	e5 e5       	ldi	r30, 0x55	; 85
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	80 81       	ld	r24, Z
    3254:	84 60       	ori	r24, 0x04	; 4
    3256:	8c 93       	st	X, r24
    3258:	4b c0       	rjmp	.+150    	; 0x32f0 <Intrrupt_Init+0x1ec>
							break;
						case FALLING:
							SET_BIT(MCUCR,ISC11);
    325a:	a5 e5       	ldi	r26, 0x55	; 85
    325c:	b0 e0       	ldi	r27, 0x00	; 0
    325e:	e5 e5       	ldi	r30, 0x55	; 85
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	80 81       	ld	r24, Z
    3264:	88 60       	ori	r24, 0x08	; 8
    3266:	8c 93       	st	X, r24
							CLR_BIT(MCUCR,ISC10);
    3268:	a5 e5       	ldi	r26, 0x55	; 85
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	e5 e5       	ldi	r30, 0x55	; 85
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	80 81       	ld	r24, Z
    3272:	8b 7f       	andi	r24, 0xFB	; 251
    3274:	8c 93       	st	X, r24
    3276:	3c c0       	rjmp	.+120    	; 0x32f0 <Intrrupt_Init+0x1ec>
							break;
						case LOW_LEVEL:
							CLR_BIT(MCUCR,ISC11);
    3278:	a5 e5       	ldi	r26, 0x55	; 85
    327a:	b0 e0       	ldi	r27, 0x00	; 0
    327c:	e5 e5       	ldi	r30, 0x55	; 85
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	80 81       	ld	r24, Z
    3282:	87 7f       	andi	r24, 0xF7	; 247
    3284:	8c 93       	st	X, r24
							CLR_BIT(MCUCR,ISC10);
    3286:	a5 e5       	ldi	r26, 0x55	; 85
    3288:	b0 e0       	ldi	r27, 0x00	; 0
    328a:	e5 e5       	ldi	r30, 0x55	; 85
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	80 81       	ld	r24, Z
    3290:	8b 7f       	andi	r24, 0xFB	; 251
    3292:	8c 93       	st	X, r24
    3294:	2d c0       	rjmp	.+90     	; 0x32f0 <Intrrupt_Init+0x1ec>
							break;
						case TOGGLING:
							CLR_BIT(MCUCR,ISC11);
    3296:	a5 e5       	ldi	r26, 0x55	; 85
    3298:	b0 e0       	ldi	r27, 0x00	; 0
    329a:	e5 e5       	ldi	r30, 0x55	; 85
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	80 81       	ld	r24, Z
    32a0:	87 7f       	andi	r24, 0xF7	; 247
    32a2:	8c 93       	st	X, r24
							SET_BIT(MCUCR,ISC10);
    32a4:	a5 e5       	ldi	r26, 0x55	; 85
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	e5 e5       	ldi	r30, 0x55	; 85
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	84 60       	ori	r24, 0x04	; 4
    32b0:	8c 93       	st	X, r24
    32b2:	1e c0       	rjmp	.+60     	; 0x32f0 <Intrrupt_Init+0x1ec>
							break;
					}
				break;

		case EXT_INT2:
			switch(copy_u8Intrrupt_mode){
    32b4:	8a 81       	ldd	r24, Y+2	; 0x02
    32b6:	28 2f       	mov	r18, r24
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	3c 83       	std	Y+4, r19	; 0x04
    32bc:	2b 83       	std	Y+3, r18	; 0x03
    32be:	8b 81       	ldd	r24, Y+3	; 0x03
    32c0:	9c 81       	ldd	r25, Y+4	; 0x04
    32c2:	00 97       	sbiw	r24, 0x00	; 0
    32c4:	31 f0       	breq	.+12     	; 0x32d2 <Intrrupt_Init+0x1ce>
    32c6:	2b 81       	ldd	r18, Y+3	; 0x03
    32c8:	3c 81       	ldd	r19, Y+4	; 0x04
    32ca:	21 30       	cpi	r18, 0x01	; 1
    32cc:	31 05       	cpc	r19, r1
    32ce:	49 f0       	breq	.+18     	; 0x32e2 <Intrrupt_Init+0x1de>
    32d0:	0f c0       	rjmp	.+30     	; 0x32f0 <Intrrupt_Init+0x1ec>
						case RISING:
							SET_BIT(MCUCSR,ISC2);
    32d2:	a4 e5       	ldi	r26, 0x54	; 84
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	e4 e5       	ldi	r30, 0x54	; 84
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	80 81       	ld	r24, Z
    32dc:	80 64       	ori	r24, 0x40	; 64
    32de:	8c 93       	st	X, r24
    32e0:	07 c0       	rjmp	.+14     	; 0x32f0 <Intrrupt_Init+0x1ec>
							break;
						case FALLING:
							CLR_BIT(MCUCSR,ISC2);
    32e2:	a4 e5       	ldi	r26, 0x54	; 84
    32e4:	b0 e0       	ldi	r27, 0x00	; 0
    32e6:	e4 e5       	ldi	r30, 0x54	; 84
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
    32ec:	8f 7b       	andi	r24, 0xBF	; 191
    32ee:	8c 93       	st	X, r24

				break;
		default:
			break;
		}
}
    32f0:	2a 96       	adiw	r28, 0x0a	; 10
    32f2:	0f b6       	in	r0, 0x3f	; 63
    32f4:	f8 94       	cli
    32f6:	de bf       	out	0x3e, r29	; 62
    32f8:	0f be       	out	0x3f, r0	; 63
    32fa:	cd bf       	out	0x3d, r28	; 61
    32fc:	cf 91       	pop	r28
    32fe:	df 91       	pop	r29
    3300:	08 95       	ret

00003302 <Intrrupt_Enabled>:
void Intrrupt_Enabled(u8 copy_u8Intrrupt_id){
    3302:	df 93       	push	r29
    3304:	cf 93       	push	r28
    3306:	00 d0       	rcall	.+0      	; 0x3308 <Intrrupt_Enabled+0x6>
    3308:	0f 92       	push	r0
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
    330e:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8Intrrupt_id){
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	28 2f       	mov	r18, r24
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	3b 83       	std	Y+3, r19	; 0x03
    3318:	2a 83       	std	Y+2, r18	; 0x02
    331a:	8a 81       	ldd	r24, Y+2	; 0x02
    331c:	9b 81       	ldd	r25, Y+3	; 0x03
    331e:	81 30       	cpi	r24, 0x01	; 1
    3320:	91 05       	cpc	r25, r1
    3322:	89 f0       	breq	.+34     	; 0x3346 <Intrrupt_Enabled+0x44>
    3324:	2a 81       	ldd	r18, Y+2	; 0x02
    3326:	3b 81       	ldd	r19, Y+3	; 0x03
    3328:	22 30       	cpi	r18, 0x02	; 2
    332a:	31 05       	cpc	r19, r1
    332c:	a1 f0       	breq	.+40     	; 0x3356 <Intrrupt_Enabled+0x54>
    332e:	8a 81       	ldd	r24, Y+2	; 0x02
    3330:	9b 81       	ldd	r25, Y+3	; 0x03
    3332:	00 97       	sbiw	r24, 0x00	; 0
    3334:	b9 f4       	brne	.+46     	; 0x3364 <Intrrupt_Enabled+0x62>
	case EXT_INT0:
		SET_BIT(GICR,INT0);
    3336:	ab e5       	ldi	r26, 0x5B	; 91
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	eb e5       	ldi	r30, 0x5B	; 91
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	80 81       	ld	r24, Z
    3340:	80 64       	ori	r24, 0x40	; 64
    3342:	8c 93       	st	X, r24
    3344:	0f c0       	rjmp	.+30     	; 0x3364 <Intrrupt_Enabled+0x62>
			break;
	case EXT_INT1:
		SET_BIT(GICR,INT1);
    3346:	ab e5       	ldi	r26, 0x5B	; 91
    3348:	b0 e0       	ldi	r27, 0x00	; 0
    334a:	eb e5       	ldi	r30, 0x5B	; 91
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	80 81       	ld	r24, Z
    3350:	80 68       	ori	r24, 0x80	; 128
    3352:	8c 93       	st	X, r24
    3354:	07 c0       	rjmp	.+14     	; 0x3364 <Intrrupt_Enabled+0x62>
			break;
	case EXT_INT2:
		SET_BIT(GICR,INT2);
    3356:	ab e5       	ldi	r26, 0x5B	; 91
    3358:	b0 e0       	ldi	r27, 0x00	; 0
    335a:	eb e5       	ldi	r30, 0x5B	; 91
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	80 81       	ld	r24, Z
    3360:	80 62       	ori	r24, 0x20	; 32
    3362:	8c 93       	st	X, r24
			break;
	default:
		break;
	}
	SET_BIT(SREG,GIE);
    3364:	af e5       	ldi	r26, 0x5F	; 95
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	ef e5       	ldi	r30, 0x5F	; 95
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	80 81       	ld	r24, Z
    336e:	80 68       	ori	r24, 0x80	; 128
    3370:	8c 93       	st	X, r24
}
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	0f 90       	pop	r0
    3378:	cf 91       	pop	r28
    337a:	df 91       	pop	r29
    337c:	08 95       	ret

0000337e <Intrrupt_Disabled>:
void Intrrupt_Disabled(u8 copy_u8Intrrupt_id){
    337e:	df 93       	push	r29
    3380:	cf 93       	push	r28
    3382:	00 d0       	rcall	.+0      	; 0x3384 <Intrrupt_Disabled+0x6>
    3384:	0f 92       	push	r0
    3386:	cd b7       	in	r28, 0x3d	; 61
    3388:	de b7       	in	r29, 0x3e	; 62
    338a:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8Intrrupt_id){
    338c:	89 81       	ldd	r24, Y+1	; 0x01
    338e:	28 2f       	mov	r18, r24
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	3b 83       	std	Y+3, r19	; 0x03
    3394:	2a 83       	std	Y+2, r18	; 0x02
    3396:	8a 81       	ldd	r24, Y+2	; 0x02
    3398:	9b 81       	ldd	r25, Y+3	; 0x03
    339a:	81 30       	cpi	r24, 0x01	; 1
    339c:	91 05       	cpc	r25, r1
    339e:	89 f0       	breq	.+34     	; 0x33c2 <Intrrupt_Disabled+0x44>
    33a0:	2a 81       	ldd	r18, Y+2	; 0x02
    33a2:	3b 81       	ldd	r19, Y+3	; 0x03
    33a4:	22 30       	cpi	r18, 0x02	; 2
    33a6:	31 05       	cpc	r19, r1
    33a8:	a1 f0       	breq	.+40     	; 0x33d2 <Intrrupt_Disabled+0x54>
    33aa:	8a 81       	ldd	r24, Y+2	; 0x02
    33ac:	9b 81       	ldd	r25, Y+3	; 0x03
    33ae:	00 97       	sbiw	r24, 0x00	; 0
    33b0:	b9 f4       	brne	.+46     	; 0x33e0 <Intrrupt_Disabled+0x62>
		case EXT_INT0:
			CLR_BIT(GICR,INT0);
    33b2:	ab e5       	ldi	r26, 0x5B	; 91
    33b4:	b0 e0       	ldi	r27, 0x00	; 0
    33b6:	eb e5       	ldi	r30, 0x5B	; 91
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	80 81       	ld	r24, Z
    33bc:	8f 7b       	andi	r24, 0xBF	; 191
    33be:	8c 93       	st	X, r24
    33c0:	0f c0       	rjmp	.+30     	; 0x33e0 <Intrrupt_Disabled+0x62>
				break;
		case EXT_INT1:
			CLR_BIT(GICR,INT1);
    33c2:	ab e5       	ldi	r26, 0x5B	; 91
    33c4:	b0 e0       	ldi	r27, 0x00	; 0
    33c6:	eb e5       	ldi	r30, 0x5B	; 91
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	80 81       	ld	r24, Z
    33cc:	8f 77       	andi	r24, 0x7F	; 127
    33ce:	8c 93       	st	X, r24
    33d0:	07 c0       	rjmp	.+14     	; 0x33e0 <Intrrupt_Disabled+0x62>
				break;
		case EXT_INT2:
			CLR_BIT(GICR,INT2);
    33d2:	ab e5       	ldi	r26, 0x5B	; 91
    33d4:	b0 e0       	ldi	r27, 0x00	; 0
    33d6:	eb e5       	ldi	r30, 0x5B	; 91
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	80 81       	ld	r24, Z
    33dc:	8f 7d       	andi	r24, 0xDF	; 223
    33de:	8c 93       	st	X, r24
				break;
		default:
			break;
		}
}
    33e0:	0f 90       	pop	r0
    33e2:	0f 90       	pop	r0
    33e4:	0f 90       	pop	r0
    33e6:	cf 91       	pop	r28
    33e8:	df 91       	pop	r29
    33ea:	08 95       	ret

000033ec <Intrrupt_GetFun>:
void Intrrupt_GetFun(u8 copy_u8Intrrupt_id,void (*pf)(void)){
    33ec:	df 93       	push	r29
    33ee:	cf 93       	push	r28
    33f0:	00 d0       	rcall	.+0      	; 0x33f2 <Intrrupt_GetFun+0x6>
    33f2:	00 d0       	rcall	.+0      	; 0x33f4 <Intrrupt_GetFun+0x8>
    33f4:	0f 92       	push	r0
    33f6:	cd b7       	in	r28, 0x3d	; 61
    33f8:	de b7       	in	r29, 0x3e	; 62
    33fa:	89 83       	std	Y+1, r24	; 0x01
    33fc:	7b 83       	std	Y+3, r23	; 0x03
    33fe:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8Intrrupt_id){
    3400:	89 81       	ldd	r24, Y+1	; 0x01
    3402:	28 2f       	mov	r18, r24
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	3d 83       	std	Y+5, r19	; 0x05
    3408:	2c 83       	std	Y+4, r18	; 0x04
    340a:	8c 81       	ldd	r24, Y+4	; 0x04
    340c:	9d 81       	ldd	r25, Y+5	; 0x05
    340e:	81 30       	cpi	r24, 0x01	; 1
    3410:	91 05       	cpc	r25, r1
    3412:	81 f0       	breq	.+32     	; 0x3434 <Intrrupt_GetFun+0x48>
    3414:	2c 81       	ldd	r18, Y+4	; 0x04
    3416:	3d 81       	ldd	r19, Y+5	; 0x05
    3418:	22 30       	cpi	r18, 0x02	; 2
    341a:	31 05       	cpc	r19, r1
    341c:	91 f0       	breq	.+36     	; 0x3442 <Intrrupt_GetFun+0x56>
    341e:	8c 81       	ldd	r24, Y+4	; 0x04
    3420:	9d 81       	ldd	r25, Y+5	; 0x05
    3422:	00 97       	sbiw	r24, 0x00	; 0
    3424:	a1 f4       	brne	.+40     	; 0x344e <Intrrupt_GetFun+0x62>
			case EXT_INT0:
				INT0_pf=pf;
    3426:	8a 81       	ldd	r24, Y+2	; 0x02
    3428:	9b 81       	ldd	r25, Y+3	; 0x03
    342a:	90 93 65 02 	sts	0x0265, r25
    342e:	80 93 64 02 	sts	0x0264, r24
    3432:	0d c0       	rjmp	.+26     	; 0x344e <Intrrupt_GetFun+0x62>
					break;
			case EXT_INT1:
				INT1_pf=pf;
    3434:	8a 81       	ldd	r24, Y+2	; 0x02
    3436:	9b 81       	ldd	r25, Y+3	; 0x03
    3438:	90 93 67 02 	sts	0x0267, r25
    343c:	80 93 66 02 	sts	0x0266, r24
    3440:	06 c0       	rjmp	.+12     	; 0x344e <Intrrupt_GetFun+0x62>
					break;
			case EXT_INT2:
				INT2_pf=pf;
    3442:	8a 81       	ldd	r24, Y+2	; 0x02
    3444:	9b 81       	ldd	r25, Y+3	; 0x03
    3446:	90 93 69 02 	sts	0x0269, r25
    344a:	80 93 68 02 	sts	0x0268, r24
					break;
			default:
				break;
			}
}
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	0f 90       	pop	r0
    3458:	cf 91       	pop	r28
    345a:	df 91       	pop	r29
    345c:	08 95       	ret

0000345e <__vector_1>:

void __vector_1(void) __attribute__((signal));
void __vector_1(void){
    345e:	1f 92       	push	r1
    3460:	0f 92       	push	r0
    3462:	0f b6       	in	r0, 0x3f	; 63
    3464:	0f 92       	push	r0
    3466:	11 24       	eor	r1, r1
    3468:	2f 93       	push	r18
    346a:	3f 93       	push	r19
    346c:	4f 93       	push	r20
    346e:	5f 93       	push	r21
    3470:	6f 93       	push	r22
    3472:	7f 93       	push	r23
    3474:	8f 93       	push	r24
    3476:	9f 93       	push	r25
    3478:	af 93       	push	r26
    347a:	bf 93       	push	r27
    347c:	ef 93       	push	r30
    347e:	ff 93       	push	r31
    3480:	df 93       	push	r29
    3482:	cf 93       	push	r28
    3484:	cd b7       	in	r28, 0x3d	; 61
    3486:	de b7       	in	r29, 0x3e	; 62
if(INT0_pf!=NULL){
    3488:	80 91 64 02 	lds	r24, 0x0264
    348c:	90 91 65 02 	lds	r25, 0x0265
    3490:	00 97       	sbiw	r24, 0x00	; 0
    3492:	29 f0       	breq	.+10     	; 0x349e <__vector_1+0x40>
	INT0_pf();
    3494:	e0 91 64 02 	lds	r30, 0x0264
    3498:	f0 91 65 02 	lds	r31, 0x0265
    349c:	09 95       	icall
}
}
    349e:	cf 91       	pop	r28
    34a0:	df 91       	pop	r29
    34a2:	ff 91       	pop	r31
    34a4:	ef 91       	pop	r30
    34a6:	bf 91       	pop	r27
    34a8:	af 91       	pop	r26
    34aa:	9f 91       	pop	r25
    34ac:	8f 91       	pop	r24
    34ae:	7f 91       	pop	r23
    34b0:	6f 91       	pop	r22
    34b2:	5f 91       	pop	r21
    34b4:	4f 91       	pop	r20
    34b6:	3f 91       	pop	r19
    34b8:	2f 91       	pop	r18
    34ba:	0f 90       	pop	r0
    34bc:	0f be       	out	0x3f, r0	; 63
    34be:	0f 90       	pop	r0
    34c0:	1f 90       	pop	r1
    34c2:	18 95       	reti

000034c4 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void){
    34c4:	1f 92       	push	r1
    34c6:	0f 92       	push	r0
    34c8:	0f b6       	in	r0, 0x3f	; 63
    34ca:	0f 92       	push	r0
    34cc:	11 24       	eor	r1, r1
    34ce:	2f 93       	push	r18
    34d0:	3f 93       	push	r19
    34d2:	4f 93       	push	r20
    34d4:	5f 93       	push	r21
    34d6:	6f 93       	push	r22
    34d8:	7f 93       	push	r23
    34da:	8f 93       	push	r24
    34dc:	9f 93       	push	r25
    34de:	af 93       	push	r26
    34e0:	bf 93       	push	r27
    34e2:	ef 93       	push	r30
    34e4:	ff 93       	push	r31
    34e6:	df 93       	push	r29
    34e8:	cf 93       	push	r28
    34ea:	cd b7       	in	r28, 0x3d	; 61
    34ec:	de b7       	in	r29, 0x3e	; 62
	if(INT1_pf!=NULL){
    34ee:	80 91 66 02 	lds	r24, 0x0266
    34f2:	90 91 67 02 	lds	r25, 0x0267
    34f6:	00 97       	sbiw	r24, 0x00	; 0
    34f8:	29 f0       	breq	.+10     	; 0x3504 <__vector_2+0x40>
		INT1_pf();
    34fa:	e0 91 66 02 	lds	r30, 0x0266
    34fe:	f0 91 67 02 	lds	r31, 0x0267
    3502:	09 95       	icall
	}
}
    3504:	cf 91       	pop	r28
    3506:	df 91       	pop	r29
    3508:	ff 91       	pop	r31
    350a:	ef 91       	pop	r30
    350c:	bf 91       	pop	r27
    350e:	af 91       	pop	r26
    3510:	9f 91       	pop	r25
    3512:	8f 91       	pop	r24
    3514:	7f 91       	pop	r23
    3516:	6f 91       	pop	r22
    3518:	5f 91       	pop	r21
    351a:	4f 91       	pop	r20
    351c:	3f 91       	pop	r19
    351e:	2f 91       	pop	r18
    3520:	0f 90       	pop	r0
    3522:	0f be       	out	0x3f, r0	; 63
    3524:	0f 90       	pop	r0
    3526:	1f 90       	pop	r1
    3528:	18 95       	reti

0000352a <__vector_3>:
void __vector_3(void) __attribute__((signal));
void __vector_3(void){
    352a:	1f 92       	push	r1
    352c:	0f 92       	push	r0
    352e:	0f b6       	in	r0, 0x3f	; 63
    3530:	0f 92       	push	r0
    3532:	11 24       	eor	r1, r1
    3534:	2f 93       	push	r18
    3536:	3f 93       	push	r19
    3538:	4f 93       	push	r20
    353a:	5f 93       	push	r21
    353c:	6f 93       	push	r22
    353e:	7f 93       	push	r23
    3540:	8f 93       	push	r24
    3542:	9f 93       	push	r25
    3544:	af 93       	push	r26
    3546:	bf 93       	push	r27
    3548:	ef 93       	push	r30
    354a:	ff 93       	push	r31
    354c:	df 93       	push	r29
    354e:	cf 93       	push	r28
    3550:	cd b7       	in	r28, 0x3d	; 61
    3552:	de b7       	in	r29, 0x3e	; 62
	if(INT2_pf!=NULL){
    3554:	80 91 68 02 	lds	r24, 0x0268
    3558:	90 91 69 02 	lds	r25, 0x0269
    355c:	00 97       	sbiw	r24, 0x00	; 0
    355e:	29 f0       	breq	.+10     	; 0x356a <__vector_3+0x40>
		INT2_pf();
    3560:	e0 91 68 02 	lds	r30, 0x0268
    3564:	f0 91 69 02 	lds	r31, 0x0269
    3568:	09 95       	icall
	}
}
    356a:	cf 91       	pop	r28
    356c:	df 91       	pop	r29
    356e:	ff 91       	pop	r31
    3570:	ef 91       	pop	r30
    3572:	bf 91       	pop	r27
    3574:	af 91       	pop	r26
    3576:	9f 91       	pop	r25
    3578:	8f 91       	pop	r24
    357a:	7f 91       	pop	r23
    357c:	6f 91       	pop	r22
    357e:	5f 91       	pop	r21
    3580:	4f 91       	pop	r20
    3582:	3f 91       	pop	r19
    3584:	2f 91       	pop	r18
    3586:	0f 90       	pop	r0
    3588:	0f be       	out	0x3f, r0	; 63
    358a:	0f 90       	pop	r0
    358c:	1f 90       	pop	r1
    358e:	18 95       	reti

00003590 <DIO_voidIniPins>:
 */

#include	"../../00-LIB/LSTD_types.h"
#include	"DIO_interface.h"

void 	DIO_voidIniPins			(DIO_T * DIOx,u8 copy_u8PinsID,u8 copy_u8State){
    3590:	df 93       	push	r29
    3592:	cf 93       	push	r28
    3594:	00 d0       	rcall	.+0      	; 0x3596 <DIO_voidIniPins+0x6>
    3596:	00 d0       	rcall	.+0      	; 0x3598 <DIO_voidIniPins+0x8>
    3598:	cd b7       	in	r28, 0x3d	; 61
    359a:	de b7       	in	r29, 0x3e	; 62
    359c:	9a 83       	std	Y+2, r25	; 0x02
    359e:	89 83       	std	Y+1, r24	; 0x01
    35a0:	6b 83       	std	Y+3, r22	; 0x03
    35a2:	4c 83       	std	Y+4, r20	; 0x04
	DIOx->DDR	&= ~(copy_u8PinsID);
    35a4:	e9 81       	ldd	r30, Y+1	; 0x01
    35a6:	fa 81       	ldd	r31, Y+2	; 0x02
    35a8:	81 81       	ldd	r24, Z+1	; 0x01
    35aa:	98 2f       	mov	r25, r24
    35ac:	8b 81       	ldd	r24, Y+3	; 0x03
    35ae:	80 95       	com	r24
    35b0:	89 23       	and	r24, r25
    35b2:	e9 81       	ldd	r30, Y+1	; 0x01
    35b4:	fa 81       	ldd	r31, Y+2	; 0x02
    35b6:	81 83       	std	Z+1, r24	; 0x01
	DIOx->DDR	|=	(copy_u8PinsID & copy_u8State);
    35b8:	e9 81       	ldd	r30, Y+1	; 0x01
    35ba:	fa 81       	ldd	r31, Y+2	; 0x02
    35bc:	21 81       	ldd	r18, Z+1	; 0x01
    35be:	9b 81       	ldd	r25, Y+3	; 0x03
    35c0:	8c 81       	ldd	r24, Y+4	; 0x04
    35c2:	89 23       	and	r24, r25
    35c4:	82 2b       	or	r24, r18
    35c6:	e9 81       	ldd	r30, Y+1	; 0x01
    35c8:	fa 81       	ldd	r31, Y+2	; 0x02
    35ca:	81 83       	std	Z+1, r24	; 0x01
}
    35cc:	0f 90       	pop	r0
    35ce:	0f 90       	pop	r0
    35d0:	0f 90       	pop	r0
    35d2:	0f 90       	pop	r0
    35d4:	cf 91       	pop	r28
    35d6:	df 91       	pop	r29
    35d8:	08 95       	ret

000035da <DIO_voidSetPinsValue>:
void 	DIO_voidSetPinsValue	(DIO_T * DIOx,u8 copy_u8PinsID,u8 copy_u8Value){
    35da:	df 93       	push	r29
    35dc:	cf 93       	push	r28
    35de:	00 d0       	rcall	.+0      	; 0x35e0 <DIO_voidSetPinsValue+0x6>
    35e0:	00 d0       	rcall	.+0      	; 0x35e2 <DIO_voidSetPinsValue+0x8>
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
    35e6:	9a 83       	std	Y+2, r25	; 0x02
    35e8:	89 83       	std	Y+1, r24	; 0x01
    35ea:	6b 83       	std	Y+3, r22	; 0x03
    35ec:	4c 83       	std	Y+4, r20	; 0x04
	DIOx->PORT	&= ~(copy_u8PinsID);
    35ee:	e9 81       	ldd	r30, Y+1	; 0x01
    35f0:	fa 81       	ldd	r31, Y+2	; 0x02
    35f2:	82 81       	ldd	r24, Z+2	; 0x02
    35f4:	98 2f       	mov	r25, r24
    35f6:	8b 81       	ldd	r24, Y+3	; 0x03
    35f8:	80 95       	com	r24
    35fa:	89 23       	and	r24, r25
    35fc:	e9 81       	ldd	r30, Y+1	; 0x01
    35fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3600:	82 83       	std	Z+2, r24	; 0x02
	DIOx->PORT	|=	(copy_u8PinsID & copy_u8Value);
    3602:	e9 81       	ldd	r30, Y+1	; 0x01
    3604:	fa 81       	ldd	r31, Y+2	; 0x02
    3606:	22 81       	ldd	r18, Z+2	; 0x02
    3608:	9b 81       	ldd	r25, Y+3	; 0x03
    360a:	8c 81       	ldd	r24, Y+4	; 0x04
    360c:	89 23       	and	r24, r25
    360e:	82 2b       	or	r24, r18
    3610:	e9 81       	ldd	r30, Y+1	; 0x01
    3612:	fa 81       	ldd	r31, Y+2	; 0x02
    3614:	82 83       	std	Z+2, r24	; 0x02
}
    3616:	0f 90       	pop	r0
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	0f 90       	pop	r0
    361e:	cf 91       	pop	r28
    3620:	df 91       	pop	r29
    3622:	08 95       	ret

00003624 <DIO_u8GetPinsValue>:
u8 		DIO_u8GetPinsValue		(DIO_T * DIOx,u8 copy_u8PinsID){
    3624:	df 93       	push	r29
    3626:	cf 93       	push	r28
    3628:	00 d0       	rcall	.+0      	; 0x362a <DIO_u8GetPinsValue+0x6>
    362a:	0f 92       	push	r0
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
    3630:	9a 83       	std	Y+2, r25	; 0x02
    3632:	89 83       	std	Y+1, r24	; 0x01
    3634:	6b 83       	std	Y+3, r22	; 0x03
	return (DIOx->PIN	& copy_u8PinsID);
    3636:	e9 81       	ldd	r30, Y+1	; 0x01
    3638:	fa 81       	ldd	r31, Y+2	; 0x02
    363a:	90 81       	ld	r25, Z
    363c:	8b 81       	ldd	r24, Y+3	; 0x03
    363e:	89 23       	and	r24, r25
}
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	0f 90       	pop	r0
    3646:	cf 91       	pop	r28
    3648:	df 91       	pop	r29
    364a:	08 95       	ret

0000364c <DIO_voidTogglePins>:
void 	DIO_voidTogglePins		(DIO_T * DIOx,u8 copy_u8PinsID){
    364c:	df 93       	push	r29
    364e:	cf 93       	push	r28
    3650:	00 d0       	rcall	.+0      	; 0x3652 <DIO_voidTogglePins+0x6>
    3652:	0f 92       	push	r0
    3654:	cd b7       	in	r28, 0x3d	; 61
    3656:	de b7       	in	r29, 0x3e	; 62
    3658:	9a 83       	std	Y+2, r25	; 0x02
    365a:	89 83       	std	Y+1, r24	; 0x01
    365c:	6b 83       	std	Y+3, r22	; 0x03
	DIOx->PORT ^= copy_u8PinsID;
    365e:	e9 81       	ldd	r30, Y+1	; 0x01
    3660:	fa 81       	ldd	r31, Y+2	; 0x02
    3662:	92 81       	ldd	r25, Z+2	; 0x02
    3664:	8b 81       	ldd	r24, Y+3	; 0x03
    3666:	89 27       	eor	r24, r25
    3668:	e9 81       	ldd	r30, Y+1	; 0x01
    366a:	fa 81       	ldd	r31, Y+2	; 0x02
    366c:	82 83       	std	Z+2, r24	; 0x02
}
    366e:	0f 90       	pop	r0
    3670:	0f 90       	pop	r0
    3672:	0f 90       	pop	r0
    3674:	cf 91       	pop	r28
    3676:	df 91       	pop	r29
    3678:	08 95       	ret

0000367a <DIO_voidSetPortValue>:
void 	DIO_voidSetPortValue	(DIO_T * DIOx,u8 copy_u8PortValue){
    367a:	df 93       	push	r29
    367c:	cf 93       	push	r28
    367e:	00 d0       	rcall	.+0      	; 0x3680 <DIO_voidSetPortValue+0x6>
    3680:	0f 92       	push	r0
    3682:	cd b7       	in	r28, 0x3d	; 61
    3684:	de b7       	in	r29, 0x3e	; 62
    3686:	9a 83       	std	Y+2, r25	; 0x02
    3688:	89 83       	std	Y+1, r24	; 0x01
    368a:	6b 83       	std	Y+3, r22	; 0x03
	DIOx->PORT=copy_u8PortValue;
    368c:	e9 81       	ldd	r30, Y+1	; 0x01
    368e:	fa 81       	ldd	r31, Y+2	; 0x02
    3690:	8b 81       	ldd	r24, Y+3	; 0x03
    3692:	82 83       	std	Z+2, r24	; 0x02
}
    3694:	0f 90       	pop	r0
    3696:	0f 90       	pop	r0
    3698:	0f 90       	pop	r0
    369a:	cf 91       	pop	r28
    369c:	df 91       	pop	r29
    369e:	08 95       	ret

000036a0 <ADC_voidini>:
#include "ADC_private.h"
#include "ADC_config.h"
#include "ADC_interface.h"


void ADC_voidini(void){
    36a0:	df 93       	push	r29
    36a2:	cf 93       	push	r28
    36a4:	cd b7       	in	r28, 0x3d	; 61
    36a6:	de b7       	in	r29, 0x3e	; 62
//Voltage Reference Selections
#if (VOLTAGE_REFERENCE == AVCC)
	CLR_BIT(ADC.ADMUX,REFS1);
    36a8:	a4 e2       	ldi	r26, 0x24	; 36
    36aa:	b0 e0       	ldi	r27, 0x00	; 0
    36ac:	e4 e2       	ldi	r30, 0x24	; 36
    36ae:	f0 e0       	ldi	r31, 0x00	; 0
    36b0:	83 81       	ldd	r24, Z+3	; 0x03
    36b2:	8f 77       	andi	r24, 0x7F	; 127
    36b4:	13 96       	adiw	r26, 0x03	; 3
    36b6:	8c 93       	st	X, r24
	SET_BIT(ADC.ADMUX,REFS0);
    36b8:	a4 e2       	ldi	r26, 0x24	; 36
    36ba:	b0 e0       	ldi	r27, 0x00	; 0
    36bc:	e4 e2       	ldi	r30, 0x24	; 36
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	83 81       	ldd	r24, Z+3	; 0x03
    36c2:	80 64       	ori	r24, 0x40	; 64
    36c4:	13 96       	adiw	r26, 0x03	; 3
    36c6:	8c 93       	st	X, r24
#elif (ADC_PRESCALER==DIVISION_4)
	CLR_BIT(ADC.ADCSRA,ADPS0);
	SET_BIT(ADC.ADCSRA,ADPS1);
	CLR_BIT(ADC.ADCSRA,ADPS2);
#elif (ADC_PRESCALER==DIVISION_8)
	SET_BIT(ADC.ADCSRA,ADPS0);
    36c8:	a4 e2       	ldi	r26, 0x24	; 36
    36ca:	b0 e0       	ldi	r27, 0x00	; 0
    36cc:	e4 e2       	ldi	r30, 0x24	; 36
    36ce:	f0 e0       	ldi	r31, 0x00	; 0
    36d0:	82 81       	ldd	r24, Z+2	; 0x02
    36d2:	81 60       	ori	r24, 0x01	; 1
    36d4:	12 96       	adiw	r26, 0x02	; 2
    36d6:	8c 93       	st	X, r24
	SET_BIT(ADC.ADCSRA,ADPS1);
    36d8:	a4 e2       	ldi	r26, 0x24	; 36
    36da:	b0 e0       	ldi	r27, 0x00	; 0
    36dc:	e4 e2       	ldi	r30, 0x24	; 36
    36de:	f0 e0       	ldi	r31, 0x00	; 0
    36e0:	82 81       	ldd	r24, Z+2	; 0x02
    36e2:	82 60       	ori	r24, 0x02	; 2
    36e4:	12 96       	adiw	r26, 0x02	; 2
    36e6:	8c 93       	st	X, r24
	CLR_BIT(ADC.ADCSRA,ADPS2);
    36e8:	a4 e2       	ldi	r26, 0x24	; 36
    36ea:	b0 e0       	ldi	r27, 0x00	; 0
    36ec:	e4 e2       	ldi	r30, 0x24	; 36
    36ee:	f0 e0       	ldi	r31, 0x00	; 0
    36f0:	82 81       	ldd	r24, Z+2	; 0x02
    36f2:	8b 7f       	andi	r24, 0xFB	; 251
    36f4:	12 96       	adiw	r26, 0x02	; 2
    36f6:	8c 93       	st	X, r24
#endif
//ADC Left Adjust Result
#if ADC_LEFT_ADJUST==ENABLE_LET_ADJUST
	SET_BIT(ADC.ADMUX, ADLAR);
#elif (ADC_LEFT_ADJUST == DISABLE_LET_ADJUST)
	CLR_BIT(ADC.ADMUX, ADLAR);
    36f8:	a4 e2       	ldi	r26, 0x24	; 36
    36fa:	b0 e0       	ldi	r27, 0x00	; 0
    36fc:	e4 e2       	ldi	r30, 0x24	; 36
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	83 81       	ldd	r24, Z+3	; 0x03
    3702:	8f 7d       	andi	r24, 0xDF	; 223
    3704:	13 96       	adiw	r26, 0x03	; 3
    3706:	8c 93       	st	X, r24
    3708:	13 97       	sbiw	r26, 0x03	; 3
#else
#error	"you dont select option for ADC Left Adjust Result"
#endif
}
    370a:	cf 91       	pop	r28
    370c:	df 91       	pop	r29
    370e:	08 95       	ret

00003710 <ADC_voidEnable>:
void ADC_voidEnable(void){
    3710:	df 93       	push	r29
    3712:	cf 93       	push	r28
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADC.ADCSRA,ADEN);
    3718:	a4 e2       	ldi	r26, 0x24	; 36
    371a:	b0 e0       	ldi	r27, 0x00	; 0
    371c:	e4 e2       	ldi	r30, 0x24	; 36
    371e:	f0 e0       	ldi	r31, 0x00	; 0
    3720:	82 81       	ldd	r24, Z+2	; 0x02
    3722:	80 68       	ori	r24, 0x80	; 128
    3724:	12 96       	adiw	r26, 0x02	; 2
    3726:	8c 93       	st	X, r24
    3728:	12 97       	sbiw	r26, 0x02	; 2
}
    372a:	cf 91       	pop	r28
    372c:	df 91       	pop	r29
    372e:	08 95       	ret

00003730 <ADC_voidDisable>:
void ADC_voidDisable(void){
    3730:	df 93       	push	r29
    3732:	cf 93       	push	r28
    3734:	cd b7       	in	r28, 0x3d	; 61
    3736:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADC.ADCSRA,ADEN);
    3738:	a4 e2       	ldi	r26, 0x24	; 36
    373a:	b0 e0       	ldi	r27, 0x00	; 0
    373c:	e4 e2       	ldi	r30, 0x24	; 36
    373e:	f0 e0       	ldi	r31, 0x00	; 0
    3740:	82 81       	ldd	r24, Z+2	; 0x02
    3742:	8f 77       	andi	r24, 0x7F	; 127
    3744:	12 96       	adiw	r26, 0x02	; 2
    3746:	8c 93       	st	X, r24
    3748:	12 97       	sbiw	r26, 0x02	; 2
}
    374a:	cf 91       	pop	r28
    374c:	df 91       	pop	r29
    374e:	08 95       	ret

00003750 <ADC_u16Conversion>:
u16  ADC_u16Conversion(Channel_T copy_Channel_TMode){
    3750:	df 93       	push	r29
    3752:	cf 93       	push	r28
    3754:	00 d0       	rcall	.+0      	; 0x3756 <ADC_u16Conversion+0x6>
    3756:	0f 92       	push	r0
    3758:	cd b7       	in	r28, 0x3d	; 61
    375a:	de b7       	in	r29, 0x3e	; 62
    375c:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_Channel_TMode){
    375e:	89 81       	ldd	r24, Y+1	; 0x01
    3760:	28 2f       	mov	r18, r24
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	3b 83       	std	Y+3, r19	; 0x03
    3766:	2a 83       	std	Y+2, r18	; 0x02
    3768:	8a 81       	ldd	r24, Y+2	; 0x02
    376a:	9b 81       	ldd	r25, Y+3	; 0x03
    376c:	84 30       	cpi	r24, 0x04	; 4
    376e:	91 05       	cpc	r25, r1
    3770:	09 f4       	brne	.+2      	; 0x3774 <ADC_u16Conversion+0x24>
    3772:	ef c0       	rjmp	.+478    	; 0x3952 <ADC_u16Conversion+0x202>
    3774:	2a 81       	ldd	r18, Y+2	; 0x02
    3776:	3b 81       	ldd	r19, Y+3	; 0x03
    3778:	25 30       	cpi	r18, 0x05	; 5
    377a:	31 05       	cpc	r19, r1
    377c:	ec f4       	brge	.+58     	; 0x37b8 <ADC_u16Conversion+0x68>
    377e:	8a 81       	ldd	r24, Y+2	; 0x02
    3780:	9b 81       	ldd	r25, Y+3	; 0x03
    3782:	81 30       	cpi	r24, 0x01	; 1
    3784:	91 05       	cpc	r25, r1
    3786:	09 f4       	brne	.+2      	; 0x378a <ADC_u16Conversion+0x3a>
    3788:	66 c0       	rjmp	.+204    	; 0x3856 <ADC_u16Conversion+0x106>
    378a:	2a 81       	ldd	r18, Y+2	; 0x02
    378c:	3b 81       	ldd	r19, Y+3	; 0x03
    378e:	22 30       	cpi	r18, 0x02	; 2
    3790:	31 05       	cpc	r19, r1
    3792:	2c f4       	brge	.+10     	; 0x379e <ADC_u16Conversion+0x4e>
    3794:	8a 81       	ldd	r24, Y+2	; 0x02
    3796:	9b 81       	ldd	r25, Y+3	; 0x03
    3798:	00 97       	sbiw	r24, 0x00	; 0
    379a:	99 f1       	breq	.+102    	; 0x3802 <ADC_u16Conversion+0xb2>
    379c:	d4 c1       	rjmp	.+936    	; 0x3b46 <ADC_u16Conversion+0x3f6>
    379e:	2a 81       	ldd	r18, Y+2	; 0x02
    37a0:	3b 81       	ldd	r19, Y+3	; 0x03
    37a2:	22 30       	cpi	r18, 0x02	; 2
    37a4:	31 05       	cpc	r19, r1
    37a6:	09 f4       	brne	.+2      	; 0x37aa <ADC_u16Conversion+0x5a>
    37a8:	80 c0       	rjmp	.+256    	; 0x38aa <ADC_u16Conversion+0x15a>
    37aa:	8a 81       	ldd	r24, Y+2	; 0x02
    37ac:	9b 81       	ldd	r25, Y+3	; 0x03
    37ae:	83 30       	cpi	r24, 0x03	; 3
    37b0:	91 05       	cpc	r25, r1
    37b2:	09 f4       	brne	.+2      	; 0x37b6 <ADC_u16Conversion+0x66>
    37b4:	a4 c0       	rjmp	.+328    	; 0x38fe <ADC_u16Conversion+0x1ae>
    37b6:	c7 c1       	rjmp	.+910    	; 0x3b46 <ADC_u16Conversion+0x3f6>
    37b8:	2a 81       	ldd	r18, Y+2	; 0x02
    37ba:	3b 81       	ldd	r19, Y+3	; 0x03
    37bc:	27 30       	cpi	r18, 0x07	; 7
    37be:	31 05       	cpc	r19, r1
    37c0:	09 f4       	brne	.+2      	; 0x37c4 <ADC_u16Conversion+0x74>
    37c2:	45 c1       	rjmp	.+650    	; 0x3a4e <ADC_u16Conversion+0x2fe>
    37c4:	8a 81       	ldd	r24, Y+2	; 0x02
    37c6:	9b 81       	ldd	r25, Y+3	; 0x03
    37c8:	88 30       	cpi	r24, 0x08	; 8
    37ca:	91 05       	cpc	r25, r1
    37cc:	6c f4       	brge	.+26     	; 0x37e8 <ADC_u16Conversion+0x98>
    37ce:	2a 81       	ldd	r18, Y+2	; 0x02
    37d0:	3b 81       	ldd	r19, Y+3	; 0x03
    37d2:	25 30       	cpi	r18, 0x05	; 5
    37d4:	31 05       	cpc	r19, r1
    37d6:	09 f4       	brne	.+2      	; 0x37da <ADC_u16Conversion+0x8a>
    37d8:	e6 c0       	rjmp	.+460    	; 0x39a6 <ADC_u16Conversion+0x256>
    37da:	8a 81       	ldd	r24, Y+2	; 0x02
    37dc:	9b 81       	ldd	r25, Y+3	; 0x03
    37de:	86 30       	cpi	r24, 0x06	; 6
    37e0:	91 05       	cpc	r25, r1
    37e2:	09 f4       	brne	.+2      	; 0x37e6 <ADC_u16Conversion+0x96>
    37e4:	0a c1       	rjmp	.+532    	; 0x39fa <ADC_u16Conversion+0x2aa>
    37e6:	af c1       	rjmp	.+862    	; 0x3b46 <ADC_u16Conversion+0x3f6>
    37e8:	2a 81       	ldd	r18, Y+2	; 0x02
    37ea:	3b 81       	ldd	r19, Y+3	; 0x03
    37ec:	28 30       	cpi	r18, 0x08	; 8
    37ee:	31 05       	cpc	r19, r1
    37f0:	09 f4       	brne	.+2      	; 0x37f4 <ADC_u16Conversion+0xa4>
    37f2:	57 c1       	rjmp	.+686    	; 0x3aa2 <ADC_u16Conversion+0x352>
    37f4:	8a 81       	ldd	r24, Y+2	; 0x02
    37f6:	9b 81       	ldd	r25, Y+3	; 0x03
    37f8:	89 30       	cpi	r24, 0x09	; 9
    37fa:	91 05       	cpc	r25, r1
    37fc:	09 f4       	brne	.+2      	; 0x3800 <ADC_u16Conversion+0xb0>
    37fe:	7b c1       	rjmp	.+758    	; 0x3af6 <ADC_u16Conversion+0x3a6>
    3800:	a2 c1       	rjmp	.+836    	; 0x3b46 <ADC_u16Conversion+0x3f6>
	case ADC0:
		CLR_BIT(ADC.ADMUX,MUX0);
    3802:	a4 e2       	ldi	r26, 0x24	; 36
    3804:	b0 e0       	ldi	r27, 0x00	; 0
    3806:	e4 e2       	ldi	r30, 0x24	; 36
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	83 81       	ldd	r24, Z+3	; 0x03
    380c:	8e 7f       	andi	r24, 0xFE	; 254
    380e:	13 96       	adiw	r26, 0x03	; 3
    3810:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX1);
    3812:	a4 e2       	ldi	r26, 0x24	; 36
    3814:	b0 e0       	ldi	r27, 0x00	; 0
    3816:	e4 e2       	ldi	r30, 0x24	; 36
    3818:	f0 e0       	ldi	r31, 0x00	; 0
    381a:	83 81       	ldd	r24, Z+3	; 0x03
    381c:	8d 7f       	andi	r24, 0xFD	; 253
    381e:	13 96       	adiw	r26, 0x03	; 3
    3820:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX2);
    3822:	a4 e2       	ldi	r26, 0x24	; 36
    3824:	b0 e0       	ldi	r27, 0x00	; 0
    3826:	e4 e2       	ldi	r30, 0x24	; 36
    3828:	f0 e0       	ldi	r31, 0x00	; 0
    382a:	83 81       	ldd	r24, Z+3	; 0x03
    382c:	8b 7f       	andi	r24, 0xFB	; 251
    382e:	13 96       	adiw	r26, 0x03	; 3
    3830:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX3);
    3832:	a4 e2       	ldi	r26, 0x24	; 36
    3834:	b0 e0       	ldi	r27, 0x00	; 0
    3836:	e4 e2       	ldi	r30, 0x24	; 36
    3838:	f0 e0       	ldi	r31, 0x00	; 0
    383a:	83 81       	ldd	r24, Z+3	; 0x03
    383c:	87 7f       	andi	r24, 0xF7	; 247
    383e:	13 96       	adiw	r26, 0x03	; 3
    3840:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX4);
    3842:	a4 e2       	ldi	r26, 0x24	; 36
    3844:	b0 e0       	ldi	r27, 0x00	; 0
    3846:	e4 e2       	ldi	r30, 0x24	; 36
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	83 81       	ldd	r24, Z+3	; 0x03
    384c:	8f 7e       	andi	r24, 0xEF	; 239
    384e:	13 96       	adiw	r26, 0x03	; 3
    3850:	8c 93       	st	X, r24
    3852:	13 97       	sbiw	r26, 0x03	; 3
    3854:	78 c1       	rjmp	.+752    	; 0x3b46 <ADC_u16Conversion+0x3f6>
		break;
	case ADC1:
		SET_BIT(ADC.ADMUX,MUX0);
    3856:	a4 e2       	ldi	r26, 0x24	; 36
    3858:	b0 e0       	ldi	r27, 0x00	; 0
    385a:	e4 e2       	ldi	r30, 0x24	; 36
    385c:	f0 e0       	ldi	r31, 0x00	; 0
    385e:	83 81       	ldd	r24, Z+3	; 0x03
    3860:	81 60       	ori	r24, 0x01	; 1
    3862:	13 96       	adiw	r26, 0x03	; 3
    3864:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX1);
    3866:	a4 e2       	ldi	r26, 0x24	; 36
    3868:	b0 e0       	ldi	r27, 0x00	; 0
    386a:	e4 e2       	ldi	r30, 0x24	; 36
    386c:	f0 e0       	ldi	r31, 0x00	; 0
    386e:	83 81       	ldd	r24, Z+3	; 0x03
    3870:	8d 7f       	andi	r24, 0xFD	; 253
    3872:	13 96       	adiw	r26, 0x03	; 3
    3874:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX2);
    3876:	a4 e2       	ldi	r26, 0x24	; 36
    3878:	b0 e0       	ldi	r27, 0x00	; 0
    387a:	e4 e2       	ldi	r30, 0x24	; 36
    387c:	f0 e0       	ldi	r31, 0x00	; 0
    387e:	83 81       	ldd	r24, Z+3	; 0x03
    3880:	8b 7f       	andi	r24, 0xFB	; 251
    3882:	13 96       	adiw	r26, 0x03	; 3
    3884:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX3);
    3886:	a4 e2       	ldi	r26, 0x24	; 36
    3888:	b0 e0       	ldi	r27, 0x00	; 0
    388a:	e4 e2       	ldi	r30, 0x24	; 36
    388c:	f0 e0       	ldi	r31, 0x00	; 0
    388e:	83 81       	ldd	r24, Z+3	; 0x03
    3890:	87 7f       	andi	r24, 0xF7	; 247
    3892:	13 96       	adiw	r26, 0x03	; 3
    3894:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX4);
    3896:	a4 e2       	ldi	r26, 0x24	; 36
    3898:	b0 e0       	ldi	r27, 0x00	; 0
    389a:	e4 e2       	ldi	r30, 0x24	; 36
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	83 81       	ldd	r24, Z+3	; 0x03
    38a0:	8f 7e       	andi	r24, 0xEF	; 239
    38a2:	13 96       	adiw	r26, 0x03	; 3
    38a4:	8c 93       	st	X, r24
    38a6:	13 97       	sbiw	r26, 0x03	; 3
    38a8:	4e c1       	rjmp	.+668    	; 0x3b46 <ADC_u16Conversion+0x3f6>
			break;
	case ADC2:
		CLR_BIT(ADC.ADMUX,MUX0);
    38aa:	a4 e2       	ldi	r26, 0x24	; 36
    38ac:	b0 e0       	ldi	r27, 0x00	; 0
    38ae:	e4 e2       	ldi	r30, 0x24	; 36
    38b0:	f0 e0       	ldi	r31, 0x00	; 0
    38b2:	83 81       	ldd	r24, Z+3	; 0x03
    38b4:	8e 7f       	andi	r24, 0xFE	; 254
    38b6:	13 96       	adiw	r26, 0x03	; 3
    38b8:	8c 93       	st	X, r24
		SET_BIT(ADC.ADMUX,MUX1);
    38ba:	a4 e2       	ldi	r26, 0x24	; 36
    38bc:	b0 e0       	ldi	r27, 0x00	; 0
    38be:	e4 e2       	ldi	r30, 0x24	; 36
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	83 81       	ldd	r24, Z+3	; 0x03
    38c4:	82 60       	ori	r24, 0x02	; 2
    38c6:	13 96       	adiw	r26, 0x03	; 3
    38c8:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX2);
    38ca:	a4 e2       	ldi	r26, 0x24	; 36
    38cc:	b0 e0       	ldi	r27, 0x00	; 0
    38ce:	e4 e2       	ldi	r30, 0x24	; 36
    38d0:	f0 e0       	ldi	r31, 0x00	; 0
    38d2:	83 81       	ldd	r24, Z+3	; 0x03
    38d4:	8b 7f       	andi	r24, 0xFB	; 251
    38d6:	13 96       	adiw	r26, 0x03	; 3
    38d8:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX3);
    38da:	a4 e2       	ldi	r26, 0x24	; 36
    38dc:	b0 e0       	ldi	r27, 0x00	; 0
    38de:	e4 e2       	ldi	r30, 0x24	; 36
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	83 81       	ldd	r24, Z+3	; 0x03
    38e4:	87 7f       	andi	r24, 0xF7	; 247
    38e6:	13 96       	adiw	r26, 0x03	; 3
    38e8:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX4);
    38ea:	a4 e2       	ldi	r26, 0x24	; 36
    38ec:	b0 e0       	ldi	r27, 0x00	; 0
    38ee:	e4 e2       	ldi	r30, 0x24	; 36
    38f0:	f0 e0       	ldi	r31, 0x00	; 0
    38f2:	83 81       	ldd	r24, Z+3	; 0x03
    38f4:	8f 7e       	andi	r24, 0xEF	; 239
    38f6:	13 96       	adiw	r26, 0x03	; 3
    38f8:	8c 93       	st	X, r24
    38fa:	13 97       	sbiw	r26, 0x03	; 3
    38fc:	24 c1       	rjmp	.+584    	; 0x3b46 <ADC_u16Conversion+0x3f6>
			break;
	case ADC3:
		SET_BIT(ADC.ADMUX,MUX0);
    38fe:	a4 e2       	ldi	r26, 0x24	; 36
    3900:	b0 e0       	ldi	r27, 0x00	; 0
    3902:	e4 e2       	ldi	r30, 0x24	; 36
    3904:	f0 e0       	ldi	r31, 0x00	; 0
    3906:	83 81       	ldd	r24, Z+3	; 0x03
    3908:	81 60       	ori	r24, 0x01	; 1
    390a:	13 96       	adiw	r26, 0x03	; 3
    390c:	8c 93       	st	X, r24
		SET_BIT(ADC.ADMUX,MUX1);
    390e:	a4 e2       	ldi	r26, 0x24	; 36
    3910:	b0 e0       	ldi	r27, 0x00	; 0
    3912:	e4 e2       	ldi	r30, 0x24	; 36
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	83 81       	ldd	r24, Z+3	; 0x03
    3918:	82 60       	ori	r24, 0x02	; 2
    391a:	13 96       	adiw	r26, 0x03	; 3
    391c:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX2);
    391e:	a4 e2       	ldi	r26, 0x24	; 36
    3920:	b0 e0       	ldi	r27, 0x00	; 0
    3922:	e4 e2       	ldi	r30, 0x24	; 36
    3924:	f0 e0       	ldi	r31, 0x00	; 0
    3926:	83 81       	ldd	r24, Z+3	; 0x03
    3928:	8b 7f       	andi	r24, 0xFB	; 251
    392a:	13 96       	adiw	r26, 0x03	; 3
    392c:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX3);
    392e:	a4 e2       	ldi	r26, 0x24	; 36
    3930:	b0 e0       	ldi	r27, 0x00	; 0
    3932:	e4 e2       	ldi	r30, 0x24	; 36
    3934:	f0 e0       	ldi	r31, 0x00	; 0
    3936:	83 81       	ldd	r24, Z+3	; 0x03
    3938:	87 7f       	andi	r24, 0xF7	; 247
    393a:	13 96       	adiw	r26, 0x03	; 3
    393c:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX4);
    393e:	a4 e2       	ldi	r26, 0x24	; 36
    3940:	b0 e0       	ldi	r27, 0x00	; 0
    3942:	e4 e2       	ldi	r30, 0x24	; 36
    3944:	f0 e0       	ldi	r31, 0x00	; 0
    3946:	83 81       	ldd	r24, Z+3	; 0x03
    3948:	8f 7e       	andi	r24, 0xEF	; 239
    394a:	13 96       	adiw	r26, 0x03	; 3
    394c:	8c 93       	st	X, r24
    394e:	13 97       	sbiw	r26, 0x03	; 3
    3950:	fa c0       	rjmp	.+500    	; 0x3b46 <ADC_u16Conversion+0x3f6>
			break;
	case ADC4:
		CLR_BIT(ADC.ADMUX,MUX0);
    3952:	a4 e2       	ldi	r26, 0x24	; 36
    3954:	b0 e0       	ldi	r27, 0x00	; 0
    3956:	e4 e2       	ldi	r30, 0x24	; 36
    3958:	f0 e0       	ldi	r31, 0x00	; 0
    395a:	83 81       	ldd	r24, Z+3	; 0x03
    395c:	8e 7f       	andi	r24, 0xFE	; 254
    395e:	13 96       	adiw	r26, 0x03	; 3
    3960:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX1);
    3962:	a4 e2       	ldi	r26, 0x24	; 36
    3964:	b0 e0       	ldi	r27, 0x00	; 0
    3966:	e4 e2       	ldi	r30, 0x24	; 36
    3968:	f0 e0       	ldi	r31, 0x00	; 0
    396a:	83 81       	ldd	r24, Z+3	; 0x03
    396c:	8d 7f       	andi	r24, 0xFD	; 253
    396e:	13 96       	adiw	r26, 0x03	; 3
    3970:	8c 93       	st	X, r24
		SET_BIT(ADC.ADMUX,MUX2);
    3972:	a4 e2       	ldi	r26, 0x24	; 36
    3974:	b0 e0       	ldi	r27, 0x00	; 0
    3976:	e4 e2       	ldi	r30, 0x24	; 36
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	83 81       	ldd	r24, Z+3	; 0x03
    397c:	84 60       	ori	r24, 0x04	; 4
    397e:	13 96       	adiw	r26, 0x03	; 3
    3980:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX3);
    3982:	a4 e2       	ldi	r26, 0x24	; 36
    3984:	b0 e0       	ldi	r27, 0x00	; 0
    3986:	e4 e2       	ldi	r30, 0x24	; 36
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	83 81       	ldd	r24, Z+3	; 0x03
    398c:	87 7f       	andi	r24, 0xF7	; 247
    398e:	13 96       	adiw	r26, 0x03	; 3
    3990:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX4);
    3992:	a4 e2       	ldi	r26, 0x24	; 36
    3994:	b0 e0       	ldi	r27, 0x00	; 0
    3996:	e4 e2       	ldi	r30, 0x24	; 36
    3998:	f0 e0       	ldi	r31, 0x00	; 0
    399a:	83 81       	ldd	r24, Z+3	; 0x03
    399c:	8f 7e       	andi	r24, 0xEF	; 239
    399e:	13 96       	adiw	r26, 0x03	; 3
    39a0:	8c 93       	st	X, r24
    39a2:	13 97       	sbiw	r26, 0x03	; 3
    39a4:	d0 c0       	rjmp	.+416    	; 0x3b46 <ADC_u16Conversion+0x3f6>
			break;
	case ADC5:
		SET_BIT(ADC.ADMUX,MUX0);
    39a6:	a4 e2       	ldi	r26, 0x24	; 36
    39a8:	b0 e0       	ldi	r27, 0x00	; 0
    39aa:	e4 e2       	ldi	r30, 0x24	; 36
    39ac:	f0 e0       	ldi	r31, 0x00	; 0
    39ae:	83 81       	ldd	r24, Z+3	; 0x03
    39b0:	81 60       	ori	r24, 0x01	; 1
    39b2:	13 96       	adiw	r26, 0x03	; 3
    39b4:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX1);
    39b6:	a4 e2       	ldi	r26, 0x24	; 36
    39b8:	b0 e0       	ldi	r27, 0x00	; 0
    39ba:	e4 e2       	ldi	r30, 0x24	; 36
    39bc:	f0 e0       	ldi	r31, 0x00	; 0
    39be:	83 81       	ldd	r24, Z+3	; 0x03
    39c0:	8d 7f       	andi	r24, 0xFD	; 253
    39c2:	13 96       	adiw	r26, 0x03	; 3
    39c4:	8c 93       	st	X, r24
		SET_BIT(ADC.ADMUX,MUX2);
    39c6:	a4 e2       	ldi	r26, 0x24	; 36
    39c8:	b0 e0       	ldi	r27, 0x00	; 0
    39ca:	e4 e2       	ldi	r30, 0x24	; 36
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	83 81       	ldd	r24, Z+3	; 0x03
    39d0:	84 60       	ori	r24, 0x04	; 4
    39d2:	13 96       	adiw	r26, 0x03	; 3
    39d4:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX3);
    39d6:	a4 e2       	ldi	r26, 0x24	; 36
    39d8:	b0 e0       	ldi	r27, 0x00	; 0
    39da:	e4 e2       	ldi	r30, 0x24	; 36
    39dc:	f0 e0       	ldi	r31, 0x00	; 0
    39de:	83 81       	ldd	r24, Z+3	; 0x03
    39e0:	87 7f       	andi	r24, 0xF7	; 247
    39e2:	13 96       	adiw	r26, 0x03	; 3
    39e4:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX4);
    39e6:	a4 e2       	ldi	r26, 0x24	; 36
    39e8:	b0 e0       	ldi	r27, 0x00	; 0
    39ea:	e4 e2       	ldi	r30, 0x24	; 36
    39ec:	f0 e0       	ldi	r31, 0x00	; 0
    39ee:	83 81       	ldd	r24, Z+3	; 0x03
    39f0:	8f 7e       	andi	r24, 0xEF	; 239
    39f2:	13 96       	adiw	r26, 0x03	; 3
    39f4:	8c 93       	st	X, r24
    39f6:	13 97       	sbiw	r26, 0x03	; 3
    39f8:	a6 c0       	rjmp	.+332    	; 0x3b46 <ADC_u16Conversion+0x3f6>
			break;
	case ADC6:
		CLR_BIT(ADC.ADMUX,MUX0);
    39fa:	a4 e2       	ldi	r26, 0x24	; 36
    39fc:	b0 e0       	ldi	r27, 0x00	; 0
    39fe:	e4 e2       	ldi	r30, 0x24	; 36
    3a00:	f0 e0       	ldi	r31, 0x00	; 0
    3a02:	83 81       	ldd	r24, Z+3	; 0x03
    3a04:	8e 7f       	andi	r24, 0xFE	; 254
    3a06:	13 96       	adiw	r26, 0x03	; 3
    3a08:	8c 93       	st	X, r24
		SET_BIT(ADC.ADMUX,MUX1);
    3a0a:	a4 e2       	ldi	r26, 0x24	; 36
    3a0c:	b0 e0       	ldi	r27, 0x00	; 0
    3a0e:	e4 e2       	ldi	r30, 0x24	; 36
    3a10:	f0 e0       	ldi	r31, 0x00	; 0
    3a12:	83 81       	ldd	r24, Z+3	; 0x03
    3a14:	82 60       	ori	r24, 0x02	; 2
    3a16:	13 96       	adiw	r26, 0x03	; 3
    3a18:	8c 93       	st	X, r24
		SET_BIT(ADC.ADMUX,MUX2);
    3a1a:	a4 e2       	ldi	r26, 0x24	; 36
    3a1c:	b0 e0       	ldi	r27, 0x00	; 0
    3a1e:	e4 e2       	ldi	r30, 0x24	; 36
    3a20:	f0 e0       	ldi	r31, 0x00	; 0
    3a22:	83 81       	ldd	r24, Z+3	; 0x03
    3a24:	84 60       	ori	r24, 0x04	; 4
    3a26:	13 96       	adiw	r26, 0x03	; 3
    3a28:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX3);
    3a2a:	a4 e2       	ldi	r26, 0x24	; 36
    3a2c:	b0 e0       	ldi	r27, 0x00	; 0
    3a2e:	e4 e2       	ldi	r30, 0x24	; 36
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	83 81       	ldd	r24, Z+3	; 0x03
    3a34:	87 7f       	andi	r24, 0xF7	; 247
    3a36:	13 96       	adiw	r26, 0x03	; 3
    3a38:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX4);
    3a3a:	a4 e2       	ldi	r26, 0x24	; 36
    3a3c:	b0 e0       	ldi	r27, 0x00	; 0
    3a3e:	e4 e2       	ldi	r30, 0x24	; 36
    3a40:	f0 e0       	ldi	r31, 0x00	; 0
    3a42:	83 81       	ldd	r24, Z+3	; 0x03
    3a44:	8f 7e       	andi	r24, 0xEF	; 239
    3a46:	13 96       	adiw	r26, 0x03	; 3
    3a48:	8c 93       	st	X, r24
    3a4a:	13 97       	sbiw	r26, 0x03	; 3
    3a4c:	7c c0       	rjmp	.+248    	; 0x3b46 <ADC_u16Conversion+0x3f6>
			break;
	case ADC7:
		SET_BIT(ADC.ADMUX,MUX0);
    3a4e:	a4 e2       	ldi	r26, 0x24	; 36
    3a50:	b0 e0       	ldi	r27, 0x00	; 0
    3a52:	e4 e2       	ldi	r30, 0x24	; 36
    3a54:	f0 e0       	ldi	r31, 0x00	; 0
    3a56:	83 81       	ldd	r24, Z+3	; 0x03
    3a58:	81 60       	ori	r24, 0x01	; 1
    3a5a:	13 96       	adiw	r26, 0x03	; 3
    3a5c:	8c 93       	st	X, r24
		SET_BIT(ADC.ADMUX,MUX1);
    3a5e:	a4 e2       	ldi	r26, 0x24	; 36
    3a60:	b0 e0       	ldi	r27, 0x00	; 0
    3a62:	e4 e2       	ldi	r30, 0x24	; 36
    3a64:	f0 e0       	ldi	r31, 0x00	; 0
    3a66:	83 81       	ldd	r24, Z+3	; 0x03
    3a68:	82 60       	ori	r24, 0x02	; 2
    3a6a:	13 96       	adiw	r26, 0x03	; 3
    3a6c:	8c 93       	st	X, r24
		SET_BIT(ADC.ADMUX,MUX2);
    3a6e:	a4 e2       	ldi	r26, 0x24	; 36
    3a70:	b0 e0       	ldi	r27, 0x00	; 0
    3a72:	e4 e2       	ldi	r30, 0x24	; 36
    3a74:	f0 e0       	ldi	r31, 0x00	; 0
    3a76:	83 81       	ldd	r24, Z+3	; 0x03
    3a78:	84 60       	ori	r24, 0x04	; 4
    3a7a:	13 96       	adiw	r26, 0x03	; 3
    3a7c:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX3);
    3a7e:	a4 e2       	ldi	r26, 0x24	; 36
    3a80:	b0 e0       	ldi	r27, 0x00	; 0
    3a82:	e4 e2       	ldi	r30, 0x24	; 36
    3a84:	f0 e0       	ldi	r31, 0x00	; 0
    3a86:	83 81       	ldd	r24, Z+3	; 0x03
    3a88:	87 7f       	andi	r24, 0xF7	; 247
    3a8a:	13 96       	adiw	r26, 0x03	; 3
    3a8c:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX4);
    3a8e:	a4 e2       	ldi	r26, 0x24	; 36
    3a90:	b0 e0       	ldi	r27, 0x00	; 0
    3a92:	e4 e2       	ldi	r30, 0x24	; 36
    3a94:	f0 e0       	ldi	r31, 0x00	; 0
    3a96:	83 81       	ldd	r24, Z+3	; 0x03
    3a98:	8f 7e       	andi	r24, 0xEF	; 239
    3a9a:	13 96       	adiw	r26, 0x03	; 3
    3a9c:	8c 93       	st	X, r24
    3a9e:	13 97       	sbiw	r26, 0x03	; 3
    3aa0:	52 c0       	rjmp	.+164    	; 0x3b46 <ADC_u16Conversion+0x3f6>
			break;
	case ADC1_ADC2:
		SET_BIT(ADC.ADMUX,MUX0);
    3aa2:	a4 e2       	ldi	r26, 0x24	; 36
    3aa4:	b0 e0       	ldi	r27, 0x00	; 0
    3aa6:	e4 e2       	ldi	r30, 0x24	; 36
    3aa8:	f0 e0       	ldi	r31, 0x00	; 0
    3aaa:	83 81       	ldd	r24, Z+3	; 0x03
    3aac:	81 60       	ori	r24, 0x01	; 1
    3aae:	13 96       	adiw	r26, 0x03	; 3
    3ab0:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX1);
    3ab2:	a4 e2       	ldi	r26, 0x24	; 36
    3ab4:	b0 e0       	ldi	r27, 0x00	; 0
    3ab6:	e4 e2       	ldi	r30, 0x24	; 36
    3ab8:	f0 e0       	ldi	r31, 0x00	; 0
    3aba:	83 81       	ldd	r24, Z+3	; 0x03
    3abc:	8d 7f       	andi	r24, 0xFD	; 253
    3abe:	13 96       	adiw	r26, 0x03	; 3
    3ac0:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX2);
    3ac2:	a4 e2       	ldi	r26, 0x24	; 36
    3ac4:	b0 e0       	ldi	r27, 0x00	; 0
    3ac6:	e4 e2       	ldi	r30, 0x24	; 36
    3ac8:	f0 e0       	ldi	r31, 0x00	; 0
    3aca:	83 81       	ldd	r24, Z+3	; 0x03
    3acc:	8b 7f       	andi	r24, 0xFB	; 251
    3ace:	13 96       	adiw	r26, 0x03	; 3
    3ad0:	8c 93       	st	X, r24
		SET_BIT(ADC.ADMUX,MUX3);
    3ad2:	a4 e2       	ldi	r26, 0x24	; 36
    3ad4:	b0 e0       	ldi	r27, 0x00	; 0
    3ad6:	e4 e2       	ldi	r30, 0x24	; 36
    3ad8:	f0 e0       	ldi	r31, 0x00	; 0
    3ada:	83 81       	ldd	r24, Z+3	; 0x03
    3adc:	88 60       	ori	r24, 0x08	; 8
    3ade:	13 96       	adiw	r26, 0x03	; 3
    3ae0:	8c 93       	st	X, r24
		SET_BIT(ADC.ADMUX,MUX4);
    3ae2:	a4 e2       	ldi	r26, 0x24	; 36
    3ae4:	b0 e0       	ldi	r27, 0x00	; 0
    3ae6:	e4 e2       	ldi	r30, 0x24	; 36
    3ae8:	f0 e0       	ldi	r31, 0x00	; 0
    3aea:	83 81       	ldd	r24, Z+3	; 0x03
    3aec:	80 61       	ori	r24, 0x10	; 16
    3aee:	13 96       	adiw	r26, 0x03	; 3
    3af0:	8c 93       	st	X, r24
    3af2:	13 97       	sbiw	r26, 0x03	; 3
    3af4:	28 c0       	rjmp	.+80     	; 0x3b46 <ADC_u16Conversion+0x3f6>
			break;
	case ADC2_ADC1:
		CLR_BIT(ADC.ADMUX,MUX0);
    3af6:	a4 e2       	ldi	r26, 0x24	; 36
    3af8:	b0 e0       	ldi	r27, 0x00	; 0
    3afa:	e4 e2       	ldi	r30, 0x24	; 36
    3afc:	f0 e0       	ldi	r31, 0x00	; 0
    3afe:	83 81       	ldd	r24, Z+3	; 0x03
    3b00:	8e 7f       	andi	r24, 0xFE	; 254
    3b02:	13 96       	adiw	r26, 0x03	; 3
    3b04:	8c 93       	st	X, r24
		SET_BIT(ADC.ADMUX,MUX1);
    3b06:	a4 e2       	ldi	r26, 0x24	; 36
    3b08:	b0 e0       	ldi	r27, 0x00	; 0
    3b0a:	e4 e2       	ldi	r30, 0x24	; 36
    3b0c:	f0 e0       	ldi	r31, 0x00	; 0
    3b0e:	83 81       	ldd	r24, Z+3	; 0x03
    3b10:	82 60       	ori	r24, 0x02	; 2
    3b12:	13 96       	adiw	r26, 0x03	; 3
    3b14:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX2);
    3b16:	a4 e2       	ldi	r26, 0x24	; 36
    3b18:	b0 e0       	ldi	r27, 0x00	; 0
    3b1a:	e4 e2       	ldi	r30, 0x24	; 36
    3b1c:	f0 e0       	ldi	r31, 0x00	; 0
    3b1e:	83 81       	ldd	r24, Z+3	; 0x03
    3b20:	8b 7f       	andi	r24, 0xFB	; 251
    3b22:	13 96       	adiw	r26, 0x03	; 3
    3b24:	8c 93       	st	X, r24
		CLR_BIT(ADC.ADMUX,MUX3);
    3b26:	a4 e2       	ldi	r26, 0x24	; 36
    3b28:	b0 e0       	ldi	r27, 0x00	; 0
    3b2a:	e4 e2       	ldi	r30, 0x24	; 36
    3b2c:	f0 e0       	ldi	r31, 0x00	; 0
    3b2e:	83 81       	ldd	r24, Z+3	; 0x03
    3b30:	87 7f       	andi	r24, 0xF7	; 247
    3b32:	13 96       	adiw	r26, 0x03	; 3
    3b34:	8c 93       	st	X, r24
		SET_BIT(ADC.ADMUX,MUX4);
    3b36:	a4 e2       	ldi	r26, 0x24	; 36
    3b38:	b0 e0       	ldi	r27, 0x00	; 0
    3b3a:	e4 e2       	ldi	r30, 0x24	; 36
    3b3c:	f0 e0       	ldi	r31, 0x00	; 0
    3b3e:	83 81       	ldd	r24, Z+3	; 0x03
    3b40:	80 61       	ori	r24, 0x10	; 16
    3b42:	13 96       	adiw	r26, 0x03	; 3
    3b44:	8c 93       	st	X, r24
			break;
	default:
		break;
	}
	SET_BIT(ADC.ADCSRA,ADSC);
    3b46:	a4 e2       	ldi	r26, 0x24	; 36
    3b48:	b0 e0       	ldi	r27, 0x00	; 0
    3b4a:	e4 e2       	ldi	r30, 0x24	; 36
    3b4c:	f0 e0       	ldi	r31, 0x00	; 0
    3b4e:	82 81       	ldd	r24, Z+2	; 0x02
    3b50:	80 64       	ori	r24, 0x40	; 64
    3b52:	12 96       	adiw	r26, 0x02	; 2
    3b54:	8c 93       	st	X, r24
    3b56:	12 97       	sbiw	r26, 0x02	; 2
	while(GET_BIT(ADC.ADCSRA, ADIF)==0);
    3b58:	e4 e2       	ldi	r30, 0x24	; 36
    3b5a:	f0 e0       	ldi	r31, 0x00	; 0
    3b5c:	82 81       	ldd	r24, Z+2	; 0x02
    3b5e:	82 95       	swap	r24
    3b60:	8f 70       	andi	r24, 0x0F	; 15
    3b62:	88 2f       	mov	r24, r24
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	81 70       	andi	r24, 0x01	; 1
    3b68:	90 70       	andi	r25, 0x00	; 0
    3b6a:	00 97       	sbiw	r24, 0x00	; 0
    3b6c:	a9 f3       	breq	.-22     	; 0x3b58 <ADC_u16Conversion+0x408>
	SET_BIT(ADC.ADCSRA, ADIF);
    3b6e:	a4 e2       	ldi	r26, 0x24	; 36
    3b70:	b0 e0       	ldi	r27, 0x00	; 0
    3b72:	e4 e2       	ldi	r30, 0x24	; 36
    3b74:	f0 e0       	ldi	r31, 0x00	; 0
    3b76:	82 81       	ldd	r24, Z+2	; 0x02
    3b78:	80 61       	ori	r24, 0x10	; 16
    3b7a:	12 96       	adiw	r26, 0x02	; 2
    3b7c:	8c 93       	st	X, r24
    3b7e:	12 97       	sbiw	r26, 0x02	; 2
	return (ADC.ADCD);
    3b80:	e4 e2       	ldi	r30, 0x24	; 36
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	80 81       	ld	r24, Z
    3b86:	91 81       	ldd	r25, Z+1	; 0x01
}
    3b88:	0f 90       	pop	r0
    3b8a:	0f 90       	pop	r0
    3b8c:	0f 90       	pop	r0
    3b8e:	cf 91       	pop	r28
    3b90:	df 91       	pop	r29
    3b92:	08 95       	ret

00003b94 <Servo_voidini>:
#include "../../03-MCAL/TIM/TIM_interface.h"
#include "Servo.h"
#include <avr/io.h>


void Servo_voidini(void){
    3b94:	df 93       	push	r29
    3b96:	cf 93       	push	r28
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
	TIM_voidIni(TIM1);
    3b9c:	81 e0       	ldi	r24, 0x01	; 1
    3b9e:	0e 94 ab 0b 	call	0x1756	; 0x1756 <TIM_voidIni>
	TIM_voidSetComperMatch(ICR, 20000);
    3ba2:	84 e0       	ldi	r24, 0x04	; 4
    3ba4:	60 e2       	ldi	r22, 0x20	; 32
    3ba6:	7e e4       	ldi	r23, 0x4E	; 78
    3ba8:	0e 94 fd 11 	call	0x23fa	; 0x23fa <TIM_voidSetComperMatch>
	TIM_voidStart(TIM1, TIMS_DIVISION_8);
    3bac:	81 e0       	ldi	r24, 0x01	; 1
    3bae:	62 e0       	ldi	r22, 0x02	; 2
    3bb0:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <TIM_voidStart>
	DDRD |= 0x20;
    3bb4:	a1 e3       	ldi	r26, 0x31	; 49
    3bb6:	b0 e0       	ldi	r27, 0x00	; 0
    3bb8:	e1 e3       	ldi	r30, 0x31	; 49
    3bba:	f0 e0       	ldi	r31, 0x00	; 0
    3bbc:	80 81       	ld	r24, Z
    3bbe:	80 62       	ori	r24, 0x20	; 32
    3bc0:	8c 93       	st	X, r24
}
    3bc2:	cf 91       	pop	r28
    3bc4:	df 91       	pop	r29
    3bc6:	08 95       	ret

00003bc8 <Servo_voidMoveToLocation>:

void Servo_voidMoveToLocation(u8 copy_u8Location){
    3bc8:	df 93       	push	r29
    3bca:	cf 93       	push	r28
    3bcc:	00 d0       	rcall	.+0      	; 0x3bce <Servo_voidMoveToLocation+0x6>
    3bce:	00 d0       	rcall	.+0      	; 0x3bd0 <Servo_voidMoveToLocation+0x8>
    3bd0:	0f 92       	push	r0
    3bd2:	cd b7       	in	r28, 0x3d	; 61
    3bd4:	de b7       	in	r29, 0x3e	; 62
    3bd6:	8d 83       	std	Y+5, r24	; 0x05
	f32 local_f32DC = (((f32)copy_u8Location/180 ) * 5) + 5;
    3bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bda:	88 2f       	mov	r24, r24
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	a0 e0       	ldi	r26, 0x00	; 0
    3be0:	b0 e0       	ldi	r27, 0x00	; 0
    3be2:	bc 01       	movw	r22, r24
    3be4:	cd 01       	movw	r24, r26
    3be6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3bea:	dc 01       	movw	r26, r24
    3bec:	cb 01       	movw	r24, r22
    3bee:	bc 01       	movw	r22, r24
    3bf0:	cd 01       	movw	r24, r26
    3bf2:	20 e0       	ldi	r18, 0x00	; 0
    3bf4:	30 e0       	ldi	r19, 0x00	; 0
    3bf6:	44 e3       	ldi	r20, 0x34	; 52
    3bf8:	53 e4       	ldi	r21, 0x43	; 67
    3bfa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3bfe:	dc 01       	movw	r26, r24
    3c00:	cb 01       	movw	r24, r22
    3c02:	bc 01       	movw	r22, r24
    3c04:	cd 01       	movw	r24, r26
    3c06:	20 e0       	ldi	r18, 0x00	; 0
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	40 ea       	ldi	r20, 0xA0	; 160
    3c0c:	50 e4       	ldi	r21, 0x40	; 64
    3c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c12:	dc 01       	movw	r26, r24
    3c14:	cb 01       	movw	r24, r22
    3c16:	bc 01       	movw	r22, r24
    3c18:	cd 01       	movw	r24, r26
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	40 ea       	ldi	r20, 0xA0	; 160
    3c20:	50 e4       	ldi	r21, 0x40	; 64
    3c22:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3c26:	dc 01       	movw	r26, r24
    3c28:	cb 01       	movw	r24, r22
    3c2a:	89 83       	std	Y+1, r24	; 0x01
    3c2c:	9a 83       	std	Y+2, r25	; 0x02
    3c2e:	ab 83       	std	Y+3, r26	; 0x03
    3c30:	bc 83       	std	Y+4, r27	; 0x04
	if(copy_u8Location >= 0 && copy_u8Location <= 100){
    3c32:	8d 81       	ldd	r24, Y+5	; 0x05
    3c34:	85 36       	cpi	r24, 0x65	; 101
    3c36:	48 f4       	brcc	.+18     	; 0x3c4a <Servo_voidMoveToLocation+0x82>
		TIM_voidSetPWMDC(OC1A, local_f32DC);
    3c38:	29 81       	ldd	r18, Y+1	; 0x01
    3c3a:	3a 81       	ldd	r19, Y+2	; 0x02
    3c3c:	4b 81       	ldd	r20, Y+3	; 0x03
    3c3e:	5c 81       	ldd	r21, Y+4	; 0x04
    3c40:	82 e0       	ldi	r24, 0x02	; 2
    3c42:	ba 01       	movw	r22, r20
    3c44:	a9 01       	movw	r20, r18
    3c46:	0e 94 33 14 	call	0x2866	; 0x2866 <TIM_voidSetPWMDC>
	}
}
    3c4a:	0f 90       	pop	r0
    3c4c:	0f 90       	pop	r0
    3c4e:	0f 90       	pop	r0
    3c50:	0f 90       	pop	r0
    3c52:	0f 90       	pop	r0
    3c54:	cf 91       	pop	r28
    3c56:	df 91       	pop	r29
    3c58:	08 95       	ret

00003c5a <STEPPER_voidini>:
		Potion_PINK_COIL,
		Potion_YELLOW_COIL,
		Potion_ORANGE_COIL
};

void STEPPER_voidini(void){
    3c5a:	df 93       	push	r29
    3c5c:	cf 93       	push	r28
    3c5e:	cd b7       	in	r28, 0x3d	; 61
    3c60:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(STEPPER_DDR,STEPPER_BLUE_PIN);
    3c62:	aa e3       	ldi	r26, 0x3A	; 58
    3c64:	b0 e0       	ldi	r27, 0x00	; 0
    3c66:	ea e3       	ldi	r30, 0x3A	; 58
    3c68:	f0 e0       	ldi	r31, 0x00	; 0
    3c6a:	80 81       	ld	r24, Z
    3c6c:	81 60       	ori	r24, 0x01	; 1
    3c6e:	8c 93       	st	X, r24
	SET_BIT(STEPPER_DDR,STEPPER_PINK_PIN);
    3c70:	aa e3       	ldi	r26, 0x3A	; 58
    3c72:	b0 e0       	ldi	r27, 0x00	; 0
    3c74:	ea e3       	ldi	r30, 0x3A	; 58
    3c76:	f0 e0       	ldi	r31, 0x00	; 0
    3c78:	80 81       	ld	r24, Z
    3c7a:	82 60       	ori	r24, 0x02	; 2
    3c7c:	8c 93       	st	X, r24
	SET_BIT(STEPPER_DDR,STEPPER_YELLOW_PIN);
    3c7e:	aa e3       	ldi	r26, 0x3A	; 58
    3c80:	b0 e0       	ldi	r27, 0x00	; 0
    3c82:	ea e3       	ldi	r30, 0x3A	; 58
    3c84:	f0 e0       	ldi	r31, 0x00	; 0
    3c86:	80 81       	ld	r24, Z
    3c88:	84 60       	ori	r24, 0x04	; 4
    3c8a:	8c 93       	st	X, r24
	SET_BIT(STEPPER_DDR,STEPPER_ORANGE_PIN);
    3c8c:	aa e3       	ldi	r26, 0x3A	; 58
    3c8e:	b0 e0       	ldi	r27, 0x00	; 0
    3c90:	ea e3       	ldi	r30, 0x3A	; 58
    3c92:	f0 e0       	ldi	r31, 0x00	; 0
    3c94:	80 81       	ld	r24, Z
    3c96:	88 60       	ori	r24, 0x08	; 8
    3c98:	8c 93       	st	X, r24
}
    3c9a:	cf 91       	pop	r28
    3c9c:	df 91       	pop	r29
    3c9e:	08 95       	ret

00003ca0 <STEPPER_voidGoToPotion>:
void STEPPER_voidGoToPotion(u8 copy_u8Potion){
    3ca0:	df 93       	push	r29
    3ca2:	cf 93       	push	r28
    3ca4:	cd b7       	in	r28, 0x3d	; 61
    3ca6:	de b7       	in	r29, 0x3e	; 62
    3ca8:	61 97       	sbiw	r28, 0x11	; 17
    3caa:	0f b6       	in	r0, 0x3f	; 63
    3cac:	f8 94       	cli
    3cae:	de bf       	out	0x3e, r29	; 62
    3cb0:	0f be       	out	0x3f, r0	; 63
    3cb2:	cd bf       	out	0x3d, r28	; 61
    3cb4:	8f 87       	std	Y+15, r24	; 0x0f
	switch(copy_u8Potion){
    3cb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cb8:	28 2f       	mov	r18, r24
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	39 8b       	std	Y+17, r19	; 0x11
    3cbe:	28 8b       	std	Y+16, r18	; 0x10
    3cc0:	88 89       	ldd	r24, Y+16	; 0x10
    3cc2:	99 89       	ldd	r25, Y+17	; 0x11
    3cc4:	84 30       	cpi	r24, 0x04	; 4
    3cc6:	91 05       	cpc	r25, r1
    3cc8:	09 f4       	brne	.+2      	; 0x3ccc <STEPPER_voidGoToPotion+0x2c>
    3cca:	87 c0       	rjmp	.+270    	; 0x3dda <STEPPER_voidGoToPotion+0x13a>
    3ccc:	28 89       	ldd	r18, Y+16	; 0x10
    3cce:	39 89       	ldd	r19, Y+17	; 0x11
    3cd0:	25 30       	cpi	r18, 0x05	; 5
    3cd2:	31 05       	cpc	r19, r1
    3cd4:	94 f4       	brge	.+36     	; 0x3cfa <STEPPER_voidGoToPotion+0x5a>
    3cd6:	88 89       	ldd	r24, Y+16	; 0x10
    3cd8:	99 89       	ldd	r25, Y+17	; 0x11
    3cda:	82 30       	cpi	r24, 0x02	; 2
    3cdc:	91 05       	cpc	r25, r1
    3cde:	09 f4       	brne	.+2      	; 0x3ce2 <STEPPER_voidGoToPotion+0x42>
    3ce0:	42 c0       	rjmp	.+132    	; 0x3d66 <STEPPER_voidGoToPotion+0xc6>
    3ce2:	28 89       	ldd	r18, Y+16	; 0x10
    3ce4:	39 89       	ldd	r19, Y+17	; 0x11
    3ce6:	23 30       	cpi	r18, 0x03	; 3
    3ce8:	31 05       	cpc	r19, r1
    3cea:	0c f0       	brlt	.+2      	; 0x3cee <STEPPER_voidGoToPotion+0x4e>
    3cec:	59 c0       	rjmp	.+178    	; 0x3da0 <STEPPER_voidGoToPotion+0x100>
    3cee:	88 89       	ldd	r24, Y+16	; 0x10
    3cf0:	99 89       	ldd	r25, Y+17	; 0x11
    3cf2:	81 30       	cpi	r24, 0x01	; 1
    3cf4:	91 05       	cpc	r25, r1
    3cf6:	d1 f0       	breq	.+52     	; 0x3d2c <STEPPER_voidGoToPotion+0x8c>
    3cf8:	00 c1       	rjmp	.+512    	; 0x3efa <STEPPER_voidGoToPotion+0x25a>
    3cfa:	28 89       	ldd	r18, Y+16	; 0x10
    3cfc:	39 89       	ldd	r19, Y+17	; 0x11
    3cfe:	26 30       	cpi	r18, 0x06	; 6
    3d00:	31 05       	cpc	r19, r1
    3d02:	09 f4       	brne	.+2      	; 0x3d06 <STEPPER_voidGoToPotion+0x66>
    3d04:	a4 c0       	rjmp	.+328    	; 0x3e4e <STEPPER_voidGoToPotion+0x1ae>
    3d06:	88 89       	ldd	r24, Y+16	; 0x10
    3d08:	99 89       	ldd	r25, Y+17	; 0x11
    3d0a:	86 30       	cpi	r24, 0x06	; 6
    3d0c:	91 05       	cpc	r25, r1
    3d0e:	0c f4       	brge	.+2      	; 0x3d12 <STEPPER_voidGoToPotion+0x72>
    3d10:	81 c0       	rjmp	.+258    	; 0x3e14 <STEPPER_voidGoToPotion+0x174>
    3d12:	28 89       	ldd	r18, Y+16	; 0x10
    3d14:	39 89       	ldd	r19, Y+17	; 0x11
    3d16:	27 30       	cpi	r18, 0x07	; 7
    3d18:	31 05       	cpc	r19, r1
    3d1a:	09 f4       	brne	.+2      	; 0x3d1e <STEPPER_voidGoToPotion+0x7e>
    3d1c:	b5 c0       	rjmp	.+362    	; 0x3e88 <STEPPER_voidGoToPotion+0x1e8>
    3d1e:	88 89       	ldd	r24, Y+16	; 0x10
    3d20:	99 89       	ldd	r25, Y+17	; 0x11
    3d22:	88 30       	cpi	r24, 0x08	; 8
    3d24:	91 05       	cpc	r25, r1
    3d26:	09 f4       	brne	.+2      	; 0x3d2a <STEPPER_voidGoToPotion+0x8a>
    3d28:	cc c0       	rjmp	.+408    	; 0x3ec2 <STEPPER_voidGoToPotion+0x222>
    3d2a:	e7 c0       	rjmp	.+462    	; 0x3efa <STEPPER_voidGoToPotion+0x25a>
	case(Potion_BLUE_COIL):
		SET_BIT(STEPPER_PORT,STEPPER_BLUE_PIN);
    3d2c:	ab e3       	ldi	r26, 0x3B	; 59
    3d2e:	b0 e0       	ldi	r27, 0x00	; 0
    3d30:	eb e3       	ldi	r30, 0x3B	; 59
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	80 81       	ld	r24, Z
    3d36:	81 60       	ori	r24, 0x01	; 1
    3d38:	8c 93       	st	X, r24
		CLR_BIT(STEPPER_PORT,STEPPER_PINK_PIN);
    3d3a:	ab e3       	ldi	r26, 0x3B	; 59
    3d3c:	b0 e0       	ldi	r27, 0x00	; 0
    3d3e:	eb e3       	ldi	r30, 0x3B	; 59
    3d40:	f0 e0       	ldi	r31, 0x00	; 0
    3d42:	80 81       	ld	r24, Z
    3d44:	8d 7f       	andi	r24, 0xFD	; 253
    3d46:	8c 93       	st	X, r24
		CLR_BIT(STEPPER_PORT,STEPPER_YELLOW_PIN);
    3d48:	ab e3       	ldi	r26, 0x3B	; 59
    3d4a:	b0 e0       	ldi	r27, 0x00	; 0
    3d4c:	eb e3       	ldi	r30, 0x3B	; 59
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	80 81       	ld	r24, Z
    3d52:	8b 7f       	andi	r24, 0xFB	; 251
    3d54:	8c 93       	st	X, r24
		CLR_BIT(STEPPER_PORT,STEPPER_ORANGE_PIN);
    3d56:	ab e3       	ldi	r26, 0x3B	; 59
    3d58:	b0 e0       	ldi	r27, 0x00	; 0
    3d5a:	eb e3       	ldi	r30, 0x3B	; 59
    3d5c:	f0 e0       	ldi	r31, 0x00	; 0
    3d5e:	80 81       	ld	r24, Z
    3d60:	87 7f       	andi	r24, 0xF7	; 247
    3d62:	8c 93       	st	X, r24
    3d64:	ca c0       	rjmp	.+404    	; 0x3efa <STEPPER_voidGoToPotion+0x25a>

	break;
	case(Potion_BLUE_PINK_COIL):
		SET_BIT(STEPPER_PORT,STEPPER_BLUE_PIN);
    3d66:	ab e3       	ldi	r26, 0x3B	; 59
    3d68:	b0 e0       	ldi	r27, 0x00	; 0
    3d6a:	eb e3       	ldi	r30, 0x3B	; 59
    3d6c:	f0 e0       	ldi	r31, 0x00	; 0
    3d6e:	80 81       	ld	r24, Z
    3d70:	81 60       	ori	r24, 0x01	; 1
    3d72:	8c 93       	st	X, r24
		SET_BIT(STEPPER_PORT,STEPPER_PINK_PIN);
    3d74:	ab e3       	ldi	r26, 0x3B	; 59
    3d76:	b0 e0       	ldi	r27, 0x00	; 0
    3d78:	eb e3       	ldi	r30, 0x3B	; 59
    3d7a:	f0 e0       	ldi	r31, 0x00	; 0
    3d7c:	80 81       	ld	r24, Z
    3d7e:	82 60       	ori	r24, 0x02	; 2
    3d80:	8c 93       	st	X, r24
		CLR_BIT(STEPPER_PORT,STEPPER_YELLOW_PIN);
    3d82:	ab e3       	ldi	r26, 0x3B	; 59
    3d84:	b0 e0       	ldi	r27, 0x00	; 0
    3d86:	eb e3       	ldi	r30, 0x3B	; 59
    3d88:	f0 e0       	ldi	r31, 0x00	; 0
    3d8a:	80 81       	ld	r24, Z
    3d8c:	8b 7f       	andi	r24, 0xFB	; 251
    3d8e:	8c 93       	st	X, r24
		CLR_BIT(STEPPER_PORT,STEPPER_ORANGE_PIN);
    3d90:	ab e3       	ldi	r26, 0x3B	; 59
    3d92:	b0 e0       	ldi	r27, 0x00	; 0
    3d94:	eb e3       	ldi	r30, 0x3B	; 59
    3d96:	f0 e0       	ldi	r31, 0x00	; 0
    3d98:	80 81       	ld	r24, Z
    3d9a:	87 7f       	andi	r24, 0xF7	; 247
    3d9c:	8c 93       	st	X, r24
    3d9e:	ad c0       	rjmp	.+346    	; 0x3efa <STEPPER_voidGoToPotion+0x25a>
		break;
	case(Potion_PINK_COIL):
		CLR_BIT(STEPPER_PORT,STEPPER_BLUE_PIN);
    3da0:	ab e3       	ldi	r26, 0x3B	; 59
    3da2:	b0 e0       	ldi	r27, 0x00	; 0
    3da4:	eb e3       	ldi	r30, 0x3B	; 59
    3da6:	f0 e0       	ldi	r31, 0x00	; 0
    3da8:	80 81       	ld	r24, Z
    3daa:	8e 7f       	andi	r24, 0xFE	; 254
    3dac:	8c 93       	st	X, r24
		SET_BIT(STEPPER_PORT,STEPPER_PINK_PIN);
    3dae:	ab e3       	ldi	r26, 0x3B	; 59
    3db0:	b0 e0       	ldi	r27, 0x00	; 0
    3db2:	eb e3       	ldi	r30, 0x3B	; 59
    3db4:	f0 e0       	ldi	r31, 0x00	; 0
    3db6:	80 81       	ld	r24, Z
    3db8:	82 60       	ori	r24, 0x02	; 2
    3dba:	8c 93       	st	X, r24
		CLR_BIT(STEPPER_PORT,STEPPER_YELLOW_PIN);
    3dbc:	ab e3       	ldi	r26, 0x3B	; 59
    3dbe:	b0 e0       	ldi	r27, 0x00	; 0
    3dc0:	eb e3       	ldi	r30, 0x3B	; 59
    3dc2:	f0 e0       	ldi	r31, 0x00	; 0
    3dc4:	80 81       	ld	r24, Z
    3dc6:	8b 7f       	andi	r24, 0xFB	; 251
    3dc8:	8c 93       	st	X, r24
		CLR_BIT(STEPPER_PORT,STEPPER_ORANGE_PIN);
    3dca:	ab e3       	ldi	r26, 0x3B	; 59
    3dcc:	b0 e0       	ldi	r27, 0x00	; 0
    3dce:	eb e3       	ldi	r30, 0x3B	; 59
    3dd0:	f0 e0       	ldi	r31, 0x00	; 0
    3dd2:	80 81       	ld	r24, Z
    3dd4:	87 7f       	andi	r24, 0xF7	; 247
    3dd6:	8c 93       	st	X, r24
    3dd8:	90 c0       	rjmp	.+288    	; 0x3efa <STEPPER_voidGoToPotion+0x25a>
		break;
	case(Potion_PINK_YELLOW_COIL):
		CLR_BIT(STEPPER_PORT,STEPPER_BLUE_PIN);
    3dda:	ab e3       	ldi	r26, 0x3B	; 59
    3ddc:	b0 e0       	ldi	r27, 0x00	; 0
    3dde:	eb e3       	ldi	r30, 0x3B	; 59
    3de0:	f0 e0       	ldi	r31, 0x00	; 0
    3de2:	80 81       	ld	r24, Z
    3de4:	8e 7f       	andi	r24, 0xFE	; 254
    3de6:	8c 93       	st	X, r24
		SET_BIT(STEPPER_PORT,STEPPER_PINK_PIN);
    3de8:	ab e3       	ldi	r26, 0x3B	; 59
    3dea:	b0 e0       	ldi	r27, 0x00	; 0
    3dec:	eb e3       	ldi	r30, 0x3B	; 59
    3dee:	f0 e0       	ldi	r31, 0x00	; 0
    3df0:	80 81       	ld	r24, Z
    3df2:	82 60       	ori	r24, 0x02	; 2
    3df4:	8c 93       	st	X, r24
		SET_BIT(STEPPER_PORT,STEPPER_YELLOW_PIN);
    3df6:	ab e3       	ldi	r26, 0x3B	; 59
    3df8:	b0 e0       	ldi	r27, 0x00	; 0
    3dfa:	eb e3       	ldi	r30, 0x3B	; 59
    3dfc:	f0 e0       	ldi	r31, 0x00	; 0
    3dfe:	80 81       	ld	r24, Z
    3e00:	84 60       	ori	r24, 0x04	; 4
    3e02:	8c 93       	st	X, r24
		CLR_BIT(STEPPER_PORT,STEPPER_ORANGE_PIN);
    3e04:	ab e3       	ldi	r26, 0x3B	; 59
    3e06:	b0 e0       	ldi	r27, 0x00	; 0
    3e08:	eb e3       	ldi	r30, 0x3B	; 59
    3e0a:	f0 e0       	ldi	r31, 0x00	; 0
    3e0c:	80 81       	ld	r24, Z
    3e0e:	87 7f       	andi	r24, 0xF7	; 247
    3e10:	8c 93       	st	X, r24
    3e12:	73 c0       	rjmp	.+230    	; 0x3efa <STEPPER_voidGoToPotion+0x25a>
		break;
	case(Potion_YELLOW_COIL):
		CLR_BIT(STEPPER_PORT,STEPPER_BLUE_PIN);
    3e14:	ab e3       	ldi	r26, 0x3B	; 59
    3e16:	b0 e0       	ldi	r27, 0x00	; 0
    3e18:	eb e3       	ldi	r30, 0x3B	; 59
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	80 81       	ld	r24, Z
    3e1e:	8e 7f       	andi	r24, 0xFE	; 254
    3e20:	8c 93       	st	X, r24
		CLR_BIT(STEPPER_PORT,STEPPER_PINK_PIN);
    3e22:	ab e3       	ldi	r26, 0x3B	; 59
    3e24:	b0 e0       	ldi	r27, 0x00	; 0
    3e26:	eb e3       	ldi	r30, 0x3B	; 59
    3e28:	f0 e0       	ldi	r31, 0x00	; 0
    3e2a:	80 81       	ld	r24, Z
    3e2c:	8d 7f       	andi	r24, 0xFD	; 253
    3e2e:	8c 93       	st	X, r24
		SET_BIT(STEPPER_PORT,STEPPER_YELLOW_PIN);
    3e30:	ab e3       	ldi	r26, 0x3B	; 59
    3e32:	b0 e0       	ldi	r27, 0x00	; 0
    3e34:	eb e3       	ldi	r30, 0x3B	; 59
    3e36:	f0 e0       	ldi	r31, 0x00	; 0
    3e38:	80 81       	ld	r24, Z
    3e3a:	84 60       	ori	r24, 0x04	; 4
    3e3c:	8c 93       	st	X, r24
		CLR_BIT(STEPPER_PORT,STEPPER_ORANGE_PIN);
    3e3e:	ab e3       	ldi	r26, 0x3B	; 59
    3e40:	b0 e0       	ldi	r27, 0x00	; 0
    3e42:	eb e3       	ldi	r30, 0x3B	; 59
    3e44:	f0 e0       	ldi	r31, 0x00	; 0
    3e46:	80 81       	ld	r24, Z
    3e48:	87 7f       	andi	r24, 0xF7	; 247
    3e4a:	8c 93       	st	X, r24
    3e4c:	56 c0       	rjmp	.+172    	; 0x3efa <STEPPER_voidGoToPotion+0x25a>
		break;
	case(Potion_YELLOW_ORANGE_COIL):
		CLR_BIT(STEPPER_PORT,STEPPER_BLUE_PIN);
    3e4e:	ab e3       	ldi	r26, 0x3B	; 59
    3e50:	b0 e0       	ldi	r27, 0x00	; 0
    3e52:	eb e3       	ldi	r30, 0x3B	; 59
    3e54:	f0 e0       	ldi	r31, 0x00	; 0
    3e56:	80 81       	ld	r24, Z
    3e58:	8e 7f       	andi	r24, 0xFE	; 254
    3e5a:	8c 93       	st	X, r24
		CLR_BIT(STEPPER_PORT,STEPPER_PINK_PIN);
    3e5c:	ab e3       	ldi	r26, 0x3B	; 59
    3e5e:	b0 e0       	ldi	r27, 0x00	; 0
    3e60:	eb e3       	ldi	r30, 0x3B	; 59
    3e62:	f0 e0       	ldi	r31, 0x00	; 0
    3e64:	80 81       	ld	r24, Z
    3e66:	8d 7f       	andi	r24, 0xFD	; 253
    3e68:	8c 93       	st	X, r24
		SET_BIT(STEPPER_PORT,STEPPER_YELLOW_PIN);
    3e6a:	ab e3       	ldi	r26, 0x3B	; 59
    3e6c:	b0 e0       	ldi	r27, 0x00	; 0
    3e6e:	eb e3       	ldi	r30, 0x3B	; 59
    3e70:	f0 e0       	ldi	r31, 0x00	; 0
    3e72:	80 81       	ld	r24, Z
    3e74:	84 60       	ori	r24, 0x04	; 4
    3e76:	8c 93       	st	X, r24
		SET_BIT(STEPPER_PORT,STEPPER_ORANGE_PIN);
    3e78:	ab e3       	ldi	r26, 0x3B	; 59
    3e7a:	b0 e0       	ldi	r27, 0x00	; 0
    3e7c:	eb e3       	ldi	r30, 0x3B	; 59
    3e7e:	f0 e0       	ldi	r31, 0x00	; 0
    3e80:	80 81       	ld	r24, Z
    3e82:	88 60       	ori	r24, 0x08	; 8
    3e84:	8c 93       	st	X, r24
    3e86:	39 c0       	rjmp	.+114    	; 0x3efa <STEPPER_voidGoToPotion+0x25a>
		break;
	case(Potion_ORANGE_COIL):
		CLR_BIT(STEPPER_PORT,STEPPER_BLUE_PIN);
    3e88:	ab e3       	ldi	r26, 0x3B	; 59
    3e8a:	b0 e0       	ldi	r27, 0x00	; 0
    3e8c:	eb e3       	ldi	r30, 0x3B	; 59
    3e8e:	f0 e0       	ldi	r31, 0x00	; 0
    3e90:	80 81       	ld	r24, Z
    3e92:	8e 7f       	andi	r24, 0xFE	; 254
    3e94:	8c 93       	st	X, r24
		CLR_BIT(STEPPER_PORT,STEPPER_PINK_PIN);
    3e96:	ab e3       	ldi	r26, 0x3B	; 59
    3e98:	b0 e0       	ldi	r27, 0x00	; 0
    3e9a:	eb e3       	ldi	r30, 0x3B	; 59
    3e9c:	f0 e0       	ldi	r31, 0x00	; 0
    3e9e:	80 81       	ld	r24, Z
    3ea0:	8d 7f       	andi	r24, 0xFD	; 253
    3ea2:	8c 93       	st	X, r24
		CLR_BIT(STEPPER_PORT,STEPPER_YELLOW_PIN);
    3ea4:	ab e3       	ldi	r26, 0x3B	; 59
    3ea6:	b0 e0       	ldi	r27, 0x00	; 0
    3ea8:	eb e3       	ldi	r30, 0x3B	; 59
    3eaa:	f0 e0       	ldi	r31, 0x00	; 0
    3eac:	80 81       	ld	r24, Z
    3eae:	8b 7f       	andi	r24, 0xFB	; 251
    3eb0:	8c 93       	st	X, r24
		SET_BIT(STEPPER_PORT,STEPPER_ORANGE_PIN);
    3eb2:	ab e3       	ldi	r26, 0x3B	; 59
    3eb4:	b0 e0       	ldi	r27, 0x00	; 0
    3eb6:	eb e3       	ldi	r30, 0x3B	; 59
    3eb8:	f0 e0       	ldi	r31, 0x00	; 0
    3eba:	80 81       	ld	r24, Z
    3ebc:	88 60       	ori	r24, 0x08	; 8
    3ebe:	8c 93       	st	X, r24
    3ec0:	1c c0       	rjmp	.+56     	; 0x3efa <STEPPER_voidGoToPotion+0x25a>
		break;
	case(Potion_ORANGE_BLUE_COIL):
		SET_BIT(STEPPER_PORT,STEPPER_BLUE_PIN);
    3ec2:	ab e3       	ldi	r26, 0x3B	; 59
    3ec4:	b0 e0       	ldi	r27, 0x00	; 0
    3ec6:	eb e3       	ldi	r30, 0x3B	; 59
    3ec8:	f0 e0       	ldi	r31, 0x00	; 0
    3eca:	80 81       	ld	r24, Z
    3ecc:	81 60       	ori	r24, 0x01	; 1
    3ece:	8c 93       	st	X, r24
		CLR_BIT(STEPPER_PORT,STEPPER_PINK_PIN);
    3ed0:	ab e3       	ldi	r26, 0x3B	; 59
    3ed2:	b0 e0       	ldi	r27, 0x00	; 0
    3ed4:	eb e3       	ldi	r30, 0x3B	; 59
    3ed6:	f0 e0       	ldi	r31, 0x00	; 0
    3ed8:	80 81       	ld	r24, Z
    3eda:	8d 7f       	andi	r24, 0xFD	; 253
    3edc:	8c 93       	st	X, r24
		CLR_BIT(STEPPER_PORT,STEPPER_YELLOW_PIN);
    3ede:	ab e3       	ldi	r26, 0x3B	; 59
    3ee0:	b0 e0       	ldi	r27, 0x00	; 0
    3ee2:	eb e3       	ldi	r30, 0x3B	; 59
    3ee4:	f0 e0       	ldi	r31, 0x00	; 0
    3ee6:	80 81       	ld	r24, Z
    3ee8:	8b 7f       	andi	r24, 0xFB	; 251
    3eea:	8c 93       	st	X, r24
		SET_BIT(STEPPER_PORT,STEPPER_ORANGE_PIN);
    3eec:	ab e3       	ldi	r26, 0x3B	; 59
    3eee:	b0 e0       	ldi	r27, 0x00	; 0
    3ef0:	eb e3       	ldi	r30, 0x3B	; 59
    3ef2:	f0 e0       	ldi	r31, 0x00	; 0
    3ef4:	80 81       	ld	r24, Z
    3ef6:	88 60       	ori	r24, 0x08	; 8
    3ef8:	8c 93       	st	X, r24
    3efa:	80 e0       	ldi	r24, 0x00	; 0
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	aa e7       	ldi	r26, 0x7A	; 122
    3f00:	b4 e4       	ldi	r27, 0x44	; 68
    3f02:	8b 87       	std	Y+11, r24	; 0x0b
    3f04:	9c 87       	std	Y+12, r25	; 0x0c
    3f06:	ad 87       	std	Y+13, r26	; 0x0d
    3f08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f10:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f12:	20 e0       	ldi	r18, 0x00	; 0
    3f14:	30 e0       	ldi	r19, 0x00	; 0
    3f16:	4a ef       	ldi	r20, 0xFA	; 250
    3f18:	54 e4       	ldi	r21, 0x44	; 68
    3f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f1e:	dc 01       	movw	r26, r24
    3f20:	cb 01       	movw	r24, r22
    3f22:	8f 83       	std	Y+7, r24	; 0x07
    3f24:	98 87       	std	Y+8, r25	; 0x08
    3f26:	a9 87       	std	Y+9, r26	; 0x09
    3f28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    3f2c:	78 85       	ldd	r23, Y+8	; 0x08
    3f2e:	89 85       	ldd	r24, Y+9	; 0x09
    3f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f32:	20 e0       	ldi	r18, 0x00	; 0
    3f34:	30 e0       	ldi	r19, 0x00	; 0
    3f36:	40 e8       	ldi	r20, 0x80	; 128
    3f38:	5f e3       	ldi	r21, 0x3F	; 63
    3f3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f3e:	88 23       	and	r24, r24
    3f40:	2c f4       	brge	.+10     	; 0x3f4c <STEPPER_voidGoToPotion+0x2ac>
		__ticks = 1;
    3f42:	81 e0       	ldi	r24, 0x01	; 1
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	9e 83       	std	Y+6, r25	; 0x06
    3f48:	8d 83       	std	Y+5, r24	; 0x05
    3f4a:	3f c0       	rjmp	.+126    	; 0x3fca <STEPPER_voidGoToPotion+0x32a>
	else if (__tmp > 65535)
    3f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f4e:	78 85       	ldd	r23, Y+8	; 0x08
    3f50:	89 85       	ldd	r24, Y+9	; 0x09
    3f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f54:	20 e0       	ldi	r18, 0x00	; 0
    3f56:	3f ef       	ldi	r19, 0xFF	; 255
    3f58:	4f e7       	ldi	r20, 0x7F	; 127
    3f5a:	57 e4       	ldi	r21, 0x47	; 71
    3f5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f60:	18 16       	cp	r1, r24
    3f62:	4c f5       	brge	.+82     	; 0x3fb6 <STEPPER_voidGoToPotion+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f64:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f66:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f68:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f6c:	20 e0       	ldi	r18, 0x00	; 0
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	40 e2       	ldi	r20, 0x20	; 32
    3f72:	51 e4       	ldi	r21, 0x41	; 65
    3f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f78:	dc 01       	movw	r26, r24
    3f7a:	cb 01       	movw	r24, r22
    3f7c:	bc 01       	movw	r22, r24
    3f7e:	cd 01       	movw	r24, r26
    3f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f84:	dc 01       	movw	r26, r24
    3f86:	cb 01       	movw	r24, r22
    3f88:	9e 83       	std	Y+6, r25	; 0x06
    3f8a:	8d 83       	std	Y+5, r24	; 0x05
    3f8c:	0f c0       	rjmp	.+30     	; 0x3fac <STEPPER_voidGoToPotion+0x30c>
    3f8e:	88 ec       	ldi	r24, 0xC8	; 200
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	9c 83       	std	Y+4, r25	; 0x04
    3f94:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f96:	8b 81       	ldd	r24, Y+3	; 0x03
    3f98:	9c 81       	ldd	r25, Y+4	; 0x04
    3f9a:	01 97       	sbiw	r24, 0x01	; 1
    3f9c:	f1 f7       	brne	.-4      	; 0x3f9a <STEPPER_voidGoToPotion+0x2fa>
    3f9e:	9c 83       	std	Y+4, r25	; 0x04
    3fa0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fa6:	01 97       	sbiw	r24, 0x01	; 1
    3fa8:	9e 83       	std	Y+6, r25	; 0x06
    3faa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fac:	8d 81       	ldd	r24, Y+5	; 0x05
    3fae:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb0:	00 97       	sbiw	r24, 0x00	; 0
    3fb2:	69 f7       	brne	.-38     	; 0x3f8e <STEPPER_voidGoToPotion+0x2ee>
    3fb4:	14 c0       	rjmp	.+40     	; 0x3fde <STEPPER_voidGoToPotion+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fb6:	6f 81       	ldd	r22, Y+7	; 0x07
    3fb8:	78 85       	ldd	r23, Y+8	; 0x08
    3fba:	89 85       	ldd	r24, Y+9	; 0x09
    3fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc2:	dc 01       	movw	r26, r24
    3fc4:	cb 01       	movw	r24, r22
    3fc6:	9e 83       	std	Y+6, r25	; 0x06
    3fc8:	8d 83       	std	Y+5, r24	; 0x05
    3fca:	8d 81       	ldd	r24, Y+5	; 0x05
    3fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    3fce:	9a 83       	std	Y+2, r25	; 0x02
    3fd0:	89 83       	std	Y+1, r24	; 0x01
    3fd2:	89 81       	ldd	r24, Y+1	; 0x01
    3fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fd6:	01 97       	sbiw	r24, 0x01	; 1
    3fd8:	f1 f7       	brne	.-4      	; 0x3fd6 <STEPPER_voidGoToPotion+0x336>
    3fda:	9a 83       	std	Y+2, r25	; 0x02
    3fdc:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	_delay_ms((u32)1000);
}
    3fde:	61 96       	adiw	r28, 0x11	; 17
    3fe0:	0f b6       	in	r0, 0x3f	; 63
    3fe2:	f8 94       	cli
    3fe4:	de bf       	out	0x3e, r29	; 62
    3fe6:	0f be       	out	0x3f, r0	; 63
    3fe8:	cd bf       	out	0x3d, r28	; 61
    3fea:	cf 91       	pop	r28
    3fec:	df 91       	pop	r29
    3fee:	08 95       	ret

00003ff0 <STEPPER_voidRotat>:
void STEPPER_voidRotat(u8 copy_u8Dircation){
    3ff0:	df 93       	push	r29
    3ff2:	cf 93       	push	r28
    3ff4:	00 d0       	rcall	.+0      	; 0x3ff6 <STEPPER_voidRotat+0x6>
    3ff6:	0f 92       	push	r0
    3ff8:	cd b7       	in	r28, 0x3d	; 61
    3ffa:	de b7       	in	r29, 0x3e	; 62
    3ffc:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8Dircation){
    3ffe:	89 81       	ldd	r24, Y+1	; 0x01
    4000:	28 2f       	mov	r18, r24
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	3b 83       	std	Y+3, r19	; 0x03
    4006:	2a 83       	std	Y+2, r18	; 0x02
    4008:	8a 81       	ldd	r24, Y+2	; 0x02
    400a:	9b 81       	ldd	r25, Y+3	; 0x03
    400c:	00 97       	sbiw	r24, 0x00	; 0
    400e:	31 f0       	breq	.+12     	; 0x401c <STEPPER_voidRotat+0x2c>
    4010:	2a 81       	ldd	r18, Y+2	; 0x02
    4012:	3b 81       	ldd	r19, Y+3	; 0x03
    4014:	21 30       	cpi	r18, 0x01	; 1
    4016:	31 05       	cpc	r19, r1
    4018:	21 f0       	breq	.+8      	; 0x4022 <STEPPER_voidRotat+0x32>
    401a:	05 c0       	rjmp	.+10     	; 0x4026 <STEPPER_voidRotat+0x36>
	case(STEPPER_LEFT):
		STEPPER_voidMoveLeft();
    401c:	0e 94 35 20 	call	0x406a	; 0x406a <STEPPER_voidMoveLeft>
    4020:	02 c0       	rjmp	.+4      	; 0x4026 <STEPPER_voidRotat+0x36>
			break;
		case(STEPPER_RIGHT):
		STEPPER_voidMoveRight();
    4022:	0e 94 19 20 	call	0x4032	; 0x4032 <STEPPER_voidMoveRight>
			break;

	}


}
    4026:	0f 90       	pop	r0
    4028:	0f 90       	pop	r0
    402a:	0f 90       	pop	r0
    402c:	cf 91       	pop	r28
    402e:	df 91       	pop	r29
    4030:	08 95       	ret

00004032 <STEPPER_voidMoveRight>:
static void STEPPER_voidMoveRight	(void){
    4032:	df 93       	push	r29
    4034:	cf 93       	push	r28
    4036:	0f 92       	push	r0
    4038:	cd b7       	in	r28, 0x3d	; 61
    403a:	de b7       	in	r29, 0x3e	; 62
	s8 local_u8counter=0;
    403c:	19 82       	std	Y+1, r1	; 0x01
	for(local_u8counter=0;local_u8counter<NUMBER_OF_STEPS;local_u8counter++){
    403e:	19 82       	std	Y+1, r1	; 0x01
    4040:	0d c0       	rjmp	.+26     	; 0x405c <STEPPER_voidMoveRight+0x2a>
		STEPPER_voidGoToPotion(	glople_u8arraySteps[local_u8counter]);
    4042:	89 81       	ldd	r24, Y+1	; 0x01
    4044:	99 27       	eor	r25, r25
    4046:	87 fd       	sbrc	r24, 7
    4048:	90 95       	com	r25
    404a:	fc 01       	movw	r30, r24
    404c:	ea 5e       	subi	r30, 0xEA	; 234
    404e:	fd 4f       	sbci	r31, 0xFD	; 253
    4050:	80 81       	ld	r24, Z
    4052:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <STEPPER_voidGoToPotion>


}
static void STEPPER_voidMoveRight	(void){
	s8 local_u8counter=0;
	for(local_u8counter=0;local_u8counter<NUMBER_OF_STEPS;local_u8counter++){
    4056:	89 81       	ldd	r24, Y+1	; 0x01
    4058:	8f 5f       	subi	r24, 0xFF	; 255
    405a:	89 83       	std	Y+1, r24	; 0x01
    405c:	89 81       	ldd	r24, Y+1	; 0x01
    405e:	84 30       	cpi	r24, 0x04	; 4
    4060:	84 f3       	brlt	.-32     	; 0x4042 <STEPPER_voidMoveRight+0x10>
		STEPPER_voidGoToPotion(	glople_u8arraySteps[local_u8counter]);
	}

}
    4062:	0f 90       	pop	r0
    4064:	cf 91       	pop	r28
    4066:	df 91       	pop	r29
    4068:	08 95       	ret

0000406a <STEPPER_voidMoveLeft>:
static void STEPPER_voidMoveLeft	(void){
    406a:	df 93       	push	r29
    406c:	cf 93       	push	r28
    406e:	0f 92       	push	r0
    4070:	cd b7       	in	r28, 0x3d	; 61
    4072:	de b7       	in	r29, 0x3e	; 62
	s8 local_u8counter=NUMBER_OF_STEPS-1;
    4074:	83 e0       	ldi	r24, 0x03	; 3
    4076:	89 83       	std	Y+1, r24	; 0x01
	for(local_u8counter=NUMBER_OF_STEPS-1;local_u8counter>=0;local_u8counter--){
    4078:	83 e0       	ldi	r24, 0x03	; 3
    407a:	89 83       	std	Y+1, r24	; 0x01
    407c:	0d c0       	rjmp	.+26     	; 0x4098 <STEPPER_voidMoveLeft+0x2e>
			STEPPER_voidGoToPotion(	glople_u8arraySteps[local_u8counter]);
    407e:	89 81       	ldd	r24, Y+1	; 0x01
    4080:	99 27       	eor	r25, r25
    4082:	87 fd       	sbrc	r24, 7
    4084:	90 95       	com	r25
    4086:	fc 01       	movw	r30, r24
    4088:	ea 5e       	subi	r30, 0xEA	; 234
    408a:	fd 4f       	sbci	r31, 0xFD	; 253
    408c:	80 81       	ld	r24, Z
    408e:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <STEPPER_voidGoToPotion>
	}

}
static void STEPPER_voidMoveLeft	(void){
	s8 local_u8counter=NUMBER_OF_STEPS-1;
	for(local_u8counter=NUMBER_OF_STEPS-1;local_u8counter>=0;local_u8counter--){
    4092:	89 81       	ldd	r24, Y+1	; 0x01
    4094:	81 50       	subi	r24, 0x01	; 1
    4096:	89 83       	std	Y+1, r24	; 0x01
    4098:	89 81       	ldd	r24, Y+1	; 0x01
    409a:	88 23       	and	r24, r24
    409c:	84 f7       	brge	.-32     	; 0x407e <STEPPER_voidMoveLeft+0x14>
			STEPPER_voidGoToPotion(	glople_u8arraySteps[local_u8counter]);
		}
}
    409e:	0f 90       	pop	r0
    40a0:	cf 91       	pop	r28
    40a2:	df 91       	pop	r29
    40a4:	08 95       	ret

000040a6 <LCD_voidSendData>:
#include <avr/delay.h>

#include "LCD.h"


void LCD_voidSendData(u8 copy_u8Data){
    40a6:	df 93       	push	r29
    40a8:	cf 93       	push	r28
    40aa:	cd b7       	in	r28, 0x3d	; 61
    40ac:	de b7       	in	r29, 0x3e	; 62
    40ae:	6d 97       	sbiw	r28, 0x1d	; 29
    40b0:	0f b6       	in	r0, 0x3f	; 63
    40b2:	f8 94       	cli
    40b4:	de bf       	out	0x3e, r29	; 62
    40b6:	0f be       	out	0x3f, r0	; 63
    40b8:	cd bf       	out	0x3d, r28	; 61
    40ba:	8d 8f       	std	Y+29, r24	; 0x1d
	//send data make RS_PIN=1
	SET_BIT(LCD_Control_Port,LCD_RS_PIN);
    40bc:	a2 e3       	ldi	r26, 0x32	; 50
    40be:	b0 e0       	ldi	r27, 0x00	; 0
    40c0:	e2 e3       	ldi	r30, 0x32	; 50
    40c2:	f0 e0       	ldi	r31, 0x00	; 0
    40c4:	80 81       	ld	r24, Z
    40c6:	80 61       	ori	r24, 0x10	; 16
    40c8:	8c 93       	st	X, r24
	//write RW=0
	CLR_BIT(LCD_Control_Port,LCD_RW_PIN);
    40ca:	a2 e3       	ldi	r26, 0x32	; 50
    40cc:	b0 e0       	ldi	r27, 0x00	; 0
    40ce:	e2 e3       	ldi	r30, 0x32	; 50
    40d0:	f0 e0       	ldi	r31, 0x00	; 0
    40d2:	80 81       	ld	r24, Z
    40d4:	8f 7b       	andi	r24, 0xBF	; 191
    40d6:	8c 93       	st	X, r24
	//enable => high
	SET_BIT(LCD_Control_Port,LCD_E_PIN);
    40d8:	a2 e3       	ldi	r26, 0x32	; 50
    40da:	b0 e0       	ldi	r27, 0x00	; 0
    40dc:	e2 e3       	ldi	r30, 0x32	; 50
    40de:	f0 e0       	ldi	r31, 0x00	; 0
    40e0:	80 81       	ld	r24, Z
    40e2:	88 60       	ori	r24, 0x08	; 8
    40e4:	8c 93       	st	X, r24
	LCD_Data_Port=copy_u8Data;
    40e6:	e5 e3       	ldi	r30, 0x35	; 53
    40e8:	f0 e0       	ldi	r31, 0x00	; 0
    40ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40ec:	80 83       	st	Z, r24
    40ee:	80 e0       	ldi	r24, 0x00	; 0
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	a0 e8       	ldi	r26, 0x80	; 128
    40f4:	bf e3       	ldi	r27, 0x3F	; 63
    40f6:	89 8f       	std	Y+25, r24	; 0x19
    40f8:	9a 8f       	std	Y+26, r25	; 0x1a
    40fa:	ab 8f       	std	Y+27, r26	; 0x1b
    40fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40fe:	69 8d       	ldd	r22, Y+25	; 0x19
    4100:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4102:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4104:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4106:	20 e0       	ldi	r18, 0x00	; 0
    4108:	30 e0       	ldi	r19, 0x00	; 0
    410a:	4a ef       	ldi	r20, 0xFA	; 250
    410c:	54 e4       	ldi	r21, 0x44	; 68
    410e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4112:	dc 01       	movw	r26, r24
    4114:	cb 01       	movw	r24, r22
    4116:	8d 8b       	std	Y+21, r24	; 0x15
    4118:	9e 8b       	std	Y+22, r25	; 0x16
    411a:	af 8b       	std	Y+23, r26	; 0x17
    411c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    411e:	6d 89       	ldd	r22, Y+21	; 0x15
    4120:	7e 89       	ldd	r23, Y+22	; 0x16
    4122:	8f 89       	ldd	r24, Y+23	; 0x17
    4124:	98 8d       	ldd	r25, Y+24	; 0x18
    4126:	20 e0       	ldi	r18, 0x00	; 0
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	40 e8       	ldi	r20, 0x80	; 128
    412c:	5f e3       	ldi	r21, 0x3F	; 63
    412e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4132:	88 23       	and	r24, r24
    4134:	2c f4       	brge	.+10     	; 0x4140 <LCD_voidSendData+0x9a>
		__ticks = 1;
    4136:	81 e0       	ldi	r24, 0x01	; 1
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	9c 8b       	std	Y+20, r25	; 0x14
    413c:	8b 8b       	std	Y+19, r24	; 0x13
    413e:	3f c0       	rjmp	.+126    	; 0x41be <LCD_voidSendData+0x118>
	else if (__tmp > 65535)
    4140:	6d 89       	ldd	r22, Y+21	; 0x15
    4142:	7e 89       	ldd	r23, Y+22	; 0x16
    4144:	8f 89       	ldd	r24, Y+23	; 0x17
    4146:	98 8d       	ldd	r25, Y+24	; 0x18
    4148:	20 e0       	ldi	r18, 0x00	; 0
    414a:	3f ef       	ldi	r19, 0xFF	; 255
    414c:	4f e7       	ldi	r20, 0x7F	; 127
    414e:	57 e4       	ldi	r21, 0x47	; 71
    4150:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4154:	18 16       	cp	r1, r24
    4156:	4c f5       	brge	.+82     	; 0x41aa <LCD_voidSendData+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4158:	69 8d       	ldd	r22, Y+25	; 0x19
    415a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    415c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    415e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4160:	20 e0       	ldi	r18, 0x00	; 0
    4162:	30 e0       	ldi	r19, 0x00	; 0
    4164:	40 e2       	ldi	r20, 0x20	; 32
    4166:	51 e4       	ldi	r21, 0x41	; 65
    4168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    416c:	dc 01       	movw	r26, r24
    416e:	cb 01       	movw	r24, r22
    4170:	bc 01       	movw	r22, r24
    4172:	cd 01       	movw	r24, r26
    4174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4178:	dc 01       	movw	r26, r24
    417a:	cb 01       	movw	r24, r22
    417c:	9c 8b       	std	Y+20, r25	; 0x14
    417e:	8b 8b       	std	Y+19, r24	; 0x13
    4180:	0f c0       	rjmp	.+30     	; 0x41a0 <LCD_voidSendData+0xfa>
    4182:	88 ec       	ldi	r24, 0xC8	; 200
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	9a 8b       	std	Y+18, r25	; 0x12
    4188:	89 8b       	std	Y+17, r24	; 0x11
    418a:	89 89       	ldd	r24, Y+17	; 0x11
    418c:	9a 89       	ldd	r25, Y+18	; 0x12
    418e:	01 97       	sbiw	r24, 0x01	; 1
    4190:	f1 f7       	brne	.-4      	; 0x418e <LCD_voidSendData+0xe8>
    4192:	9a 8b       	std	Y+18, r25	; 0x12
    4194:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4196:	8b 89       	ldd	r24, Y+19	; 0x13
    4198:	9c 89       	ldd	r25, Y+20	; 0x14
    419a:	01 97       	sbiw	r24, 0x01	; 1
    419c:	9c 8b       	std	Y+20, r25	; 0x14
    419e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41a0:	8b 89       	ldd	r24, Y+19	; 0x13
    41a2:	9c 89       	ldd	r25, Y+20	; 0x14
    41a4:	00 97       	sbiw	r24, 0x00	; 0
    41a6:	69 f7       	brne	.-38     	; 0x4182 <LCD_voidSendData+0xdc>
    41a8:	14 c0       	rjmp	.+40     	; 0x41d2 <LCD_voidSendData+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41aa:	6d 89       	ldd	r22, Y+21	; 0x15
    41ac:	7e 89       	ldd	r23, Y+22	; 0x16
    41ae:	8f 89       	ldd	r24, Y+23	; 0x17
    41b0:	98 8d       	ldd	r25, Y+24	; 0x18
    41b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41b6:	dc 01       	movw	r26, r24
    41b8:	cb 01       	movw	r24, r22
    41ba:	9c 8b       	std	Y+20, r25	; 0x14
    41bc:	8b 8b       	std	Y+19, r24	; 0x13
    41be:	8b 89       	ldd	r24, Y+19	; 0x13
    41c0:	9c 89       	ldd	r25, Y+20	; 0x14
    41c2:	98 8b       	std	Y+16, r25	; 0x10
    41c4:	8f 87       	std	Y+15, r24	; 0x0f
    41c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    41c8:	98 89       	ldd	r25, Y+16	; 0x10
    41ca:	01 97       	sbiw	r24, 0x01	; 1
    41cc:	f1 f7       	brne	.-4      	; 0x41ca <LCD_voidSendData+0x124>
    41ce:	98 8b       	std	Y+16, r25	; 0x10
    41d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	//enable => LOW (Caputre Data)
	CLR_BIT(LCD_Control_Port,LCD_E_PIN);
    41d2:	a2 e3       	ldi	r26, 0x32	; 50
    41d4:	b0 e0       	ldi	r27, 0x00	; 0
    41d6:	e2 e3       	ldi	r30, 0x32	; 50
    41d8:	f0 e0       	ldi	r31, 0x00	; 0
    41da:	80 81       	ld	r24, Z
    41dc:	87 7f       	andi	r24, 0xF7	; 247
    41de:	8c 93       	st	X, r24
    41e0:	80 e0       	ldi	r24, 0x00	; 0
    41e2:	90 e0       	ldi	r25, 0x00	; 0
    41e4:	a0 e8       	ldi	r26, 0x80	; 128
    41e6:	bf e3       	ldi	r27, 0x3F	; 63
    41e8:	8b 87       	std	Y+11, r24	; 0x0b
    41ea:	9c 87       	std	Y+12, r25	; 0x0c
    41ec:	ad 87       	std	Y+13, r26	; 0x0d
    41ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    41f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    41f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    41f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    41f8:	20 e0       	ldi	r18, 0x00	; 0
    41fa:	30 e0       	ldi	r19, 0x00	; 0
    41fc:	4a ef       	ldi	r20, 0xFA	; 250
    41fe:	54 e4       	ldi	r21, 0x44	; 68
    4200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4204:	dc 01       	movw	r26, r24
    4206:	cb 01       	movw	r24, r22
    4208:	8f 83       	std	Y+7, r24	; 0x07
    420a:	98 87       	std	Y+8, r25	; 0x08
    420c:	a9 87       	std	Y+9, r26	; 0x09
    420e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4210:	6f 81       	ldd	r22, Y+7	; 0x07
    4212:	78 85       	ldd	r23, Y+8	; 0x08
    4214:	89 85       	ldd	r24, Y+9	; 0x09
    4216:	9a 85       	ldd	r25, Y+10	; 0x0a
    4218:	20 e0       	ldi	r18, 0x00	; 0
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	40 e8       	ldi	r20, 0x80	; 128
    421e:	5f e3       	ldi	r21, 0x3F	; 63
    4220:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4224:	88 23       	and	r24, r24
    4226:	2c f4       	brge	.+10     	; 0x4232 <LCD_voidSendData+0x18c>
		__ticks = 1;
    4228:	81 e0       	ldi	r24, 0x01	; 1
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	9e 83       	std	Y+6, r25	; 0x06
    422e:	8d 83       	std	Y+5, r24	; 0x05
    4230:	3f c0       	rjmp	.+126    	; 0x42b0 <LCD_voidSendData+0x20a>
	else if (__tmp > 65535)
    4232:	6f 81       	ldd	r22, Y+7	; 0x07
    4234:	78 85       	ldd	r23, Y+8	; 0x08
    4236:	89 85       	ldd	r24, Y+9	; 0x09
    4238:	9a 85       	ldd	r25, Y+10	; 0x0a
    423a:	20 e0       	ldi	r18, 0x00	; 0
    423c:	3f ef       	ldi	r19, 0xFF	; 255
    423e:	4f e7       	ldi	r20, 0x7F	; 127
    4240:	57 e4       	ldi	r21, 0x47	; 71
    4242:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4246:	18 16       	cp	r1, r24
    4248:	4c f5       	brge	.+82     	; 0x429c <LCD_voidSendData+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    424a:	6b 85       	ldd	r22, Y+11	; 0x0b
    424c:	7c 85       	ldd	r23, Y+12	; 0x0c
    424e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4250:	9e 85       	ldd	r25, Y+14	; 0x0e
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	40 e2       	ldi	r20, 0x20	; 32
    4258:	51 e4       	ldi	r21, 0x41	; 65
    425a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    425e:	dc 01       	movw	r26, r24
    4260:	cb 01       	movw	r24, r22
    4262:	bc 01       	movw	r22, r24
    4264:	cd 01       	movw	r24, r26
    4266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    426a:	dc 01       	movw	r26, r24
    426c:	cb 01       	movw	r24, r22
    426e:	9e 83       	std	Y+6, r25	; 0x06
    4270:	8d 83       	std	Y+5, r24	; 0x05
    4272:	0f c0       	rjmp	.+30     	; 0x4292 <LCD_voidSendData+0x1ec>
    4274:	88 ec       	ldi	r24, 0xC8	; 200
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	9c 83       	std	Y+4, r25	; 0x04
    427a:	8b 83       	std	Y+3, r24	; 0x03
    427c:	8b 81       	ldd	r24, Y+3	; 0x03
    427e:	9c 81       	ldd	r25, Y+4	; 0x04
    4280:	01 97       	sbiw	r24, 0x01	; 1
    4282:	f1 f7       	brne	.-4      	; 0x4280 <LCD_voidSendData+0x1da>
    4284:	9c 83       	std	Y+4, r25	; 0x04
    4286:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4288:	8d 81       	ldd	r24, Y+5	; 0x05
    428a:	9e 81       	ldd	r25, Y+6	; 0x06
    428c:	01 97       	sbiw	r24, 0x01	; 1
    428e:	9e 83       	std	Y+6, r25	; 0x06
    4290:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4292:	8d 81       	ldd	r24, Y+5	; 0x05
    4294:	9e 81       	ldd	r25, Y+6	; 0x06
    4296:	00 97       	sbiw	r24, 0x00	; 0
    4298:	69 f7       	brne	.-38     	; 0x4274 <LCD_voidSendData+0x1ce>
    429a:	14 c0       	rjmp	.+40     	; 0x42c4 <LCD_voidSendData+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    429c:	6f 81       	ldd	r22, Y+7	; 0x07
    429e:	78 85       	ldd	r23, Y+8	; 0x08
    42a0:	89 85       	ldd	r24, Y+9	; 0x09
    42a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42a8:	dc 01       	movw	r26, r24
    42aa:	cb 01       	movw	r24, r22
    42ac:	9e 83       	std	Y+6, r25	; 0x06
    42ae:	8d 83       	std	Y+5, r24	; 0x05
    42b0:	8d 81       	ldd	r24, Y+5	; 0x05
    42b2:	9e 81       	ldd	r25, Y+6	; 0x06
    42b4:	9a 83       	std	Y+2, r25	; 0x02
    42b6:	89 83       	std	Y+1, r24	; 0x01
    42b8:	89 81       	ldd	r24, Y+1	; 0x01
    42ba:	9a 81       	ldd	r25, Y+2	; 0x02
    42bc:	01 97       	sbiw	r24, 0x01	; 1
    42be:	f1 f7       	brne	.-4      	; 0x42bc <LCD_voidSendData+0x216>
    42c0:	9a 83       	std	Y+2, r25	; 0x02
    42c2:	89 83       	std	Y+1, r24	; 0x01
	//delay for multiple call
	_delay_ms(1);
}
    42c4:	6d 96       	adiw	r28, 0x1d	; 29
    42c6:	0f b6       	in	r0, 0x3f	; 63
    42c8:	f8 94       	cli
    42ca:	de bf       	out	0x3e, r29	; 62
    42cc:	0f be       	out	0x3f, r0	; 63
    42ce:	cd bf       	out	0x3d, r28	; 61
    42d0:	cf 91       	pop	r28
    42d2:	df 91       	pop	r29
    42d4:	08 95       	ret

000042d6 <LCD_voidSendCommand>:
void LCD_voidSendCommand(u8 copy_u8Command){
    42d6:	df 93       	push	r29
    42d8:	cf 93       	push	r28
    42da:	cd b7       	in	r28, 0x3d	; 61
    42dc:	de b7       	in	r29, 0x3e	; 62
    42de:	6d 97       	sbiw	r28, 0x1d	; 29
    42e0:	0f b6       	in	r0, 0x3f	; 63
    42e2:	f8 94       	cli
    42e4:	de bf       	out	0x3e, r29	; 62
    42e6:	0f be       	out	0x3f, r0	; 63
    42e8:	cd bf       	out	0x3d, r28	; 61
    42ea:	8d 8f       	std	Y+29, r24	; 0x1d
	//send Command make RS_PIN=0
	CLR_BIT(LCD_Control_Port,LCD_RS_PIN);
    42ec:	a2 e3       	ldi	r26, 0x32	; 50
    42ee:	b0 e0       	ldi	r27, 0x00	; 0
    42f0:	e2 e3       	ldi	r30, 0x32	; 50
    42f2:	f0 e0       	ldi	r31, 0x00	; 0
    42f4:	80 81       	ld	r24, Z
    42f6:	8f 7e       	andi	r24, 0xEF	; 239
    42f8:	8c 93       	st	X, r24
	//write RW=0
	CLR_BIT(LCD_Control_Port,LCD_RW_PIN);
    42fa:	a2 e3       	ldi	r26, 0x32	; 50
    42fc:	b0 e0       	ldi	r27, 0x00	; 0
    42fe:	e2 e3       	ldi	r30, 0x32	; 50
    4300:	f0 e0       	ldi	r31, 0x00	; 0
    4302:	80 81       	ld	r24, Z
    4304:	8f 7b       	andi	r24, 0xBF	; 191
    4306:	8c 93       	st	X, r24
	//enable => high
	SET_BIT(LCD_Control_Port,LCD_E_PIN);
    4308:	a2 e3       	ldi	r26, 0x32	; 50
    430a:	b0 e0       	ldi	r27, 0x00	; 0
    430c:	e2 e3       	ldi	r30, 0x32	; 50
    430e:	f0 e0       	ldi	r31, 0x00	; 0
    4310:	80 81       	ld	r24, Z
    4312:	88 60       	ori	r24, 0x08	; 8
    4314:	8c 93       	st	X, r24
	LCD_Data_Port=copy_u8Command;
    4316:	e5 e3       	ldi	r30, 0x35	; 53
    4318:	f0 e0       	ldi	r31, 0x00	; 0
    431a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    431c:	80 83       	st	Z, r24
    431e:	80 e0       	ldi	r24, 0x00	; 0
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	a0 e0       	ldi	r26, 0x00	; 0
    4324:	b0 e4       	ldi	r27, 0x40	; 64
    4326:	89 8f       	std	Y+25, r24	; 0x19
    4328:	9a 8f       	std	Y+26, r25	; 0x1a
    432a:	ab 8f       	std	Y+27, r26	; 0x1b
    432c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    432e:	69 8d       	ldd	r22, Y+25	; 0x19
    4330:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4332:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4334:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4336:	20 e0       	ldi	r18, 0x00	; 0
    4338:	30 e0       	ldi	r19, 0x00	; 0
    433a:	4a ef       	ldi	r20, 0xFA	; 250
    433c:	54 e4       	ldi	r21, 0x44	; 68
    433e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4342:	dc 01       	movw	r26, r24
    4344:	cb 01       	movw	r24, r22
    4346:	8d 8b       	std	Y+21, r24	; 0x15
    4348:	9e 8b       	std	Y+22, r25	; 0x16
    434a:	af 8b       	std	Y+23, r26	; 0x17
    434c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    434e:	6d 89       	ldd	r22, Y+21	; 0x15
    4350:	7e 89       	ldd	r23, Y+22	; 0x16
    4352:	8f 89       	ldd	r24, Y+23	; 0x17
    4354:	98 8d       	ldd	r25, Y+24	; 0x18
    4356:	20 e0       	ldi	r18, 0x00	; 0
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	40 e8       	ldi	r20, 0x80	; 128
    435c:	5f e3       	ldi	r21, 0x3F	; 63
    435e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4362:	88 23       	and	r24, r24
    4364:	2c f4       	brge	.+10     	; 0x4370 <LCD_voidSendCommand+0x9a>
		__ticks = 1;
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	9c 8b       	std	Y+20, r25	; 0x14
    436c:	8b 8b       	std	Y+19, r24	; 0x13
    436e:	3f c0       	rjmp	.+126    	; 0x43ee <LCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
    4370:	6d 89       	ldd	r22, Y+21	; 0x15
    4372:	7e 89       	ldd	r23, Y+22	; 0x16
    4374:	8f 89       	ldd	r24, Y+23	; 0x17
    4376:	98 8d       	ldd	r25, Y+24	; 0x18
    4378:	20 e0       	ldi	r18, 0x00	; 0
    437a:	3f ef       	ldi	r19, 0xFF	; 255
    437c:	4f e7       	ldi	r20, 0x7F	; 127
    437e:	57 e4       	ldi	r21, 0x47	; 71
    4380:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4384:	18 16       	cp	r1, r24
    4386:	4c f5       	brge	.+82     	; 0x43da <LCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4388:	69 8d       	ldd	r22, Y+25	; 0x19
    438a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    438c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    438e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4390:	20 e0       	ldi	r18, 0x00	; 0
    4392:	30 e0       	ldi	r19, 0x00	; 0
    4394:	40 e2       	ldi	r20, 0x20	; 32
    4396:	51 e4       	ldi	r21, 0x41	; 65
    4398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    439c:	dc 01       	movw	r26, r24
    439e:	cb 01       	movw	r24, r22
    43a0:	bc 01       	movw	r22, r24
    43a2:	cd 01       	movw	r24, r26
    43a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43a8:	dc 01       	movw	r26, r24
    43aa:	cb 01       	movw	r24, r22
    43ac:	9c 8b       	std	Y+20, r25	; 0x14
    43ae:	8b 8b       	std	Y+19, r24	; 0x13
    43b0:	0f c0       	rjmp	.+30     	; 0x43d0 <LCD_voidSendCommand+0xfa>
    43b2:	88 ec       	ldi	r24, 0xC8	; 200
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	9a 8b       	std	Y+18, r25	; 0x12
    43b8:	89 8b       	std	Y+17, r24	; 0x11
    43ba:	89 89       	ldd	r24, Y+17	; 0x11
    43bc:	9a 89       	ldd	r25, Y+18	; 0x12
    43be:	01 97       	sbiw	r24, 0x01	; 1
    43c0:	f1 f7       	brne	.-4      	; 0x43be <LCD_voidSendCommand+0xe8>
    43c2:	9a 8b       	std	Y+18, r25	; 0x12
    43c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43c6:	8b 89       	ldd	r24, Y+19	; 0x13
    43c8:	9c 89       	ldd	r25, Y+20	; 0x14
    43ca:	01 97       	sbiw	r24, 0x01	; 1
    43cc:	9c 8b       	std	Y+20, r25	; 0x14
    43ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43d0:	8b 89       	ldd	r24, Y+19	; 0x13
    43d2:	9c 89       	ldd	r25, Y+20	; 0x14
    43d4:	00 97       	sbiw	r24, 0x00	; 0
    43d6:	69 f7       	brne	.-38     	; 0x43b2 <LCD_voidSendCommand+0xdc>
    43d8:	14 c0       	rjmp	.+40     	; 0x4402 <LCD_voidSendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43da:	6d 89       	ldd	r22, Y+21	; 0x15
    43dc:	7e 89       	ldd	r23, Y+22	; 0x16
    43de:	8f 89       	ldd	r24, Y+23	; 0x17
    43e0:	98 8d       	ldd	r25, Y+24	; 0x18
    43e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e6:	dc 01       	movw	r26, r24
    43e8:	cb 01       	movw	r24, r22
    43ea:	9c 8b       	std	Y+20, r25	; 0x14
    43ec:	8b 8b       	std	Y+19, r24	; 0x13
    43ee:	8b 89       	ldd	r24, Y+19	; 0x13
    43f0:	9c 89       	ldd	r25, Y+20	; 0x14
    43f2:	98 8b       	std	Y+16, r25	; 0x10
    43f4:	8f 87       	std	Y+15, r24	; 0x0f
    43f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    43f8:	98 89       	ldd	r25, Y+16	; 0x10
    43fa:	01 97       	sbiw	r24, 0x01	; 1
    43fc:	f1 f7       	brne	.-4      	; 0x43fa <LCD_voidSendCommand+0x124>
    43fe:	98 8b       	std	Y+16, r25	; 0x10
    4400:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	//enable => LOW (Caputre Data)
	CLR_BIT(LCD_Control_Port,LCD_E_PIN);
    4402:	a2 e3       	ldi	r26, 0x32	; 50
    4404:	b0 e0       	ldi	r27, 0x00	; 0
    4406:	e2 e3       	ldi	r30, 0x32	; 50
    4408:	f0 e0       	ldi	r31, 0x00	; 0
    440a:	80 81       	ld	r24, Z
    440c:	87 7f       	andi	r24, 0xF7	; 247
    440e:	8c 93       	st	X, r24
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	a0 e2       	ldi	r26, 0x20	; 32
    4416:	b1 e4       	ldi	r27, 0x41	; 65
    4418:	8b 87       	std	Y+11, r24	; 0x0b
    441a:	9c 87       	std	Y+12, r25	; 0x0c
    441c:	ad 87       	std	Y+13, r26	; 0x0d
    441e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4420:	6b 85       	ldd	r22, Y+11	; 0x0b
    4422:	7c 85       	ldd	r23, Y+12	; 0x0c
    4424:	8d 85       	ldd	r24, Y+13	; 0x0d
    4426:	9e 85       	ldd	r25, Y+14	; 0x0e
    4428:	20 e0       	ldi	r18, 0x00	; 0
    442a:	30 e0       	ldi	r19, 0x00	; 0
    442c:	4a ef       	ldi	r20, 0xFA	; 250
    442e:	54 e4       	ldi	r21, 0x44	; 68
    4430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4434:	dc 01       	movw	r26, r24
    4436:	cb 01       	movw	r24, r22
    4438:	8f 83       	std	Y+7, r24	; 0x07
    443a:	98 87       	std	Y+8, r25	; 0x08
    443c:	a9 87       	std	Y+9, r26	; 0x09
    443e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4440:	6f 81       	ldd	r22, Y+7	; 0x07
    4442:	78 85       	ldd	r23, Y+8	; 0x08
    4444:	89 85       	ldd	r24, Y+9	; 0x09
    4446:	9a 85       	ldd	r25, Y+10	; 0x0a
    4448:	20 e0       	ldi	r18, 0x00	; 0
    444a:	30 e0       	ldi	r19, 0x00	; 0
    444c:	40 e8       	ldi	r20, 0x80	; 128
    444e:	5f e3       	ldi	r21, 0x3F	; 63
    4450:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4454:	88 23       	and	r24, r24
    4456:	2c f4       	brge	.+10     	; 0x4462 <LCD_voidSendCommand+0x18c>
		__ticks = 1;
    4458:	81 e0       	ldi	r24, 0x01	; 1
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	9e 83       	std	Y+6, r25	; 0x06
    445e:	8d 83       	std	Y+5, r24	; 0x05
    4460:	3f c0       	rjmp	.+126    	; 0x44e0 <LCD_voidSendCommand+0x20a>
	else if (__tmp > 65535)
    4462:	6f 81       	ldd	r22, Y+7	; 0x07
    4464:	78 85       	ldd	r23, Y+8	; 0x08
    4466:	89 85       	ldd	r24, Y+9	; 0x09
    4468:	9a 85       	ldd	r25, Y+10	; 0x0a
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	3f ef       	ldi	r19, 0xFF	; 255
    446e:	4f e7       	ldi	r20, 0x7F	; 127
    4470:	57 e4       	ldi	r21, 0x47	; 71
    4472:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4476:	18 16       	cp	r1, r24
    4478:	4c f5       	brge	.+82     	; 0x44cc <LCD_voidSendCommand+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    447a:	6b 85       	ldd	r22, Y+11	; 0x0b
    447c:	7c 85       	ldd	r23, Y+12	; 0x0c
    447e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4480:	9e 85       	ldd	r25, Y+14	; 0x0e
    4482:	20 e0       	ldi	r18, 0x00	; 0
    4484:	30 e0       	ldi	r19, 0x00	; 0
    4486:	40 e2       	ldi	r20, 0x20	; 32
    4488:	51 e4       	ldi	r21, 0x41	; 65
    448a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    448e:	dc 01       	movw	r26, r24
    4490:	cb 01       	movw	r24, r22
    4492:	bc 01       	movw	r22, r24
    4494:	cd 01       	movw	r24, r26
    4496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    449a:	dc 01       	movw	r26, r24
    449c:	cb 01       	movw	r24, r22
    449e:	9e 83       	std	Y+6, r25	; 0x06
    44a0:	8d 83       	std	Y+5, r24	; 0x05
    44a2:	0f c0       	rjmp	.+30     	; 0x44c2 <LCD_voidSendCommand+0x1ec>
    44a4:	88 ec       	ldi	r24, 0xC8	; 200
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	9c 83       	std	Y+4, r25	; 0x04
    44aa:	8b 83       	std	Y+3, r24	; 0x03
    44ac:	8b 81       	ldd	r24, Y+3	; 0x03
    44ae:	9c 81       	ldd	r25, Y+4	; 0x04
    44b0:	01 97       	sbiw	r24, 0x01	; 1
    44b2:	f1 f7       	brne	.-4      	; 0x44b0 <LCD_voidSendCommand+0x1da>
    44b4:	9c 83       	std	Y+4, r25	; 0x04
    44b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ba:	9e 81       	ldd	r25, Y+6	; 0x06
    44bc:	01 97       	sbiw	r24, 0x01	; 1
    44be:	9e 83       	std	Y+6, r25	; 0x06
    44c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44c2:	8d 81       	ldd	r24, Y+5	; 0x05
    44c4:	9e 81       	ldd	r25, Y+6	; 0x06
    44c6:	00 97       	sbiw	r24, 0x00	; 0
    44c8:	69 f7       	brne	.-38     	; 0x44a4 <LCD_voidSendCommand+0x1ce>
    44ca:	14 c0       	rjmp	.+40     	; 0x44f4 <LCD_voidSendCommand+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44cc:	6f 81       	ldd	r22, Y+7	; 0x07
    44ce:	78 85       	ldd	r23, Y+8	; 0x08
    44d0:	89 85       	ldd	r24, Y+9	; 0x09
    44d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    44d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d8:	dc 01       	movw	r26, r24
    44da:	cb 01       	movw	r24, r22
    44dc:	9e 83       	std	Y+6, r25	; 0x06
    44de:	8d 83       	std	Y+5, r24	; 0x05
    44e0:	8d 81       	ldd	r24, Y+5	; 0x05
    44e2:	9e 81       	ldd	r25, Y+6	; 0x06
    44e4:	9a 83       	std	Y+2, r25	; 0x02
    44e6:	89 83       	std	Y+1, r24	; 0x01
    44e8:	89 81       	ldd	r24, Y+1	; 0x01
    44ea:	9a 81       	ldd	r25, Y+2	; 0x02
    44ec:	01 97       	sbiw	r24, 0x01	; 1
    44ee:	f1 f7       	brne	.-4      	; 0x44ec <LCD_voidSendCommand+0x216>
    44f0:	9a 83       	std	Y+2, r25	; 0x02
    44f2:	89 83       	std	Y+1, r24	; 0x01
	//delay for multiple call
	_delay_ms(10);
}
    44f4:	6d 96       	adiw	r28, 0x1d	; 29
    44f6:	0f b6       	in	r0, 0x3f	; 63
    44f8:	f8 94       	cli
    44fa:	de bf       	out	0x3e, r29	; 62
    44fc:	0f be       	out	0x3f, r0	; 63
    44fe:	cd bf       	out	0x3d, r28	; 61
    4500:	cf 91       	pop	r28
    4502:	df 91       	pop	r29
    4504:	08 95       	ret

00004506 <LCD_voidini>:

void LCD_voidini(void){
    4506:	0f 93       	push	r16
    4508:	1f 93       	push	r17
    450a:	df 93       	push	r29
    450c:	cf 93       	push	r28
    450e:	cd b7       	in	r28, 0x3d	; 61
    4510:	de b7       	in	r29, 0x3e	; 62
    4512:	c6 54       	subi	r28, 0x46	; 70
    4514:	d0 40       	sbci	r29, 0x00	; 0
    4516:	0f b6       	in	r0, 0x3f	; 63
    4518:	f8 94       	cli
    451a:	de bf       	out	0x3e, r29	; 62
    451c:	0f be       	out	0x3f, r0	; 63
    451e:	cd bf       	out	0x3d, r28	; 61
	LCD_Data_DDR=0xFF;
    4520:	e4 e3       	ldi	r30, 0x34	; 52
    4522:	f0 e0       	ldi	r31, 0x00	; 0
    4524:	8f ef       	ldi	r24, 0xFF	; 255
    4526:	80 83       	st	Z, r24
	SET_BIT(LCD_Control_DDR,LCD_RS_PIN);
    4528:	a1 e3       	ldi	r26, 0x31	; 49
    452a:	b0 e0       	ldi	r27, 0x00	; 0
    452c:	e1 e3       	ldi	r30, 0x31	; 49
    452e:	f0 e0       	ldi	r31, 0x00	; 0
    4530:	80 81       	ld	r24, Z
    4532:	80 61       	ori	r24, 0x10	; 16
    4534:	8c 93       	st	X, r24
	SET_BIT(LCD_Control_DDR,LCD_RW_PIN);
    4536:	a1 e3       	ldi	r26, 0x31	; 49
    4538:	b0 e0       	ldi	r27, 0x00	; 0
    453a:	e1 e3       	ldi	r30, 0x31	; 49
    453c:	f0 e0       	ldi	r31, 0x00	; 0
    453e:	80 81       	ld	r24, Z
    4540:	80 64       	ori	r24, 0x40	; 64
    4542:	8c 93       	st	X, r24
	SET_BIT(LCD_Control_DDR,LCD_E_PIN);
    4544:	a1 e3       	ldi	r26, 0x31	; 49
    4546:	b0 e0       	ldi	r27, 0x00	; 0
    4548:	e1 e3       	ldi	r30, 0x31	; 49
    454a:	f0 e0       	ldi	r31, 0x00	; 0
    454c:	80 81       	ld	r24, Z
    454e:	88 60       	ori	r24, 0x08	; 8
    4550:	8c 93       	st	X, r24
    4552:	fe 01       	movw	r30, r28
    4554:	ed 5b       	subi	r30, 0xBD	; 189
    4556:	ff 4f       	sbci	r31, 0xFF	; 255
    4558:	80 e0       	ldi	r24, 0x00	; 0
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	a0 ef       	ldi	r26, 0xF0	; 240
    455e:	b1 e4       	ldi	r27, 0x41	; 65
    4560:	80 83       	st	Z, r24
    4562:	91 83       	std	Z+1, r25	; 0x01
    4564:	a2 83       	std	Z+2, r26	; 0x02
    4566:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4568:	8e 01       	movw	r16, r28
    456a:	01 5c       	subi	r16, 0xC1	; 193
    456c:	1f 4f       	sbci	r17, 0xFF	; 255
    456e:	fe 01       	movw	r30, r28
    4570:	ed 5b       	subi	r30, 0xBD	; 189
    4572:	ff 4f       	sbci	r31, 0xFF	; 255
    4574:	60 81       	ld	r22, Z
    4576:	71 81       	ldd	r23, Z+1	; 0x01
    4578:	82 81       	ldd	r24, Z+2	; 0x02
    457a:	93 81       	ldd	r25, Z+3	; 0x03
    457c:	20 e0       	ldi	r18, 0x00	; 0
    457e:	30 e0       	ldi	r19, 0x00	; 0
    4580:	4a ef       	ldi	r20, 0xFA	; 250
    4582:	54 e4       	ldi	r21, 0x44	; 68
    4584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4588:	dc 01       	movw	r26, r24
    458a:	cb 01       	movw	r24, r22
    458c:	f8 01       	movw	r30, r16
    458e:	80 83       	st	Z, r24
    4590:	91 83       	std	Z+1, r25	; 0x01
    4592:	a2 83       	std	Z+2, r26	; 0x02
    4594:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4596:	fe 01       	movw	r30, r28
    4598:	ff 96       	adiw	r30, 0x3f	; 63
    459a:	60 81       	ld	r22, Z
    459c:	71 81       	ldd	r23, Z+1	; 0x01
    459e:	82 81       	ldd	r24, Z+2	; 0x02
    45a0:	93 81       	ldd	r25, Z+3	; 0x03
    45a2:	20 e0       	ldi	r18, 0x00	; 0
    45a4:	30 e0       	ldi	r19, 0x00	; 0
    45a6:	40 e8       	ldi	r20, 0x80	; 128
    45a8:	5f e3       	ldi	r21, 0x3F	; 63
    45aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45ae:	88 23       	and	r24, r24
    45b0:	2c f4       	brge	.+10     	; 0x45bc <LCD_voidini+0xb6>
		__ticks = 1;
    45b2:	81 e0       	ldi	r24, 0x01	; 1
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	9e af       	std	Y+62, r25	; 0x3e
    45b8:	8d af       	std	Y+61, r24	; 0x3d
    45ba:	46 c0       	rjmp	.+140    	; 0x4648 <LCD_voidini+0x142>
	else if (__tmp > 65535)
    45bc:	fe 01       	movw	r30, r28
    45be:	ff 96       	adiw	r30, 0x3f	; 63
    45c0:	60 81       	ld	r22, Z
    45c2:	71 81       	ldd	r23, Z+1	; 0x01
    45c4:	82 81       	ldd	r24, Z+2	; 0x02
    45c6:	93 81       	ldd	r25, Z+3	; 0x03
    45c8:	20 e0       	ldi	r18, 0x00	; 0
    45ca:	3f ef       	ldi	r19, 0xFF	; 255
    45cc:	4f e7       	ldi	r20, 0x7F	; 127
    45ce:	57 e4       	ldi	r21, 0x47	; 71
    45d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45d4:	18 16       	cp	r1, r24
    45d6:	64 f5       	brge	.+88     	; 0x4630 <LCD_voidini+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45d8:	fe 01       	movw	r30, r28
    45da:	ed 5b       	subi	r30, 0xBD	; 189
    45dc:	ff 4f       	sbci	r31, 0xFF	; 255
    45de:	60 81       	ld	r22, Z
    45e0:	71 81       	ldd	r23, Z+1	; 0x01
    45e2:	82 81       	ldd	r24, Z+2	; 0x02
    45e4:	93 81       	ldd	r25, Z+3	; 0x03
    45e6:	20 e0       	ldi	r18, 0x00	; 0
    45e8:	30 e0       	ldi	r19, 0x00	; 0
    45ea:	40 e2       	ldi	r20, 0x20	; 32
    45ec:	51 e4       	ldi	r21, 0x41	; 65
    45ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45f2:	dc 01       	movw	r26, r24
    45f4:	cb 01       	movw	r24, r22
    45f6:	bc 01       	movw	r22, r24
    45f8:	cd 01       	movw	r24, r26
    45fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45fe:	dc 01       	movw	r26, r24
    4600:	cb 01       	movw	r24, r22
    4602:	9e af       	std	Y+62, r25	; 0x3e
    4604:	8d af       	std	Y+61, r24	; 0x3d
    4606:	0f c0       	rjmp	.+30     	; 0x4626 <LCD_voidini+0x120>
    4608:	88 ec       	ldi	r24, 0xC8	; 200
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	9c af       	std	Y+60, r25	; 0x3c
    460e:	8b af       	std	Y+59, r24	; 0x3b
    4610:	8b ad       	ldd	r24, Y+59	; 0x3b
    4612:	9c ad       	ldd	r25, Y+60	; 0x3c
    4614:	01 97       	sbiw	r24, 0x01	; 1
    4616:	f1 f7       	brne	.-4      	; 0x4614 <LCD_voidini+0x10e>
    4618:	9c af       	std	Y+60, r25	; 0x3c
    461a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    461c:	8d ad       	ldd	r24, Y+61	; 0x3d
    461e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4620:	01 97       	sbiw	r24, 0x01	; 1
    4622:	9e af       	std	Y+62, r25	; 0x3e
    4624:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4626:	8d ad       	ldd	r24, Y+61	; 0x3d
    4628:	9e ad       	ldd	r25, Y+62	; 0x3e
    462a:	00 97       	sbiw	r24, 0x00	; 0
    462c:	69 f7       	brne	.-38     	; 0x4608 <LCD_voidini+0x102>
    462e:	16 c0       	rjmp	.+44     	; 0x465c <LCD_voidini+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4630:	fe 01       	movw	r30, r28
    4632:	ff 96       	adiw	r30, 0x3f	; 63
    4634:	60 81       	ld	r22, Z
    4636:	71 81       	ldd	r23, Z+1	; 0x01
    4638:	82 81       	ldd	r24, Z+2	; 0x02
    463a:	93 81       	ldd	r25, Z+3	; 0x03
    463c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4640:	dc 01       	movw	r26, r24
    4642:	cb 01       	movw	r24, r22
    4644:	9e af       	std	Y+62, r25	; 0x3e
    4646:	8d af       	std	Y+61, r24	; 0x3d
    4648:	8d ad       	ldd	r24, Y+61	; 0x3d
    464a:	9e ad       	ldd	r25, Y+62	; 0x3e
    464c:	9a af       	std	Y+58, r25	; 0x3a
    464e:	89 af       	std	Y+57, r24	; 0x39
    4650:	89 ad       	ldd	r24, Y+57	; 0x39
    4652:	9a ad       	ldd	r25, Y+58	; 0x3a
    4654:	01 97       	sbiw	r24, 0x01	; 1
    4656:	f1 f7       	brne	.-4      	; 0x4654 <LCD_voidini+0x14e>
    4658:	9a af       	std	Y+58, r25	; 0x3a
    465a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(30);
	LCD_voidSendCommand(LCD_FunictionSet8bit);
    465c:	88 e3       	ldi	r24, 0x38	; 56
    465e:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <LCD_voidSendCommand>
    4662:	80 e0       	ldi	r24, 0x00	; 0
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	a0 e0       	ldi	r26, 0x00	; 0
    4668:	b0 e4       	ldi	r27, 0x40	; 64
    466a:	8d ab       	std	Y+53, r24	; 0x35
    466c:	9e ab       	std	Y+54, r25	; 0x36
    466e:	af ab       	std	Y+55, r26	; 0x37
    4670:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4672:	6d a9       	ldd	r22, Y+53	; 0x35
    4674:	7e a9       	ldd	r23, Y+54	; 0x36
    4676:	8f a9       	ldd	r24, Y+55	; 0x37
    4678:	98 ad       	ldd	r25, Y+56	; 0x38
    467a:	20 e0       	ldi	r18, 0x00	; 0
    467c:	30 e0       	ldi	r19, 0x00	; 0
    467e:	4a ef       	ldi	r20, 0xFA	; 250
    4680:	54 e4       	ldi	r21, 0x44	; 68
    4682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4686:	dc 01       	movw	r26, r24
    4688:	cb 01       	movw	r24, r22
    468a:	89 ab       	std	Y+49, r24	; 0x31
    468c:	9a ab       	std	Y+50, r25	; 0x32
    468e:	ab ab       	std	Y+51, r26	; 0x33
    4690:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4692:	69 a9       	ldd	r22, Y+49	; 0x31
    4694:	7a a9       	ldd	r23, Y+50	; 0x32
    4696:	8b a9       	ldd	r24, Y+51	; 0x33
    4698:	9c a9       	ldd	r25, Y+52	; 0x34
    469a:	20 e0       	ldi	r18, 0x00	; 0
    469c:	30 e0       	ldi	r19, 0x00	; 0
    469e:	40 e8       	ldi	r20, 0x80	; 128
    46a0:	5f e3       	ldi	r21, 0x3F	; 63
    46a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46a6:	88 23       	and	r24, r24
    46a8:	2c f4       	brge	.+10     	; 0x46b4 <LCD_voidini+0x1ae>
		__ticks = 1;
    46aa:	81 e0       	ldi	r24, 0x01	; 1
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	98 ab       	std	Y+48, r25	; 0x30
    46b0:	8f a7       	std	Y+47, r24	; 0x2f
    46b2:	3f c0       	rjmp	.+126    	; 0x4732 <LCD_voidini+0x22c>
	else if (__tmp > 65535)
    46b4:	69 a9       	ldd	r22, Y+49	; 0x31
    46b6:	7a a9       	ldd	r23, Y+50	; 0x32
    46b8:	8b a9       	ldd	r24, Y+51	; 0x33
    46ba:	9c a9       	ldd	r25, Y+52	; 0x34
    46bc:	20 e0       	ldi	r18, 0x00	; 0
    46be:	3f ef       	ldi	r19, 0xFF	; 255
    46c0:	4f e7       	ldi	r20, 0x7F	; 127
    46c2:	57 e4       	ldi	r21, 0x47	; 71
    46c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46c8:	18 16       	cp	r1, r24
    46ca:	4c f5       	brge	.+82     	; 0x471e <LCD_voidini+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46cc:	6d a9       	ldd	r22, Y+53	; 0x35
    46ce:	7e a9       	ldd	r23, Y+54	; 0x36
    46d0:	8f a9       	ldd	r24, Y+55	; 0x37
    46d2:	98 ad       	ldd	r25, Y+56	; 0x38
    46d4:	20 e0       	ldi	r18, 0x00	; 0
    46d6:	30 e0       	ldi	r19, 0x00	; 0
    46d8:	40 e2       	ldi	r20, 0x20	; 32
    46da:	51 e4       	ldi	r21, 0x41	; 65
    46dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46e0:	dc 01       	movw	r26, r24
    46e2:	cb 01       	movw	r24, r22
    46e4:	bc 01       	movw	r22, r24
    46e6:	cd 01       	movw	r24, r26
    46e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ec:	dc 01       	movw	r26, r24
    46ee:	cb 01       	movw	r24, r22
    46f0:	98 ab       	std	Y+48, r25	; 0x30
    46f2:	8f a7       	std	Y+47, r24	; 0x2f
    46f4:	0f c0       	rjmp	.+30     	; 0x4714 <LCD_voidini+0x20e>
    46f6:	88 ec       	ldi	r24, 0xC8	; 200
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	9e a7       	std	Y+46, r25	; 0x2e
    46fc:	8d a7       	std	Y+45, r24	; 0x2d
    46fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    4700:	9e a5       	ldd	r25, Y+46	; 0x2e
    4702:	01 97       	sbiw	r24, 0x01	; 1
    4704:	f1 f7       	brne	.-4      	; 0x4702 <LCD_voidini+0x1fc>
    4706:	9e a7       	std	Y+46, r25	; 0x2e
    4708:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    470a:	8f a5       	ldd	r24, Y+47	; 0x2f
    470c:	98 a9       	ldd	r25, Y+48	; 0x30
    470e:	01 97       	sbiw	r24, 0x01	; 1
    4710:	98 ab       	std	Y+48, r25	; 0x30
    4712:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4714:	8f a5       	ldd	r24, Y+47	; 0x2f
    4716:	98 a9       	ldd	r25, Y+48	; 0x30
    4718:	00 97       	sbiw	r24, 0x00	; 0
    471a:	69 f7       	brne	.-38     	; 0x46f6 <LCD_voidini+0x1f0>
    471c:	14 c0       	rjmp	.+40     	; 0x4746 <LCD_voidini+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    471e:	69 a9       	ldd	r22, Y+49	; 0x31
    4720:	7a a9       	ldd	r23, Y+50	; 0x32
    4722:	8b a9       	ldd	r24, Y+51	; 0x33
    4724:	9c a9       	ldd	r25, Y+52	; 0x34
    4726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    472a:	dc 01       	movw	r26, r24
    472c:	cb 01       	movw	r24, r22
    472e:	98 ab       	std	Y+48, r25	; 0x30
    4730:	8f a7       	std	Y+47, r24	; 0x2f
    4732:	8f a5       	ldd	r24, Y+47	; 0x2f
    4734:	98 a9       	ldd	r25, Y+48	; 0x30
    4736:	9c a7       	std	Y+44, r25	; 0x2c
    4738:	8b a7       	std	Y+43, r24	; 0x2b
    473a:	8b a5       	ldd	r24, Y+43	; 0x2b
    473c:	9c a5       	ldd	r25, Y+44	; 0x2c
    473e:	01 97       	sbiw	r24, 0x01	; 1
    4740:	f1 f7       	brne	.-4      	; 0x473e <LCD_voidini+0x238>
    4742:	9c a7       	std	Y+44, r25	; 0x2c
    4744:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	LCD_voidSendCommand(Display_ON_Control);
    4746:	8c e0       	ldi	r24, 0x0C	; 12
    4748:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <LCD_voidSendCommand>
    474c:	80 e0       	ldi	r24, 0x00	; 0
    474e:	90 e0       	ldi	r25, 0x00	; 0
    4750:	a0 e0       	ldi	r26, 0x00	; 0
    4752:	b0 e4       	ldi	r27, 0x40	; 64
    4754:	8f a3       	std	Y+39, r24	; 0x27
    4756:	98 a7       	std	Y+40, r25	; 0x28
    4758:	a9 a7       	std	Y+41, r26	; 0x29
    475a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    475c:	6f a1       	ldd	r22, Y+39	; 0x27
    475e:	78 a5       	ldd	r23, Y+40	; 0x28
    4760:	89 a5       	ldd	r24, Y+41	; 0x29
    4762:	9a a5       	ldd	r25, Y+42	; 0x2a
    4764:	20 e0       	ldi	r18, 0x00	; 0
    4766:	30 e0       	ldi	r19, 0x00	; 0
    4768:	4a ef       	ldi	r20, 0xFA	; 250
    476a:	54 e4       	ldi	r21, 0x44	; 68
    476c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4770:	dc 01       	movw	r26, r24
    4772:	cb 01       	movw	r24, r22
    4774:	8b a3       	std	Y+35, r24	; 0x23
    4776:	9c a3       	std	Y+36, r25	; 0x24
    4778:	ad a3       	std	Y+37, r26	; 0x25
    477a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    477c:	6b a1       	ldd	r22, Y+35	; 0x23
    477e:	7c a1       	ldd	r23, Y+36	; 0x24
    4780:	8d a1       	ldd	r24, Y+37	; 0x25
    4782:	9e a1       	ldd	r25, Y+38	; 0x26
    4784:	20 e0       	ldi	r18, 0x00	; 0
    4786:	30 e0       	ldi	r19, 0x00	; 0
    4788:	40 e8       	ldi	r20, 0x80	; 128
    478a:	5f e3       	ldi	r21, 0x3F	; 63
    478c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4790:	88 23       	and	r24, r24
    4792:	2c f4       	brge	.+10     	; 0x479e <LCD_voidini+0x298>
		__ticks = 1;
    4794:	81 e0       	ldi	r24, 0x01	; 1
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	9a a3       	std	Y+34, r25	; 0x22
    479a:	89 a3       	std	Y+33, r24	; 0x21
    479c:	3f c0       	rjmp	.+126    	; 0x481c <LCD_voidini+0x316>
	else if (__tmp > 65535)
    479e:	6b a1       	ldd	r22, Y+35	; 0x23
    47a0:	7c a1       	ldd	r23, Y+36	; 0x24
    47a2:	8d a1       	ldd	r24, Y+37	; 0x25
    47a4:	9e a1       	ldd	r25, Y+38	; 0x26
    47a6:	20 e0       	ldi	r18, 0x00	; 0
    47a8:	3f ef       	ldi	r19, 0xFF	; 255
    47aa:	4f e7       	ldi	r20, 0x7F	; 127
    47ac:	57 e4       	ldi	r21, 0x47	; 71
    47ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47b2:	18 16       	cp	r1, r24
    47b4:	4c f5       	brge	.+82     	; 0x4808 <LCD_voidini+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47b6:	6f a1       	ldd	r22, Y+39	; 0x27
    47b8:	78 a5       	ldd	r23, Y+40	; 0x28
    47ba:	89 a5       	ldd	r24, Y+41	; 0x29
    47bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    47be:	20 e0       	ldi	r18, 0x00	; 0
    47c0:	30 e0       	ldi	r19, 0x00	; 0
    47c2:	40 e2       	ldi	r20, 0x20	; 32
    47c4:	51 e4       	ldi	r21, 0x41	; 65
    47c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ca:	dc 01       	movw	r26, r24
    47cc:	cb 01       	movw	r24, r22
    47ce:	bc 01       	movw	r22, r24
    47d0:	cd 01       	movw	r24, r26
    47d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47d6:	dc 01       	movw	r26, r24
    47d8:	cb 01       	movw	r24, r22
    47da:	9a a3       	std	Y+34, r25	; 0x22
    47dc:	89 a3       	std	Y+33, r24	; 0x21
    47de:	0f c0       	rjmp	.+30     	; 0x47fe <LCD_voidini+0x2f8>
    47e0:	88 ec       	ldi	r24, 0xC8	; 200
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	98 a3       	std	Y+32, r25	; 0x20
    47e6:	8f 8f       	std	Y+31, r24	; 0x1f
    47e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    47ea:	98 a1       	ldd	r25, Y+32	; 0x20
    47ec:	01 97       	sbiw	r24, 0x01	; 1
    47ee:	f1 f7       	brne	.-4      	; 0x47ec <LCD_voidini+0x2e6>
    47f0:	98 a3       	std	Y+32, r25	; 0x20
    47f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47f4:	89 a1       	ldd	r24, Y+33	; 0x21
    47f6:	9a a1       	ldd	r25, Y+34	; 0x22
    47f8:	01 97       	sbiw	r24, 0x01	; 1
    47fa:	9a a3       	std	Y+34, r25	; 0x22
    47fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47fe:	89 a1       	ldd	r24, Y+33	; 0x21
    4800:	9a a1       	ldd	r25, Y+34	; 0x22
    4802:	00 97       	sbiw	r24, 0x00	; 0
    4804:	69 f7       	brne	.-38     	; 0x47e0 <LCD_voidini+0x2da>
    4806:	14 c0       	rjmp	.+40     	; 0x4830 <LCD_voidini+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4808:	6b a1       	ldd	r22, Y+35	; 0x23
    480a:	7c a1       	ldd	r23, Y+36	; 0x24
    480c:	8d a1       	ldd	r24, Y+37	; 0x25
    480e:	9e a1       	ldd	r25, Y+38	; 0x26
    4810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4814:	dc 01       	movw	r26, r24
    4816:	cb 01       	movw	r24, r22
    4818:	9a a3       	std	Y+34, r25	; 0x22
    481a:	89 a3       	std	Y+33, r24	; 0x21
    481c:	89 a1       	ldd	r24, Y+33	; 0x21
    481e:	9a a1       	ldd	r25, Y+34	; 0x22
    4820:	9e 8f       	std	Y+30, r25	; 0x1e
    4822:	8d 8f       	std	Y+29, r24	; 0x1d
    4824:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4826:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4828:	01 97       	sbiw	r24, 0x01	; 1
    482a:	f1 f7       	brne	.-4      	; 0x4828 <LCD_voidini+0x322>
    482c:	9e 8f       	std	Y+30, r25	; 0x1e
    482e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	LCD_voidSendCommand(Clear_display);
    4830:	81 e0       	ldi	r24, 0x01	; 1
    4832:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <LCD_voidSendCommand>
    4836:	80 e0       	ldi	r24, 0x00	; 0
    4838:	90 e0       	ldi	r25, 0x00	; 0
    483a:	a0 e0       	ldi	r26, 0x00	; 0
    483c:	b0 e4       	ldi	r27, 0x40	; 64
    483e:	89 8f       	std	Y+25, r24	; 0x19
    4840:	9a 8f       	std	Y+26, r25	; 0x1a
    4842:	ab 8f       	std	Y+27, r26	; 0x1b
    4844:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4846:	69 8d       	ldd	r22, Y+25	; 0x19
    4848:	7a 8d       	ldd	r23, Y+26	; 0x1a
    484a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    484c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    484e:	20 e0       	ldi	r18, 0x00	; 0
    4850:	30 e0       	ldi	r19, 0x00	; 0
    4852:	4a ef       	ldi	r20, 0xFA	; 250
    4854:	54 e4       	ldi	r21, 0x44	; 68
    4856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    485a:	dc 01       	movw	r26, r24
    485c:	cb 01       	movw	r24, r22
    485e:	8d 8b       	std	Y+21, r24	; 0x15
    4860:	9e 8b       	std	Y+22, r25	; 0x16
    4862:	af 8b       	std	Y+23, r26	; 0x17
    4864:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4866:	6d 89       	ldd	r22, Y+21	; 0x15
    4868:	7e 89       	ldd	r23, Y+22	; 0x16
    486a:	8f 89       	ldd	r24, Y+23	; 0x17
    486c:	98 8d       	ldd	r25, Y+24	; 0x18
    486e:	20 e0       	ldi	r18, 0x00	; 0
    4870:	30 e0       	ldi	r19, 0x00	; 0
    4872:	40 e8       	ldi	r20, 0x80	; 128
    4874:	5f e3       	ldi	r21, 0x3F	; 63
    4876:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    487a:	88 23       	and	r24, r24
    487c:	2c f4       	brge	.+10     	; 0x4888 <LCD_voidini+0x382>
		__ticks = 1;
    487e:	81 e0       	ldi	r24, 0x01	; 1
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	9c 8b       	std	Y+20, r25	; 0x14
    4884:	8b 8b       	std	Y+19, r24	; 0x13
    4886:	3f c0       	rjmp	.+126    	; 0x4906 <LCD_voidini+0x400>
	else if (__tmp > 65535)
    4888:	6d 89       	ldd	r22, Y+21	; 0x15
    488a:	7e 89       	ldd	r23, Y+22	; 0x16
    488c:	8f 89       	ldd	r24, Y+23	; 0x17
    488e:	98 8d       	ldd	r25, Y+24	; 0x18
    4890:	20 e0       	ldi	r18, 0x00	; 0
    4892:	3f ef       	ldi	r19, 0xFF	; 255
    4894:	4f e7       	ldi	r20, 0x7F	; 127
    4896:	57 e4       	ldi	r21, 0x47	; 71
    4898:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    489c:	18 16       	cp	r1, r24
    489e:	4c f5       	brge	.+82     	; 0x48f2 <LCD_voidini+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48a0:	69 8d       	ldd	r22, Y+25	; 0x19
    48a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48a8:	20 e0       	ldi	r18, 0x00	; 0
    48aa:	30 e0       	ldi	r19, 0x00	; 0
    48ac:	40 e2       	ldi	r20, 0x20	; 32
    48ae:	51 e4       	ldi	r21, 0x41	; 65
    48b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48b4:	dc 01       	movw	r26, r24
    48b6:	cb 01       	movw	r24, r22
    48b8:	bc 01       	movw	r22, r24
    48ba:	cd 01       	movw	r24, r26
    48bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c0:	dc 01       	movw	r26, r24
    48c2:	cb 01       	movw	r24, r22
    48c4:	9c 8b       	std	Y+20, r25	; 0x14
    48c6:	8b 8b       	std	Y+19, r24	; 0x13
    48c8:	0f c0       	rjmp	.+30     	; 0x48e8 <LCD_voidini+0x3e2>
    48ca:	88 ec       	ldi	r24, 0xC8	; 200
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	9a 8b       	std	Y+18, r25	; 0x12
    48d0:	89 8b       	std	Y+17, r24	; 0x11
    48d2:	89 89       	ldd	r24, Y+17	; 0x11
    48d4:	9a 89       	ldd	r25, Y+18	; 0x12
    48d6:	01 97       	sbiw	r24, 0x01	; 1
    48d8:	f1 f7       	brne	.-4      	; 0x48d6 <LCD_voidini+0x3d0>
    48da:	9a 8b       	std	Y+18, r25	; 0x12
    48dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48de:	8b 89       	ldd	r24, Y+19	; 0x13
    48e0:	9c 89       	ldd	r25, Y+20	; 0x14
    48e2:	01 97       	sbiw	r24, 0x01	; 1
    48e4:	9c 8b       	std	Y+20, r25	; 0x14
    48e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48e8:	8b 89       	ldd	r24, Y+19	; 0x13
    48ea:	9c 89       	ldd	r25, Y+20	; 0x14
    48ec:	00 97       	sbiw	r24, 0x00	; 0
    48ee:	69 f7       	brne	.-38     	; 0x48ca <LCD_voidini+0x3c4>
    48f0:	14 c0       	rjmp	.+40     	; 0x491a <LCD_voidini+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48f2:	6d 89       	ldd	r22, Y+21	; 0x15
    48f4:	7e 89       	ldd	r23, Y+22	; 0x16
    48f6:	8f 89       	ldd	r24, Y+23	; 0x17
    48f8:	98 8d       	ldd	r25, Y+24	; 0x18
    48fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48fe:	dc 01       	movw	r26, r24
    4900:	cb 01       	movw	r24, r22
    4902:	9c 8b       	std	Y+20, r25	; 0x14
    4904:	8b 8b       	std	Y+19, r24	; 0x13
    4906:	8b 89       	ldd	r24, Y+19	; 0x13
    4908:	9c 89       	ldd	r25, Y+20	; 0x14
    490a:	98 8b       	std	Y+16, r25	; 0x10
    490c:	8f 87       	std	Y+15, r24	; 0x0f
    490e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4910:	98 89       	ldd	r25, Y+16	; 0x10
    4912:	01 97       	sbiw	r24, 0x01	; 1
    4914:	f1 f7       	brne	.-4      	; 0x4912 <LCD_voidini+0x40c>
    4916:	98 8b       	std	Y+16, r25	; 0x10
    4918:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_voidSendCommand(Entery_mode_set);
    491a:	86 e0       	ldi	r24, 0x06	; 6
    491c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <LCD_voidSendCommand>
    4920:	80 e0       	ldi	r24, 0x00	; 0
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	a0 e0       	ldi	r26, 0x00	; 0
    4926:	b0 e4       	ldi	r27, 0x40	; 64
    4928:	8b 87       	std	Y+11, r24	; 0x0b
    492a:	9c 87       	std	Y+12, r25	; 0x0c
    492c:	ad 87       	std	Y+13, r26	; 0x0d
    492e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4930:	6b 85       	ldd	r22, Y+11	; 0x0b
    4932:	7c 85       	ldd	r23, Y+12	; 0x0c
    4934:	8d 85       	ldd	r24, Y+13	; 0x0d
    4936:	9e 85       	ldd	r25, Y+14	; 0x0e
    4938:	20 e0       	ldi	r18, 0x00	; 0
    493a:	30 e0       	ldi	r19, 0x00	; 0
    493c:	4a ef       	ldi	r20, 0xFA	; 250
    493e:	54 e4       	ldi	r21, 0x44	; 68
    4940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4944:	dc 01       	movw	r26, r24
    4946:	cb 01       	movw	r24, r22
    4948:	8f 83       	std	Y+7, r24	; 0x07
    494a:	98 87       	std	Y+8, r25	; 0x08
    494c:	a9 87       	std	Y+9, r26	; 0x09
    494e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4950:	6f 81       	ldd	r22, Y+7	; 0x07
    4952:	78 85       	ldd	r23, Y+8	; 0x08
    4954:	89 85       	ldd	r24, Y+9	; 0x09
    4956:	9a 85       	ldd	r25, Y+10	; 0x0a
    4958:	20 e0       	ldi	r18, 0x00	; 0
    495a:	30 e0       	ldi	r19, 0x00	; 0
    495c:	40 e8       	ldi	r20, 0x80	; 128
    495e:	5f e3       	ldi	r21, 0x3F	; 63
    4960:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4964:	88 23       	and	r24, r24
    4966:	2c f4       	brge	.+10     	; 0x4972 <LCD_voidini+0x46c>
		__ticks = 1;
    4968:	81 e0       	ldi	r24, 0x01	; 1
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	9e 83       	std	Y+6, r25	; 0x06
    496e:	8d 83       	std	Y+5, r24	; 0x05
    4970:	3f c0       	rjmp	.+126    	; 0x49f0 <LCD_voidini+0x4ea>
	else if (__tmp > 65535)
    4972:	6f 81       	ldd	r22, Y+7	; 0x07
    4974:	78 85       	ldd	r23, Y+8	; 0x08
    4976:	89 85       	ldd	r24, Y+9	; 0x09
    4978:	9a 85       	ldd	r25, Y+10	; 0x0a
    497a:	20 e0       	ldi	r18, 0x00	; 0
    497c:	3f ef       	ldi	r19, 0xFF	; 255
    497e:	4f e7       	ldi	r20, 0x7F	; 127
    4980:	57 e4       	ldi	r21, 0x47	; 71
    4982:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4986:	18 16       	cp	r1, r24
    4988:	4c f5       	brge	.+82     	; 0x49dc <LCD_voidini+0x4d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    498a:	6b 85       	ldd	r22, Y+11	; 0x0b
    498c:	7c 85       	ldd	r23, Y+12	; 0x0c
    498e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4990:	9e 85       	ldd	r25, Y+14	; 0x0e
    4992:	20 e0       	ldi	r18, 0x00	; 0
    4994:	30 e0       	ldi	r19, 0x00	; 0
    4996:	40 e2       	ldi	r20, 0x20	; 32
    4998:	51 e4       	ldi	r21, 0x41	; 65
    499a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    499e:	dc 01       	movw	r26, r24
    49a0:	cb 01       	movw	r24, r22
    49a2:	bc 01       	movw	r22, r24
    49a4:	cd 01       	movw	r24, r26
    49a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49aa:	dc 01       	movw	r26, r24
    49ac:	cb 01       	movw	r24, r22
    49ae:	9e 83       	std	Y+6, r25	; 0x06
    49b0:	8d 83       	std	Y+5, r24	; 0x05
    49b2:	0f c0       	rjmp	.+30     	; 0x49d2 <LCD_voidini+0x4cc>
    49b4:	88 ec       	ldi	r24, 0xC8	; 200
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	9c 83       	std	Y+4, r25	; 0x04
    49ba:	8b 83       	std	Y+3, r24	; 0x03
    49bc:	8b 81       	ldd	r24, Y+3	; 0x03
    49be:	9c 81       	ldd	r25, Y+4	; 0x04
    49c0:	01 97       	sbiw	r24, 0x01	; 1
    49c2:	f1 f7       	brne	.-4      	; 0x49c0 <LCD_voidini+0x4ba>
    49c4:	9c 83       	std	Y+4, r25	; 0x04
    49c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49c8:	8d 81       	ldd	r24, Y+5	; 0x05
    49ca:	9e 81       	ldd	r25, Y+6	; 0x06
    49cc:	01 97       	sbiw	r24, 0x01	; 1
    49ce:	9e 83       	std	Y+6, r25	; 0x06
    49d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49d2:	8d 81       	ldd	r24, Y+5	; 0x05
    49d4:	9e 81       	ldd	r25, Y+6	; 0x06
    49d6:	00 97       	sbiw	r24, 0x00	; 0
    49d8:	69 f7       	brne	.-38     	; 0x49b4 <LCD_voidini+0x4ae>
    49da:	14 c0       	rjmp	.+40     	; 0x4a04 <LCD_voidini+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49dc:	6f 81       	ldd	r22, Y+7	; 0x07
    49de:	78 85       	ldd	r23, Y+8	; 0x08
    49e0:	89 85       	ldd	r24, Y+9	; 0x09
    49e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    49e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49e8:	dc 01       	movw	r26, r24
    49ea:	cb 01       	movw	r24, r22
    49ec:	9e 83       	std	Y+6, r25	; 0x06
    49ee:	8d 83       	std	Y+5, r24	; 0x05
    49f0:	8d 81       	ldd	r24, Y+5	; 0x05
    49f2:	9e 81       	ldd	r25, Y+6	; 0x06
    49f4:	9a 83       	std	Y+2, r25	; 0x02
    49f6:	89 83       	std	Y+1, r24	; 0x01
    49f8:	89 81       	ldd	r24, Y+1	; 0x01
    49fa:	9a 81       	ldd	r25, Y+2	; 0x02
    49fc:	01 97       	sbiw	r24, 0x01	; 1
    49fe:	f1 f7       	brne	.-4      	; 0x49fc <LCD_voidini+0x4f6>
    4a00:	9a 83       	std	Y+2, r25	; 0x02
    4a02:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    4a04:	ca 5b       	subi	r28, 0xBA	; 186
    4a06:	df 4f       	sbci	r29, 0xFF	; 255
    4a08:	0f b6       	in	r0, 0x3f	; 63
    4a0a:	f8 94       	cli
    4a0c:	de bf       	out	0x3e, r29	; 62
    4a0e:	0f be       	out	0x3f, r0	; 63
    4a10:	cd bf       	out	0x3d, r28	; 61
    4a12:	cf 91       	pop	r28
    4a14:	df 91       	pop	r29
    4a16:	1f 91       	pop	r17
    4a18:	0f 91       	pop	r16
    4a1a:	08 95       	ret

00004a1c <LCD_voidSetCursorLocation>:
void LCD_voidSetCursorLocation(u8 copy_u8Row,u8 copy_u8Column){
    4a1c:	df 93       	push	r29
    4a1e:	cf 93       	push	r28
    4a20:	00 d0       	rcall	.+0      	; 0x4a22 <LCD_voidSetCursorLocation+0x6>
    4a22:	00 d0       	rcall	.+0      	; 0x4a24 <LCD_voidSetCursorLocation+0x8>
    4a24:	cd b7       	in	r28, 0x3d	; 61
    4a26:	de b7       	in	r29, 0x3e	; 62
    4a28:	89 83       	std	Y+1, r24	; 0x01
    4a2a:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8Column>=0) &&(copy_u8Column<16)){
    4a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a2e:	80 31       	cpi	r24, 0x10	; 16
    4a30:	c0 f4       	brcc	.+48     	; 0x4a62 <LCD_voidSetCursorLocation+0x46>
	switch(copy_u8Row){
    4a32:	89 81       	ldd	r24, Y+1	; 0x01
    4a34:	28 2f       	mov	r18, r24
    4a36:	30 e0       	ldi	r19, 0x00	; 0
    4a38:	3c 83       	std	Y+4, r19	; 0x04
    4a3a:	2b 83       	std	Y+3, r18	; 0x03
    4a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a40:	00 97       	sbiw	r24, 0x00	; 0
    4a42:	31 f0       	breq	.+12     	; 0x4a50 <LCD_voidSetCursorLocation+0x34>
    4a44:	2b 81       	ldd	r18, Y+3	; 0x03
    4a46:	3c 81       	ldd	r19, Y+4	; 0x04
    4a48:	21 30       	cpi	r18, 0x01	; 1
    4a4a:	31 05       	cpc	r19, r1
    4a4c:	31 f0       	breq	.+12     	; 0x4a5a <LCD_voidSetCursorLocation+0x3e>
    4a4e:	09 c0       	rjmp	.+18     	; 0x4a62 <LCD_voidSetCursorLocation+0x46>
	case 0:
		LCD_voidSendCommand(DDR_ADDRESS+0+copy_u8Column);
    4a50:	8a 81       	ldd	r24, Y+2	; 0x02
    4a52:	80 58       	subi	r24, 0x80	; 128
    4a54:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <LCD_voidSendCommand>
    4a58:	04 c0       	rjmp	.+8      	; 0x4a62 <LCD_voidSetCursorLocation+0x46>
	break;
	case 1:
		LCD_voidSendCommand(DDR_ADDRESS+0x40+copy_u8Column);
    4a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a5c:	80 54       	subi	r24, 0x40	; 64
    4a5e:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <LCD_voidSendCommand>
	}
	}
	else{
		// unvaild column
	}
}
    4a62:	0f 90       	pop	r0
    4a64:	0f 90       	pop	r0
    4a66:	0f 90       	pop	r0
    4a68:	0f 90       	pop	r0
    4a6a:	cf 91       	pop	r28
    4a6c:	df 91       	pop	r29
    4a6e:	08 95       	ret

00004a70 <LCD_voidClearDisplay>:
void LCD_voidClearDisplay(void){
    4a70:	df 93       	push	r29
    4a72:	cf 93       	push	r28
    4a74:	cd b7       	in	r28, 0x3d	; 61
    4a76:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCommand(Clear_display);
    4a78:	81 e0       	ldi	r24, 0x01	; 1
    4a7a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <LCD_voidSendCommand>
}
    4a7e:	cf 91       	pop	r28
    4a80:	df 91       	pop	r29
    4a82:	08 95       	ret

00004a84 <LCD_voidwriteString>:
void LCD_voidSaveCustomchar(u8 *ptr_u8toCustomchar,u8 copy_u8SaveLocation);

void LCD_voidwriteString(u8 *ptr_u8toString){
    4a84:	df 93       	push	r29
    4a86:	cf 93       	push	r28
    4a88:	00 d0       	rcall	.+0      	; 0x4a8a <LCD_voidwriteString+0x6>
    4a8a:	0f 92       	push	r0
    4a8c:	cd b7       	in	r28, 0x3d	; 61
    4a8e:	de b7       	in	r29, 0x3e	; 62
    4a90:	9b 83       	std	Y+3, r25	; 0x03
    4a92:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8counter=0;
    4a94:	19 82       	std	Y+1, r1	; 0x01
	for(local_u8counter=0;ptr_u8toString[local_u8counter]!='\0';local_u8counter++){
    4a96:	19 82       	std	Y+1, r1	; 0x01
    4a98:	0e c0       	rjmp	.+28     	; 0x4ab6 <LCD_voidwriteString+0x32>
		LCD_voidSendData(ptr_u8toString[local_u8counter]);
    4a9a:	89 81       	ldd	r24, Y+1	; 0x01
    4a9c:	28 2f       	mov	r18, r24
    4a9e:	30 e0       	ldi	r19, 0x00	; 0
    4aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    4aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    4aa4:	fc 01       	movw	r30, r24
    4aa6:	e2 0f       	add	r30, r18
    4aa8:	f3 1f       	adc	r31, r19
    4aaa:	80 81       	ld	r24, Z
    4aac:	0e 94 53 20 	call	0x40a6	; 0x40a6 <LCD_voidSendData>
}
void LCD_voidSaveCustomchar(u8 *ptr_u8toCustomchar,u8 copy_u8SaveLocation);

void LCD_voidwriteString(u8 *ptr_u8toString){
	u8 local_u8counter=0;
	for(local_u8counter=0;ptr_u8toString[local_u8counter]!='\0';local_u8counter++){
    4ab0:	89 81       	ldd	r24, Y+1	; 0x01
    4ab2:	8f 5f       	subi	r24, 0xFF	; 255
    4ab4:	89 83       	std	Y+1, r24	; 0x01
    4ab6:	89 81       	ldd	r24, Y+1	; 0x01
    4ab8:	28 2f       	mov	r18, r24
    4aba:	30 e0       	ldi	r19, 0x00	; 0
    4abc:	8a 81       	ldd	r24, Y+2	; 0x02
    4abe:	9b 81       	ldd	r25, Y+3	; 0x03
    4ac0:	fc 01       	movw	r30, r24
    4ac2:	e2 0f       	add	r30, r18
    4ac4:	f3 1f       	adc	r31, r19
    4ac6:	80 81       	ld	r24, Z
    4ac8:	88 23       	and	r24, r24
    4aca:	39 f7       	brne	.-50     	; 0x4a9a <LCD_voidwriteString+0x16>
		LCD_voidSendData(ptr_u8toString[local_u8counter]);
	}
}
    4acc:	0f 90       	pop	r0
    4ace:	0f 90       	pop	r0
    4ad0:	0f 90       	pop	r0
    4ad2:	cf 91       	pop	r28
    4ad4:	df 91       	pop	r29
    4ad6:	08 95       	ret

00004ad8 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 copy_u32DataValue) {
    4ad8:	0f 93       	push	r16
    4ada:	1f 93       	push	r17
    4adc:	df 93       	push	r29
    4ade:	cf 93       	push	r28
    4ae0:	cd b7       	in	r28, 0x3d	; 61
    4ae2:	de b7       	in	r29, 0x3e	; 62
    4ae4:	60 97       	sbiw	r28, 0x10	; 16
    4ae6:	0f b6       	in	r0, 0x3f	; 63
    4ae8:	f8 94       	cli
    4aea:	de bf       	out	0x3e, r29	; 62
    4aec:	0f be       	out	0x3f, r0	; 63
    4aee:	cd bf       	out	0x3d, r28	; 61
    4af0:	6d 87       	std	Y+13, r22	; 0x0d
    4af2:	7e 87       	std	Y+14, r23	; 0x0e
    4af4:	8f 87       	std	Y+15, r24	; 0x0f
    4af6:	98 8b       	std	Y+16, r25	; 0x10
    if (copy_u32DataValue == 0) {
    4af8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4afa:	9e 85       	ldd	r25, Y+14	; 0x0e
    4afc:	af 85       	ldd	r26, Y+15	; 0x0f
    4afe:	b8 89       	ldd	r27, Y+16	; 0x10
    4b00:	00 97       	sbiw	r24, 0x00	; 0
    4b02:	a1 05       	cpc	r26, r1
    4b04:	b1 05       	cpc	r27, r1
    4b06:	21 f4       	brne	.+8      	; 0x4b10 <LCD_voidWriteNumber+0x38>
        LCD_voidSendData('0');
    4b08:	80 e3       	ldi	r24, 0x30	; 48
    4b0a:	0e 94 53 20 	call	0x40a6	; 0x40a6 <LCD_voidSendData>
    4b0e:	56 c0       	rjmp	.+172    	; 0x4bbc <LCD_voidWriteNumber+0xe4>
    } else {
        u8 buffer[11]={0};
    4b10:	8b e0       	ldi	r24, 0x0B	; 11
    4b12:	fe 01       	movw	r30, r28
    4b14:	32 96       	adiw	r30, 0x02	; 2
    4b16:	df 01       	movw	r26, r30
    4b18:	98 2f       	mov	r25, r24
    4b1a:	1d 92       	st	X+, r1
    4b1c:	9a 95       	dec	r25
    4b1e:	e9 f7       	brne	.-6      	; 0x4b1a <LCD_voidWriteNumber+0x42>
        s8 i = 0;
    4b20:	19 82       	std	Y+1, r1	; 0x01
    4b22:	30 c0       	rjmp	.+96     	; 0x4b84 <LCD_voidWriteNumber+0xac>

        while (copy_u32DataValue > 0) {
            buffer[i++] = (copy_u32DataValue % 10) + '0';
    4b24:	89 81       	ldd	r24, Y+1	; 0x01
    4b26:	08 2f       	mov	r16, r24
    4b28:	11 27       	eor	r17, r17
    4b2a:	07 fd       	sbrc	r16, 7
    4b2c:	10 95       	com	r17
    4b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b32:	af 85       	ldd	r26, Y+15	; 0x0f
    4b34:	b8 89       	ldd	r27, Y+16	; 0x10
    4b36:	2a e0       	ldi	r18, 0x0A	; 10
    4b38:	30 e0       	ldi	r19, 0x00	; 0
    4b3a:	40 e0       	ldi	r20, 0x00	; 0
    4b3c:	50 e0       	ldi	r21, 0x00	; 0
    4b3e:	bc 01       	movw	r22, r24
    4b40:	cd 01       	movw	r24, r26
    4b42:	0e 94 31 36 	call	0x6c62	; 0x6c62 <__udivmodsi4>
    4b46:	dc 01       	movw	r26, r24
    4b48:	cb 01       	movw	r24, r22
    4b4a:	28 2f       	mov	r18, r24
    4b4c:	20 5d       	subi	r18, 0xD0	; 208
    4b4e:	ce 01       	movw	r24, r28
    4b50:	02 96       	adiw	r24, 0x02	; 2
    4b52:	fc 01       	movw	r30, r24
    4b54:	e0 0f       	add	r30, r16
    4b56:	f1 1f       	adc	r31, r17
    4b58:	20 83       	st	Z, r18
    4b5a:	89 81       	ldd	r24, Y+1	; 0x01
    4b5c:	8f 5f       	subi	r24, 0xFF	; 255
    4b5e:	89 83       	std	Y+1, r24	; 0x01
            copy_u32DataValue /= 10;
    4b60:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b62:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b64:	af 85       	ldd	r26, Y+15	; 0x0f
    4b66:	b8 89       	ldd	r27, Y+16	; 0x10
    4b68:	2a e0       	ldi	r18, 0x0A	; 10
    4b6a:	30 e0       	ldi	r19, 0x00	; 0
    4b6c:	40 e0       	ldi	r20, 0x00	; 0
    4b6e:	50 e0       	ldi	r21, 0x00	; 0
    4b70:	bc 01       	movw	r22, r24
    4b72:	cd 01       	movw	r24, r26
    4b74:	0e 94 31 36 	call	0x6c62	; 0x6c62 <__udivmodsi4>
    4b78:	da 01       	movw	r26, r20
    4b7a:	c9 01       	movw	r24, r18
    4b7c:	8d 87       	std	Y+13, r24	; 0x0d
    4b7e:	9e 87       	std	Y+14, r25	; 0x0e
    4b80:	af 87       	std	Y+15, r26	; 0x0f
    4b82:	b8 8b       	std	Y+16, r27	; 0x10
        LCD_voidSendData('0');
    } else {
        u8 buffer[11]={0};
        s8 i = 0;

        while (copy_u32DataValue > 0) {
    4b84:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b86:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b88:	af 85       	ldd	r26, Y+15	; 0x0f
    4b8a:	b8 89       	ldd	r27, Y+16	; 0x10
    4b8c:	00 97       	sbiw	r24, 0x00	; 0
    4b8e:	a1 05       	cpc	r26, r1
    4b90:	b1 05       	cpc	r27, r1
    4b92:	41 f6       	brne	.-112    	; 0x4b24 <LCD_voidWriteNumber+0x4c>
    4b94:	10 c0       	rjmp	.+32     	; 0x4bb6 <LCD_voidWriteNumber+0xde>
            buffer[i++] = (copy_u32DataValue % 10) + '0';
            copy_u32DataValue /= 10;
        }

        while (i > 0) {
            LCD_voidSendData(buffer[--i]);
    4b96:	89 81       	ldd	r24, Y+1	; 0x01
    4b98:	81 50       	subi	r24, 0x01	; 1
    4b9a:	89 83       	std	Y+1, r24	; 0x01
    4b9c:	89 81       	ldd	r24, Y+1	; 0x01
    4b9e:	28 2f       	mov	r18, r24
    4ba0:	33 27       	eor	r19, r19
    4ba2:	27 fd       	sbrc	r18, 7
    4ba4:	30 95       	com	r19
    4ba6:	ce 01       	movw	r24, r28
    4ba8:	02 96       	adiw	r24, 0x02	; 2
    4baa:	fc 01       	movw	r30, r24
    4bac:	e2 0f       	add	r30, r18
    4bae:	f3 1f       	adc	r31, r19
    4bb0:	80 81       	ld	r24, Z
    4bb2:	0e 94 53 20 	call	0x40a6	; 0x40a6 <LCD_voidSendData>
        while (copy_u32DataValue > 0) {
            buffer[i++] = (copy_u32DataValue % 10) + '0';
            copy_u32DataValue /= 10;
        }

        while (i > 0) {
    4bb6:	89 81       	ldd	r24, Y+1	; 0x01
    4bb8:	18 16       	cp	r1, r24
    4bba:	6c f3       	brlt	.-38     	; 0x4b96 <LCD_voidWriteNumber+0xbe>
            LCD_voidSendData(buffer[--i]);
        }
    }
}
    4bbc:	60 96       	adiw	r28, 0x10	; 16
    4bbe:	0f b6       	in	r0, 0x3f	; 63
    4bc0:	f8 94       	cli
    4bc2:	de bf       	out	0x3e, r29	; 62
    4bc4:	0f be       	out	0x3f, r0	; 63
    4bc6:	cd bf       	out	0x3d, r28	; 61
    4bc8:	cf 91       	pop	r28
    4bca:	df 91       	pop	r29
    4bcc:	1f 91       	pop	r17
    4bce:	0f 91       	pop	r16
    4bd0:	08 95       	ret

00004bd2 <LCD_voidWriteFloatNumber>:
void LCD_voidWriteFloatNumber(f32 copy_f32DataValue,u8 copy_u8decimalPlaces) {
    4bd2:	0f 93       	push	r16
    4bd4:	1f 93       	push	r17
    4bd6:	df 93       	push	r29
    4bd8:	cf 93       	push	r28
    4bda:	cd b7       	in	r28, 0x3d	; 61
    4bdc:	de b7       	in	r29, 0x3e	; 62
    4bde:	ed 97       	sbiw	r28, 0x3d	; 61
    4be0:	0f b6       	in	r0, 0x3f	; 63
    4be2:	f8 94       	cli
    4be4:	de bf       	out	0x3e, r29	; 62
    4be6:	0f be       	out	0x3f, r0	; 63
    4be8:	cd bf       	out	0x3d, r28	; 61
    4bea:	69 af       	std	Y+57, r22	; 0x39
    4bec:	7a af       	std	Y+58, r23	; 0x3a
    4bee:	8b af       	std	Y+59, r24	; 0x3b
    4bf0:	9c af       	std	Y+60, r25	; 0x3c
    4bf2:	4d af       	std	Y+61, r20	; 0x3d
    // Buffer to hold the integer part and fractional part strings
	u8 buffer[32];
    u32 integerPart = (u32)copy_f32DataValue;
    4bf4:	69 ad       	ldd	r22, Y+57	; 0x39
    4bf6:	7a ad       	ldd	r23, Y+58	; 0x3a
    4bf8:	8b ad       	ldd	r24, Y+59	; 0x3b
    4bfa:	9c ad       	ldd	r25, Y+60	; 0x3c
    4bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c00:	dc 01       	movw	r26, r24
    4c02:	cb 01       	movw	r24, r22
    4c04:	8a 87       	std	Y+10, r24	; 0x0a
    4c06:	9b 87       	std	Y+11, r25	; 0x0b
    4c08:	ac 87       	std	Y+12, r26	; 0x0c
    4c0a:	bd 87       	std	Y+13, r27	; 0x0d
    f32 fractionalPart = copy_f32DataValue - integerPart;
    4c0c:	6a 85       	ldd	r22, Y+10	; 0x0a
    4c0e:	7b 85       	ldd	r23, Y+11	; 0x0b
    4c10:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c12:	9d 85       	ldd	r25, Y+13	; 0x0d
    4c14:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    4c18:	9b 01       	movw	r18, r22
    4c1a:	ac 01       	movw	r20, r24
    4c1c:	69 ad       	ldd	r22, Y+57	; 0x39
    4c1e:	7a ad       	ldd	r23, Y+58	; 0x3a
    4c20:	8b ad       	ldd	r24, Y+59	; 0x3b
    4c22:	9c ad       	ldd	r25, Y+60	; 0x3c
    4c24:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4c28:	dc 01       	movw	r26, r24
    4c2a:	cb 01       	movw	r24, r22
    4c2c:	8e 83       	std	Y+6, r24	; 0x06
    4c2e:	9f 83       	std	Y+7, r25	; 0x07
    4c30:	a8 87       	std	Y+8, r26	; 0x08
    4c32:	b9 87       	std	Y+9, r27	; 0x09
    u8 i = 0;
    4c34:	1d 82       	std	Y+5, r1	; 0x05

    // Handle the integer part
    if (integerPart == 0) {
    4c36:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c38:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c3a:	ac 85       	ldd	r26, Y+12	; 0x0c
    4c3c:	bd 85       	ldd	r27, Y+13	; 0x0d
    4c3e:	00 97       	sbiw	r24, 0x00	; 0
    4c40:	a1 05       	cpc	r26, r1
    4c42:	b1 05       	cpc	r27, r1
    4c44:	71 f4       	brne	.+28     	; 0x4c62 <LCD_voidWriteFloatNumber+0x90>
        buffer[i++] = '0';
    4c46:	8d 81       	ldd	r24, Y+5	; 0x05
    4c48:	28 2f       	mov	r18, r24
    4c4a:	30 e0       	ldi	r19, 0x00	; 0
    4c4c:	ce 01       	movw	r24, r28
    4c4e:	0e 96       	adiw	r24, 0x0e	; 14
    4c50:	fc 01       	movw	r30, r24
    4c52:	e2 0f       	add	r30, r18
    4c54:	f3 1f       	adc	r31, r19
    4c56:	80 e3       	ldi	r24, 0x30	; 48
    4c58:	80 83       	st	Z, r24
    4c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c5c:	8f 5f       	subi	r24, 0xFF	; 255
    4c5e:	8d 83       	std	Y+5, r24	; 0x05
    4c60:	54 c0       	rjmp	.+168    	; 0x4d0a <LCD_voidWriteFloatNumber+0x138>
    } else {
    	u8 intBuffer[11];
    	u8 intIndex = 0;
    4c62:	1c 82       	std	Y+4, r1	; 0x04
    4c64:	2e c0       	rjmp	.+92     	; 0x4cc2 <LCD_voidWriteFloatNumber+0xf0>
            buffer[i++] = '-';
            integerPart = -integerPart;
        }

        while (integerPart > 0) {
            intBuffer[intIndex++] = (integerPart % 10) + '0';
    4c66:	8c 81       	ldd	r24, Y+4	; 0x04
    4c68:	08 2f       	mov	r16, r24
    4c6a:	10 e0       	ldi	r17, 0x00	; 0
    4c6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c70:	ac 85       	ldd	r26, Y+12	; 0x0c
    4c72:	bd 85       	ldd	r27, Y+13	; 0x0d
    4c74:	2a e0       	ldi	r18, 0x0A	; 10
    4c76:	30 e0       	ldi	r19, 0x00	; 0
    4c78:	40 e0       	ldi	r20, 0x00	; 0
    4c7a:	50 e0       	ldi	r21, 0x00	; 0
    4c7c:	bc 01       	movw	r22, r24
    4c7e:	cd 01       	movw	r24, r26
    4c80:	0e 94 31 36 	call	0x6c62	; 0x6c62 <__udivmodsi4>
    4c84:	dc 01       	movw	r26, r24
    4c86:	cb 01       	movw	r24, r22
    4c88:	28 2f       	mov	r18, r24
    4c8a:	20 5d       	subi	r18, 0xD0	; 208
    4c8c:	ce 01       	movw	r24, r28
    4c8e:	8e 96       	adiw	r24, 0x2e	; 46
    4c90:	fc 01       	movw	r30, r24
    4c92:	e0 0f       	add	r30, r16
    4c94:	f1 1f       	adc	r31, r17
    4c96:	20 83       	st	Z, r18
    4c98:	8c 81       	ldd	r24, Y+4	; 0x04
    4c9a:	8f 5f       	subi	r24, 0xFF	; 255
    4c9c:	8c 83       	std	Y+4, r24	; 0x04
            integerPart /= 10;
    4c9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ca0:	9b 85       	ldd	r25, Y+11	; 0x0b
    4ca2:	ac 85       	ldd	r26, Y+12	; 0x0c
    4ca4:	bd 85       	ldd	r27, Y+13	; 0x0d
    4ca6:	2a e0       	ldi	r18, 0x0A	; 10
    4ca8:	30 e0       	ldi	r19, 0x00	; 0
    4caa:	40 e0       	ldi	r20, 0x00	; 0
    4cac:	50 e0       	ldi	r21, 0x00	; 0
    4cae:	bc 01       	movw	r22, r24
    4cb0:	cd 01       	movw	r24, r26
    4cb2:	0e 94 31 36 	call	0x6c62	; 0x6c62 <__udivmodsi4>
    4cb6:	da 01       	movw	r26, r20
    4cb8:	c9 01       	movw	r24, r18
    4cba:	8a 87       	std	Y+10, r24	; 0x0a
    4cbc:	9b 87       	std	Y+11, r25	; 0x0b
    4cbe:	ac 87       	std	Y+12, r26	; 0x0c
    4cc0:	bd 87       	std	Y+13, r27	; 0x0d
        if (integerPart < 0) {
            buffer[i++] = '-';
            integerPart = -integerPart;
        }

        while (integerPart > 0) {
    4cc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cc6:	ac 85       	ldd	r26, Y+12	; 0x0c
    4cc8:	bd 85       	ldd	r27, Y+13	; 0x0d
    4cca:	00 97       	sbiw	r24, 0x00	; 0
    4ccc:	a1 05       	cpc	r26, r1
    4cce:	b1 05       	cpc	r27, r1
    4cd0:	51 f6       	brne	.-108    	; 0x4c66 <LCD_voidWriteFloatNumber+0x94>
    4cd2:	18 c0       	rjmp	.+48     	; 0x4d04 <LCD_voidWriteFloatNumber+0x132>
            intBuffer[intIndex++] = (integerPart % 10) + '0';
            integerPart /= 10;
        }

        while (intIndex > 0) {
            buffer[i++] = intBuffer[--intIndex];
    4cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    4cd6:	48 2f       	mov	r20, r24
    4cd8:	50 e0       	ldi	r21, 0x00	; 0
    4cda:	8c 81       	ldd	r24, Y+4	; 0x04
    4cdc:	81 50       	subi	r24, 0x01	; 1
    4cde:	8c 83       	std	Y+4, r24	; 0x04
    4ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    4ce2:	28 2f       	mov	r18, r24
    4ce4:	30 e0       	ldi	r19, 0x00	; 0
    4ce6:	ce 01       	movw	r24, r28
    4ce8:	8e 96       	adiw	r24, 0x2e	; 46
    4cea:	fc 01       	movw	r30, r24
    4cec:	e2 0f       	add	r30, r18
    4cee:	f3 1f       	adc	r31, r19
    4cf0:	20 81       	ld	r18, Z
    4cf2:	ce 01       	movw	r24, r28
    4cf4:	0e 96       	adiw	r24, 0x0e	; 14
    4cf6:	fc 01       	movw	r30, r24
    4cf8:	e4 0f       	add	r30, r20
    4cfa:	f5 1f       	adc	r31, r21
    4cfc:	20 83       	st	Z, r18
    4cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    4d00:	8f 5f       	subi	r24, 0xFF	; 255
    4d02:	8d 83       	std	Y+5, r24	; 0x05
        while (integerPart > 0) {
            intBuffer[intIndex++] = (integerPart % 10) + '0';
            integerPart /= 10;
        }

        while (intIndex > 0) {
    4d04:	8c 81       	ldd	r24, Y+4	; 0x04
    4d06:	88 23       	and	r24, r24
    4d08:	29 f7       	brne	.-54     	; 0x4cd4 <LCD_voidWriteFloatNumber+0x102>
            buffer[i++] = intBuffer[--intIndex];
        }
    }

    // Add the decimal point
    buffer[i++] = '.';
    4d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d0c:	28 2f       	mov	r18, r24
    4d0e:	30 e0       	ldi	r19, 0x00	; 0
    4d10:	ce 01       	movw	r24, r28
    4d12:	0e 96       	adiw	r24, 0x0e	; 14
    4d14:	fc 01       	movw	r30, r24
    4d16:	e2 0f       	add	r30, r18
    4d18:	f3 1f       	adc	r31, r19
    4d1a:	8e e2       	ldi	r24, 0x2E	; 46
    4d1c:	80 83       	st	Z, r24
    4d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d20:	8f 5f       	subi	r24, 0xFF	; 255
    4d22:	8d 83       	std	Y+5, r24	; 0x05

    // Handle the fractional part
    for (u8 j = 0; j < copy_u8decimalPlaces; j++) {
    4d24:	1b 82       	std	Y+3, r1	; 0x03
    4d26:	44 c0       	rjmp	.+136    	; 0x4db0 <LCD_voidWriteFloatNumber+0x1de>
        fractionalPart *= 10;
    4d28:	6e 81       	ldd	r22, Y+6	; 0x06
    4d2a:	7f 81       	ldd	r23, Y+7	; 0x07
    4d2c:	88 85       	ldd	r24, Y+8	; 0x08
    4d2e:	99 85       	ldd	r25, Y+9	; 0x09
    4d30:	20 e0       	ldi	r18, 0x00	; 0
    4d32:	30 e0       	ldi	r19, 0x00	; 0
    4d34:	40 e2       	ldi	r20, 0x20	; 32
    4d36:	51 e4       	ldi	r21, 0x41	; 65
    4d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d3c:	dc 01       	movw	r26, r24
    4d3e:	cb 01       	movw	r24, r22
    4d40:	8e 83       	std	Y+6, r24	; 0x06
    4d42:	9f 83       	std	Y+7, r25	; 0x07
    4d44:	a8 87       	std	Y+8, r26	; 0x08
    4d46:	b9 87       	std	Y+9, r27	; 0x09
        u8 digit = (u8)fractionalPart;
    4d48:	6e 81       	ldd	r22, Y+6	; 0x06
    4d4a:	7f 81       	ldd	r23, Y+7	; 0x07
    4d4c:	88 85       	ldd	r24, Y+8	; 0x08
    4d4e:	99 85       	ldd	r25, Y+9	; 0x09
    4d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d54:	dc 01       	movw	r26, r24
    4d56:	cb 01       	movw	r24, r22
    4d58:	8a 83       	std	Y+2, r24	; 0x02
        buffer[i++] = digit + '0';
    4d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d5c:	28 2f       	mov	r18, r24
    4d5e:	30 e0       	ldi	r19, 0x00	; 0
    4d60:	8a 81       	ldd	r24, Y+2	; 0x02
    4d62:	48 2f       	mov	r20, r24
    4d64:	40 5d       	subi	r20, 0xD0	; 208
    4d66:	ce 01       	movw	r24, r28
    4d68:	0e 96       	adiw	r24, 0x0e	; 14
    4d6a:	fc 01       	movw	r30, r24
    4d6c:	e2 0f       	add	r30, r18
    4d6e:	f3 1f       	adc	r31, r19
    4d70:	40 83       	st	Z, r20
    4d72:	8d 81       	ldd	r24, Y+5	; 0x05
    4d74:	8f 5f       	subi	r24, 0xFF	; 255
    4d76:	8d 83       	std	Y+5, r24	; 0x05
        fractionalPart -= digit;
    4d78:	8a 81       	ldd	r24, Y+2	; 0x02
    4d7a:	88 2f       	mov	r24, r24
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	aa 27       	eor	r26, r26
    4d80:	97 fd       	sbrc	r25, 7
    4d82:	a0 95       	com	r26
    4d84:	ba 2f       	mov	r27, r26
    4d86:	bc 01       	movw	r22, r24
    4d88:	cd 01       	movw	r24, r26
    4d8a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4d8e:	9b 01       	movw	r18, r22
    4d90:	ac 01       	movw	r20, r24
    4d92:	6e 81       	ldd	r22, Y+6	; 0x06
    4d94:	7f 81       	ldd	r23, Y+7	; 0x07
    4d96:	88 85       	ldd	r24, Y+8	; 0x08
    4d98:	99 85       	ldd	r25, Y+9	; 0x09
    4d9a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4d9e:	dc 01       	movw	r26, r24
    4da0:	cb 01       	movw	r24, r22
    4da2:	8e 83       	std	Y+6, r24	; 0x06
    4da4:	9f 83       	std	Y+7, r25	; 0x07
    4da6:	a8 87       	std	Y+8, r26	; 0x08
    4da8:	b9 87       	std	Y+9, r27	; 0x09

    // Add the decimal point
    buffer[i++] = '.';

    // Handle the fractional part
    for (u8 j = 0; j < copy_u8decimalPlaces; j++) {
    4daa:	8b 81       	ldd	r24, Y+3	; 0x03
    4dac:	8f 5f       	subi	r24, 0xFF	; 255
    4dae:	8b 83       	std	Y+3, r24	; 0x03
    4db0:	9b 81       	ldd	r25, Y+3	; 0x03
    4db2:	8d ad       	ldd	r24, Y+61	; 0x3d
    4db4:	98 17       	cp	r25, r24
    4db6:	08 f4       	brcc	.+2      	; 0x4dba <LCD_voidWriteFloatNumber+0x1e8>
    4db8:	b7 cf       	rjmp	.-146    	; 0x4d28 <LCD_voidWriteFloatNumber+0x156>
        buffer[i++] = digit + '0';
        fractionalPart -= digit;
    }

    // Null-terminate the string
    buffer[i] = '\0';
    4dba:	8d 81       	ldd	r24, Y+5	; 0x05
    4dbc:	28 2f       	mov	r18, r24
    4dbe:	30 e0       	ldi	r19, 0x00	; 0
    4dc0:	ce 01       	movw	r24, r28
    4dc2:	0e 96       	adiw	r24, 0x0e	; 14
    4dc4:	fc 01       	movw	r30, r24
    4dc6:	e2 0f       	add	r30, r18
    4dc8:	f3 1f       	adc	r31, r19
    4dca:	10 82       	st	Z, r1

    // Send each character to the LCD
    for (u8 k = 0; buffer[k] != '\0'; k++) {
    4dcc:	19 82       	std	Y+1, r1	; 0x01
    4dce:	0e c0       	rjmp	.+28     	; 0x4dec <LCD_voidWriteFloatNumber+0x21a>
        LCD_voidSendData(buffer[k]);
    4dd0:	89 81       	ldd	r24, Y+1	; 0x01
    4dd2:	28 2f       	mov	r18, r24
    4dd4:	30 e0       	ldi	r19, 0x00	; 0
    4dd6:	ce 01       	movw	r24, r28
    4dd8:	0e 96       	adiw	r24, 0x0e	; 14
    4dda:	fc 01       	movw	r30, r24
    4ddc:	e2 0f       	add	r30, r18
    4dde:	f3 1f       	adc	r31, r19
    4de0:	80 81       	ld	r24, Z
    4de2:	0e 94 53 20 	call	0x40a6	; 0x40a6 <LCD_voidSendData>

    // Null-terminate the string
    buffer[i] = '\0';

    // Send each character to the LCD
    for (u8 k = 0; buffer[k] != '\0'; k++) {
    4de6:	89 81       	ldd	r24, Y+1	; 0x01
    4de8:	8f 5f       	subi	r24, 0xFF	; 255
    4dea:	89 83       	std	Y+1, r24	; 0x01
    4dec:	89 81       	ldd	r24, Y+1	; 0x01
    4dee:	28 2f       	mov	r18, r24
    4df0:	30 e0       	ldi	r19, 0x00	; 0
    4df2:	ce 01       	movw	r24, r28
    4df4:	0e 96       	adiw	r24, 0x0e	; 14
    4df6:	fc 01       	movw	r30, r24
    4df8:	e2 0f       	add	r30, r18
    4dfa:	f3 1f       	adc	r31, r19
    4dfc:	80 81       	ld	r24, Z
    4dfe:	88 23       	and	r24, r24
    4e00:	39 f7       	brne	.-50     	; 0x4dd0 <LCD_voidWriteFloatNumber+0x1fe>
        LCD_voidSendData(buffer[k]);
    }
}
    4e02:	ed 96       	adiw	r28, 0x3d	; 61
    4e04:	0f b6       	in	r0, 0x3f	; 63
    4e06:	f8 94       	cli
    4e08:	de bf       	out	0x3e, r29	; 62
    4e0a:	0f be       	out	0x3f, r0	; 63
    4e0c:	cd bf       	out	0x3d, r28	; 61
    4e0e:	cf 91       	pop	r28
    4e10:	df 91       	pop	r29
    4e12:	1f 91       	pop	r17
    4e14:	0f 91       	pop	r16
    4e16:	08 95       	ret

00004e18 <KEYPAD_voidini>:
		{'N','0','=', '+'}
};



void KEYPAD_voidini (void){
    4e18:	df 93       	push	r29
    4e1a:	cf 93       	push	r28
    4e1c:	cd b7       	in	r28, 0x3d	; 61
    4e1e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(KEYPAD_DDR,KEYPAD_ROW0);
    4e20:	a7 e3       	ldi	r26, 0x37	; 55
    4e22:	b0 e0       	ldi	r27, 0x00	; 0
    4e24:	e7 e3       	ldi	r30, 0x37	; 55
    4e26:	f0 e0       	ldi	r31, 0x00	; 0
    4e28:	80 81       	ld	r24, Z
    4e2a:	81 60       	ori	r24, 0x01	; 1
    4e2c:	8c 93       	st	X, r24
	SET_BIT(KEYPAD_DDR,KEYPAD_ROW1);
    4e2e:	a7 e3       	ldi	r26, 0x37	; 55
    4e30:	b0 e0       	ldi	r27, 0x00	; 0
    4e32:	e7 e3       	ldi	r30, 0x37	; 55
    4e34:	f0 e0       	ldi	r31, 0x00	; 0
    4e36:	80 81       	ld	r24, Z
    4e38:	82 60       	ori	r24, 0x02	; 2
    4e3a:	8c 93       	st	X, r24
	SET_BIT(KEYPAD_DDR,KEYPAD_ROW2);
    4e3c:	a7 e3       	ldi	r26, 0x37	; 55
    4e3e:	b0 e0       	ldi	r27, 0x00	; 0
    4e40:	e7 e3       	ldi	r30, 0x37	; 55
    4e42:	f0 e0       	ldi	r31, 0x00	; 0
    4e44:	80 81       	ld	r24, Z
    4e46:	84 60       	ori	r24, 0x04	; 4
    4e48:	8c 93       	st	X, r24
	SET_BIT(KEYPAD_DDR,KEYPAD_ROW3);
    4e4a:	a7 e3       	ldi	r26, 0x37	; 55
    4e4c:	b0 e0       	ldi	r27, 0x00	; 0
    4e4e:	e7 e3       	ldi	r30, 0x37	; 55
    4e50:	f0 e0       	ldi	r31, 0x00	; 0
    4e52:	80 81       	ld	r24, Z
    4e54:	88 60       	ori	r24, 0x08	; 8
    4e56:	8c 93       	st	X, r24

	CLR_BIT(KEYPAD_DDR,KEYPAD_COLUM0);
    4e58:	a7 e3       	ldi	r26, 0x37	; 55
    4e5a:	b0 e0       	ldi	r27, 0x00	; 0
    4e5c:	e7 e3       	ldi	r30, 0x37	; 55
    4e5e:	f0 e0       	ldi	r31, 0x00	; 0
    4e60:	80 81       	ld	r24, Z
    4e62:	8f 7e       	andi	r24, 0xEF	; 239
    4e64:	8c 93       	st	X, r24
	CLR_BIT(KEYPAD_DDR,KEYPAD_COLUM1);
    4e66:	a7 e3       	ldi	r26, 0x37	; 55
    4e68:	b0 e0       	ldi	r27, 0x00	; 0
    4e6a:	e7 e3       	ldi	r30, 0x37	; 55
    4e6c:	f0 e0       	ldi	r31, 0x00	; 0
    4e6e:	80 81       	ld	r24, Z
    4e70:	8f 7d       	andi	r24, 0xDF	; 223
    4e72:	8c 93       	st	X, r24
	CLR_BIT(KEYPAD_DDR,KEYPAD_COLUM2);
    4e74:	a7 e3       	ldi	r26, 0x37	; 55
    4e76:	b0 e0       	ldi	r27, 0x00	; 0
    4e78:	e7 e3       	ldi	r30, 0x37	; 55
    4e7a:	f0 e0       	ldi	r31, 0x00	; 0
    4e7c:	80 81       	ld	r24, Z
    4e7e:	8f 7b       	andi	r24, 0xBF	; 191
    4e80:	8c 93       	st	X, r24
	CLR_BIT(KEYPAD_DDR,KEYPAD_COLUM3);
    4e82:	a7 e3       	ldi	r26, 0x37	; 55
    4e84:	b0 e0       	ldi	r27, 0x00	; 0
    4e86:	e7 e3       	ldi	r30, 0x37	; 55
    4e88:	f0 e0       	ldi	r31, 0x00	; 0
    4e8a:	80 81       	ld	r24, Z
    4e8c:	8f 77       	andi	r24, 0x7F	; 127
    4e8e:	8c 93       	st	X, r24

	KEYPAD_PORT=0xFF;
    4e90:	e8 e3       	ldi	r30, 0x38	; 56
    4e92:	f0 e0       	ldi	r31, 0x00	; 0
    4e94:	8f ef       	ldi	r24, 0xFF	; 255
    4e96:	80 83       	st	Z, r24
}
    4e98:	cf 91       	pop	r28
    4e9a:	df 91       	pop	r29
    4e9c:	08 95       	ret

00004e9e <KEYPAD_u8Scan>:

u8 KEYPAD_u8Scan (void){
    4e9e:	df 93       	push	r29
    4ea0:	cf 93       	push	r28
    4ea2:	cd b7       	in	r28, 0x3d	; 61
    4ea4:	de b7       	in	r29, 0x3e	; 62
    4ea6:	61 97       	sbiw	r28, 0x11	; 17
    4ea8:	0f b6       	in	r0, 0x3f	; 63
    4eaa:	f8 94       	cli
    4eac:	de bf       	out	0x3e, r29	; 62
    4eae:	0f be       	out	0x3f, r0	; 63
    4eb0:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8RowsCounter=0;
    4eb2:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8ColumnCounter=0;
    4eb4:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8PressedKey='\0';
    4eb6:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_u8RowsCounter=0;Local_u8RowsCounter<ROWS_NUMBER;Local_u8RowsCounter++){
    4eb8:	19 8a       	std	Y+17, r1	; 0x11
    4eba:	dd c0       	rjmp	.+442    	; 0x5076 <KEYPAD_u8Scan+0x1d8>
			CLR_BIT(KEYPAD_PORT,ROWS[Local_u8RowsCounter]); //active ROW
    4ebc:	a8 e3       	ldi	r26, 0x38	; 56
    4ebe:	b0 e0       	ldi	r27, 0x00	; 0
    4ec0:	e8 e3       	ldi	r30, 0x38	; 56
    4ec2:	f0 e0       	ldi	r31, 0x00	; 0
    4ec4:	80 81       	ld	r24, Z
    4ec6:	48 2f       	mov	r20, r24
    4ec8:	89 89       	ldd	r24, Y+17	; 0x11
    4eca:	88 2f       	mov	r24, r24
    4ecc:	90 e0       	ldi	r25, 0x00	; 0
    4ece:	fc 01       	movw	r30, r24
    4ed0:	e6 5e       	subi	r30, 0xE6	; 230
    4ed2:	fd 4f       	sbci	r31, 0xFD	; 253
    4ed4:	80 81       	ld	r24, Z
    4ed6:	28 2f       	mov	r18, r24
    4ed8:	30 e0       	ldi	r19, 0x00	; 0
    4eda:	81 e0       	ldi	r24, 0x01	; 1
    4edc:	90 e0       	ldi	r25, 0x00	; 0
    4ede:	02 2e       	mov	r0, r18
    4ee0:	02 c0       	rjmp	.+4      	; 0x4ee6 <KEYPAD_u8Scan+0x48>
    4ee2:	88 0f       	add	r24, r24
    4ee4:	99 1f       	adc	r25, r25
    4ee6:	0a 94       	dec	r0
    4ee8:	e2 f7       	brpl	.-8      	; 0x4ee2 <KEYPAD_u8Scan+0x44>
    4eea:	80 95       	com	r24
    4eec:	84 23       	and	r24, r20
    4eee:	8c 93       	st	X, r24
			for(Local_u8ColumnCounter=0;Local_u8ColumnCounter<COLUMS_NUMBER;Local_u8ColumnCounter++){
    4ef0:	18 8a       	std	Y+16, r1	; 0x10
    4ef2:	a1 c0       	rjmp	.+322    	; 0x5036 <KEYPAD_u8Scan+0x198>
				if(GET_BIT(KEYPAD_PIN,COLUMS[Local_u8ColumnCounter])==0){
    4ef4:	e6 e3       	ldi	r30, 0x36	; 54
    4ef6:	f0 e0       	ldi	r31, 0x00	; 0
    4ef8:	80 81       	ld	r24, Z
    4efa:	28 2f       	mov	r18, r24
    4efc:	30 e0       	ldi	r19, 0x00	; 0
    4efe:	88 89       	ldd	r24, Y+16	; 0x10
    4f00:	88 2f       	mov	r24, r24
    4f02:	90 e0       	ldi	r25, 0x00	; 0
    4f04:	fc 01       	movw	r30, r24
    4f06:	e2 5e       	subi	r30, 0xE2	; 226
    4f08:	fd 4f       	sbci	r31, 0xFD	; 253
    4f0a:	80 81       	ld	r24, Z
    4f0c:	88 2f       	mov	r24, r24
    4f0e:	90 e0       	ldi	r25, 0x00	; 0
    4f10:	a9 01       	movw	r20, r18
    4f12:	02 c0       	rjmp	.+4      	; 0x4f18 <KEYPAD_u8Scan+0x7a>
    4f14:	55 95       	asr	r21
    4f16:	47 95       	ror	r20
    4f18:	8a 95       	dec	r24
    4f1a:	e2 f7       	brpl	.-8      	; 0x4f14 <KEYPAD_u8Scan+0x76>
    4f1c:	ca 01       	movw	r24, r20
    4f1e:	81 70       	andi	r24, 0x01	; 1
    4f20:	90 70       	andi	r25, 0x00	; 0
    4f22:	00 97       	sbiw	r24, 0x00	; 0
    4f24:	09 f0       	breq	.+2      	; 0x4f28 <KEYPAD_u8Scan+0x8a>
    4f26:	84 c0       	rjmp	.+264    	; 0x5030 <KEYPAD_u8Scan+0x192>
					Local_u8PressedKey=KEYS[Local_u8RowsCounter][Local_u8ColumnCounter];
    4f28:	89 89       	ldd	r24, Y+17	; 0x11
    4f2a:	48 2f       	mov	r20, r24
    4f2c:	50 e0       	ldi	r21, 0x00	; 0
    4f2e:	88 89       	ldd	r24, Y+16	; 0x10
    4f30:	28 2f       	mov	r18, r24
    4f32:	30 e0       	ldi	r19, 0x00	; 0
    4f34:	ca 01       	movw	r24, r20
    4f36:	88 0f       	add	r24, r24
    4f38:	99 1f       	adc	r25, r25
    4f3a:	88 0f       	add	r24, r24
    4f3c:	99 1f       	adc	r25, r25
    4f3e:	82 0f       	add	r24, r18
    4f40:	93 1f       	adc	r25, r19
    4f42:	fc 01       	movw	r30, r24
    4f44:	ee 5d       	subi	r30, 0xDE	; 222
    4f46:	fd 4f       	sbci	r31, 0xFD	; 253
    4f48:	80 81       	ld	r24, Z
    4f4a:	8f 87       	std	Y+15, r24	; 0x0f
    4f4c:	80 e0       	ldi	r24, 0x00	; 0
    4f4e:	90 e0       	ldi	r25, 0x00	; 0
    4f50:	a0 e2       	ldi	r26, 0x20	; 32
    4f52:	b1 e4       	ldi	r27, 0x41	; 65
    4f54:	8b 87       	std	Y+11, r24	; 0x0b
    4f56:	9c 87       	std	Y+12, r25	; 0x0c
    4f58:	ad 87       	std	Y+13, r26	; 0x0d
    4f5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f64:	20 e0       	ldi	r18, 0x00	; 0
    4f66:	30 e0       	ldi	r19, 0x00	; 0
    4f68:	4a ef       	ldi	r20, 0xFA	; 250
    4f6a:	54 e4       	ldi	r21, 0x44	; 68
    4f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f70:	dc 01       	movw	r26, r24
    4f72:	cb 01       	movw	r24, r22
    4f74:	8f 83       	std	Y+7, r24	; 0x07
    4f76:	98 87       	std	Y+8, r25	; 0x08
    4f78:	a9 87       	std	Y+9, r26	; 0x09
    4f7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    4f7e:	78 85       	ldd	r23, Y+8	; 0x08
    4f80:	89 85       	ldd	r24, Y+9	; 0x09
    4f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f84:	20 e0       	ldi	r18, 0x00	; 0
    4f86:	30 e0       	ldi	r19, 0x00	; 0
    4f88:	40 e8       	ldi	r20, 0x80	; 128
    4f8a:	5f e3       	ldi	r21, 0x3F	; 63
    4f8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f90:	88 23       	and	r24, r24
    4f92:	2c f4       	brge	.+10     	; 0x4f9e <KEYPAD_u8Scan+0x100>
		__ticks = 1;
    4f94:	81 e0       	ldi	r24, 0x01	; 1
    4f96:	90 e0       	ldi	r25, 0x00	; 0
    4f98:	9e 83       	std	Y+6, r25	; 0x06
    4f9a:	8d 83       	std	Y+5, r24	; 0x05
    4f9c:	3f c0       	rjmp	.+126    	; 0x501c <KEYPAD_u8Scan+0x17e>
	else if (__tmp > 65535)
    4f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    4fa0:	78 85       	ldd	r23, Y+8	; 0x08
    4fa2:	89 85       	ldd	r24, Y+9	; 0x09
    4fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fa6:	20 e0       	ldi	r18, 0x00	; 0
    4fa8:	3f ef       	ldi	r19, 0xFF	; 255
    4faa:	4f e7       	ldi	r20, 0x7F	; 127
    4fac:	57 e4       	ldi	r21, 0x47	; 71
    4fae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fb2:	18 16       	cp	r1, r24
    4fb4:	4c f5       	brge	.+82     	; 0x5008 <KEYPAD_u8Scan+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fbe:	20 e0       	ldi	r18, 0x00	; 0
    4fc0:	30 e0       	ldi	r19, 0x00	; 0
    4fc2:	40 e2       	ldi	r20, 0x20	; 32
    4fc4:	51 e4       	ldi	r21, 0x41	; 65
    4fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fca:	dc 01       	movw	r26, r24
    4fcc:	cb 01       	movw	r24, r22
    4fce:	bc 01       	movw	r22, r24
    4fd0:	cd 01       	movw	r24, r26
    4fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fd6:	dc 01       	movw	r26, r24
    4fd8:	cb 01       	movw	r24, r22
    4fda:	9e 83       	std	Y+6, r25	; 0x06
    4fdc:	8d 83       	std	Y+5, r24	; 0x05
    4fde:	0f c0       	rjmp	.+30     	; 0x4ffe <KEYPAD_u8Scan+0x160>
    4fe0:	88 ec       	ldi	r24, 0xC8	; 200
    4fe2:	90 e0       	ldi	r25, 0x00	; 0
    4fe4:	9c 83       	std	Y+4, r25	; 0x04
    4fe6:	8b 83       	std	Y+3, r24	; 0x03
    4fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    4fea:	9c 81       	ldd	r25, Y+4	; 0x04
    4fec:	01 97       	sbiw	r24, 0x01	; 1
    4fee:	f1 f7       	brne	.-4      	; 0x4fec <KEYPAD_u8Scan+0x14e>
    4ff0:	9c 83       	std	Y+4, r25	; 0x04
    4ff2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ff8:	01 97       	sbiw	r24, 0x01	; 1
    4ffa:	9e 83       	std	Y+6, r25	; 0x06
    4ffc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    5000:	9e 81       	ldd	r25, Y+6	; 0x06
    5002:	00 97       	sbiw	r24, 0x00	; 0
    5004:	69 f7       	brne	.-38     	; 0x4fe0 <KEYPAD_u8Scan+0x142>
    5006:	14 c0       	rjmp	.+40     	; 0x5030 <KEYPAD_u8Scan+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5008:	6f 81       	ldd	r22, Y+7	; 0x07
    500a:	78 85       	ldd	r23, Y+8	; 0x08
    500c:	89 85       	ldd	r24, Y+9	; 0x09
    500e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5014:	dc 01       	movw	r26, r24
    5016:	cb 01       	movw	r24, r22
    5018:	9e 83       	std	Y+6, r25	; 0x06
    501a:	8d 83       	std	Y+5, r24	; 0x05
    501c:	8d 81       	ldd	r24, Y+5	; 0x05
    501e:	9e 81       	ldd	r25, Y+6	; 0x06
    5020:	9a 83       	std	Y+2, r25	; 0x02
    5022:	89 83       	std	Y+1, r24	; 0x01
    5024:	89 81       	ldd	r24, Y+1	; 0x01
    5026:	9a 81       	ldd	r25, Y+2	; 0x02
    5028:	01 97       	sbiw	r24, 0x01	; 1
    502a:	f1 f7       	brne	.-4      	; 0x5028 <KEYPAD_u8Scan+0x18a>
    502c:	9a 83       	std	Y+2, r25	; 0x02
    502e:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8RowsCounter=0;
	u8 Local_u8ColumnCounter=0;
	u8 Local_u8PressedKey='\0';
	for(Local_u8RowsCounter=0;Local_u8RowsCounter<ROWS_NUMBER;Local_u8RowsCounter++){
			CLR_BIT(KEYPAD_PORT,ROWS[Local_u8RowsCounter]); //active ROW
			for(Local_u8ColumnCounter=0;Local_u8ColumnCounter<COLUMS_NUMBER;Local_u8ColumnCounter++){
    5030:	88 89       	ldd	r24, Y+16	; 0x10
    5032:	8f 5f       	subi	r24, 0xFF	; 255
    5034:	88 8b       	std	Y+16, r24	; 0x10
    5036:	88 89       	ldd	r24, Y+16	; 0x10
    5038:	84 30       	cpi	r24, 0x04	; 4
    503a:	08 f4       	brcc	.+2      	; 0x503e <KEYPAD_u8Scan+0x1a0>
    503c:	5b cf       	rjmp	.-330    	; 0x4ef4 <KEYPAD_u8Scan+0x56>
				}
				else{
				}
			}

			SET_BIT(KEYPAD_PORT,ROWS[Local_u8RowsCounter]); //deactive ROW
    503e:	a8 e3       	ldi	r26, 0x38	; 56
    5040:	b0 e0       	ldi	r27, 0x00	; 0
    5042:	e8 e3       	ldi	r30, 0x38	; 56
    5044:	f0 e0       	ldi	r31, 0x00	; 0
    5046:	80 81       	ld	r24, Z
    5048:	48 2f       	mov	r20, r24
    504a:	89 89       	ldd	r24, Y+17	; 0x11
    504c:	88 2f       	mov	r24, r24
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	fc 01       	movw	r30, r24
    5052:	e6 5e       	subi	r30, 0xE6	; 230
    5054:	fd 4f       	sbci	r31, 0xFD	; 253
    5056:	80 81       	ld	r24, Z
    5058:	28 2f       	mov	r18, r24
    505a:	30 e0       	ldi	r19, 0x00	; 0
    505c:	81 e0       	ldi	r24, 0x01	; 1
    505e:	90 e0       	ldi	r25, 0x00	; 0
    5060:	02 2e       	mov	r0, r18
    5062:	02 c0       	rjmp	.+4      	; 0x5068 <KEYPAD_u8Scan+0x1ca>
    5064:	88 0f       	add	r24, r24
    5066:	99 1f       	adc	r25, r25
    5068:	0a 94       	dec	r0
    506a:	e2 f7       	brpl	.-8      	; 0x5064 <KEYPAD_u8Scan+0x1c6>
    506c:	84 2b       	or	r24, r20
    506e:	8c 93       	st	X, r24

u8 KEYPAD_u8Scan (void){
	u8 Local_u8RowsCounter=0;
	u8 Local_u8ColumnCounter=0;
	u8 Local_u8PressedKey='\0';
	for(Local_u8RowsCounter=0;Local_u8RowsCounter<ROWS_NUMBER;Local_u8RowsCounter++){
    5070:	89 89       	ldd	r24, Y+17	; 0x11
    5072:	8f 5f       	subi	r24, 0xFF	; 255
    5074:	89 8b       	std	Y+17, r24	; 0x11
    5076:	89 89       	ldd	r24, Y+17	; 0x11
    5078:	84 30       	cpi	r24, 0x04	; 4
    507a:	08 f4       	brcc	.+2      	; 0x507e <KEYPAD_u8Scan+0x1e0>
    507c:	1f cf       	rjmp	.-450    	; 0x4ebc <KEYPAD_u8Scan+0x1e>

			SET_BIT(KEYPAD_PORT,ROWS[Local_u8RowsCounter]); //deactive ROW

	}

	return Local_u8PressedKey;
    507e:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    5080:	61 96       	adiw	r28, 0x11	; 17
    5082:	0f b6       	in	r0, 0x3f	; 63
    5084:	f8 94       	cli
    5086:	de bf       	out	0x3e, r29	; 62
    5088:	0f be       	out	0x3f, r0	; 63
    508a:	cd bf       	out	0x3d, r28	; 61
    508c:	cf 91       	pop	r28
    508e:	df 91       	pop	r29
    5090:	08 95       	ret

00005092 <KEYPAD_u8ScanWithStop>:



u8 KEYPAD_u8ScanWithStop (void){
    5092:	df 93       	push	r29
    5094:	cf 93       	push	r28
    5096:	cd b7       	in	r28, 0x3d	; 61
    5098:	de b7       	in	r29, 0x3e	; 62
    509a:	61 97       	sbiw	r28, 0x11	; 17
    509c:	0f b6       	in	r0, 0x3f	; 63
    509e:	f8 94       	cli
    50a0:	de bf       	out	0x3e, r29	; 62
    50a2:	0f be       	out	0x3f, r0	; 63
    50a4:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8RowsCounter=0;
    50a6:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8ColumnCounter=0;
    50a8:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8PressedKey='\0';
    50aa:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_u8RowsCounter=0;Local_u8RowsCounter<ROWS_NUMBER;Local_u8RowsCounter++){
    50ac:	19 8a       	std	Y+17, r1	; 0x11
    50ae:	f6 c0       	rjmp	.+492    	; 0x529c <KEYPAD_u8ScanWithStop+0x20a>
		CLR_BIT(KEYPAD_PORT,ROWS[Local_u8RowsCounter]); //active ROW
    50b0:	a8 e3       	ldi	r26, 0x38	; 56
    50b2:	b0 e0       	ldi	r27, 0x00	; 0
    50b4:	e8 e3       	ldi	r30, 0x38	; 56
    50b6:	f0 e0       	ldi	r31, 0x00	; 0
    50b8:	80 81       	ld	r24, Z
    50ba:	48 2f       	mov	r20, r24
    50bc:	89 89       	ldd	r24, Y+17	; 0x11
    50be:	88 2f       	mov	r24, r24
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	fc 01       	movw	r30, r24
    50c4:	e6 5e       	subi	r30, 0xE6	; 230
    50c6:	fd 4f       	sbci	r31, 0xFD	; 253
    50c8:	80 81       	ld	r24, Z
    50ca:	28 2f       	mov	r18, r24
    50cc:	30 e0       	ldi	r19, 0x00	; 0
    50ce:	81 e0       	ldi	r24, 0x01	; 1
    50d0:	90 e0       	ldi	r25, 0x00	; 0
    50d2:	02 2e       	mov	r0, r18
    50d4:	02 c0       	rjmp	.+4      	; 0x50da <KEYPAD_u8ScanWithStop+0x48>
    50d6:	88 0f       	add	r24, r24
    50d8:	99 1f       	adc	r25, r25
    50da:	0a 94       	dec	r0
    50dc:	e2 f7       	brpl	.-8      	; 0x50d6 <KEYPAD_u8ScanWithStop+0x44>
    50de:	80 95       	com	r24
    50e0:	84 23       	and	r24, r20
    50e2:	8c 93       	st	X, r24
		for(Local_u8ColumnCounter=0;Local_u8ColumnCounter<COLUMS_NUMBER;Local_u8ColumnCounter++){
    50e4:	18 8a       	std	Y+16, r1	; 0x10
    50e6:	ba c0       	rjmp	.+372    	; 0x525c <KEYPAD_u8ScanWithStop+0x1ca>
			if(GET_BIT(KEYPAD_PIN,COLUMS[Local_u8ColumnCounter])==0){
    50e8:	e6 e3       	ldi	r30, 0x36	; 54
    50ea:	f0 e0       	ldi	r31, 0x00	; 0
    50ec:	80 81       	ld	r24, Z
    50ee:	28 2f       	mov	r18, r24
    50f0:	30 e0       	ldi	r19, 0x00	; 0
    50f2:	88 89       	ldd	r24, Y+16	; 0x10
    50f4:	88 2f       	mov	r24, r24
    50f6:	90 e0       	ldi	r25, 0x00	; 0
    50f8:	fc 01       	movw	r30, r24
    50fa:	e2 5e       	subi	r30, 0xE2	; 226
    50fc:	fd 4f       	sbci	r31, 0xFD	; 253
    50fe:	80 81       	ld	r24, Z
    5100:	88 2f       	mov	r24, r24
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	a9 01       	movw	r20, r18
    5106:	02 c0       	rjmp	.+4      	; 0x510c <KEYPAD_u8ScanWithStop+0x7a>
    5108:	55 95       	asr	r21
    510a:	47 95       	ror	r20
    510c:	8a 95       	dec	r24
    510e:	e2 f7       	brpl	.-8      	; 0x5108 <KEYPAD_u8ScanWithStop+0x76>
    5110:	ca 01       	movw	r24, r20
    5112:	81 70       	andi	r24, 0x01	; 1
    5114:	90 70       	andi	r25, 0x00	; 0
    5116:	00 97       	sbiw	r24, 0x00	; 0
    5118:	09 f0       	breq	.+2      	; 0x511c <KEYPAD_u8ScanWithStop+0x8a>
    511a:	9d c0       	rjmp	.+314    	; 0x5256 <KEYPAD_u8ScanWithStop+0x1c4>
				Local_u8PressedKey=KEYS[Local_u8RowsCounter][Local_u8ColumnCounter];
    511c:	89 89       	ldd	r24, Y+17	; 0x11
    511e:	48 2f       	mov	r20, r24
    5120:	50 e0       	ldi	r21, 0x00	; 0
    5122:	88 89       	ldd	r24, Y+16	; 0x10
    5124:	28 2f       	mov	r18, r24
    5126:	30 e0       	ldi	r19, 0x00	; 0
    5128:	ca 01       	movw	r24, r20
    512a:	88 0f       	add	r24, r24
    512c:	99 1f       	adc	r25, r25
    512e:	88 0f       	add	r24, r24
    5130:	99 1f       	adc	r25, r25
    5132:	82 0f       	add	r24, r18
    5134:	93 1f       	adc	r25, r19
    5136:	fc 01       	movw	r30, r24
    5138:	ee 5d       	subi	r30, 0xDE	; 222
    513a:	fd 4f       	sbci	r31, 0xFD	; 253
    513c:	80 81       	ld	r24, Z
    513e:	8f 87       	std	Y+15, r24	; 0x0f
    5140:	80 e0       	ldi	r24, 0x00	; 0
    5142:	90 e0       	ldi	r25, 0x00	; 0
    5144:	a0 e2       	ldi	r26, 0x20	; 32
    5146:	b1 e4       	ldi	r27, 0x41	; 65
    5148:	8b 87       	std	Y+11, r24	; 0x0b
    514a:	9c 87       	std	Y+12, r25	; 0x0c
    514c:	ad 87       	std	Y+13, r26	; 0x0d
    514e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5150:	6b 85       	ldd	r22, Y+11	; 0x0b
    5152:	7c 85       	ldd	r23, Y+12	; 0x0c
    5154:	8d 85       	ldd	r24, Y+13	; 0x0d
    5156:	9e 85       	ldd	r25, Y+14	; 0x0e
    5158:	20 e0       	ldi	r18, 0x00	; 0
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	4a ef       	ldi	r20, 0xFA	; 250
    515e:	54 e4       	ldi	r21, 0x44	; 68
    5160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5164:	dc 01       	movw	r26, r24
    5166:	cb 01       	movw	r24, r22
    5168:	8f 83       	std	Y+7, r24	; 0x07
    516a:	98 87       	std	Y+8, r25	; 0x08
    516c:	a9 87       	std	Y+9, r26	; 0x09
    516e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5170:	6f 81       	ldd	r22, Y+7	; 0x07
    5172:	78 85       	ldd	r23, Y+8	; 0x08
    5174:	89 85       	ldd	r24, Y+9	; 0x09
    5176:	9a 85       	ldd	r25, Y+10	; 0x0a
    5178:	20 e0       	ldi	r18, 0x00	; 0
    517a:	30 e0       	ldi	r19, 0x00	; 0
    517c:	40 e8       	ldi	r20, 0x80	; 128
    517e:	5f e3       	ldi	r21, 0x3F	; 63
    5180:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5184:	88 23       	and	r24, r24
    5186:	2c f4       	brge	.+10     	; 0x5192 <KEYPAD_u8ScanWithStop+0x100>
		__ticks = 1;
    5188:	81 e0       	ldi	r24, 0x01	; 1
    518a:	90 e0       	ldi	r25, 0x00	; 0
    518c:	9e 83       	std	Y+6, r25	; 0x06
    518e:	8d 83       	std	Y+5, r24	; 0x05
    5190:	3f c0       	rjmp	.+126    	; 0x5210 <KEYPAD_u8ScanWithStop+0x17e>
	else if (__tmp > 65535)
    5192:	6f 81       	ldd	r22, Y+7	; 0x07
    5194:	78 85       	ldd	r23, Y+8	; 0x08
    5196:	89 85       	ldd	r24, Y+9	; 0x09
    5198:	9a 85       	ldd	r25, Y+10	; 0x0a
    519a:	20 e0       	ldi	r18, 0x00	; 0
    519c:	3f ef       	ldi	r19, 0xFF	; 255
    519e:	4f e7       	ldi	r20, 0x7F	; 127
    51a0:	57 e4       	ldi	r21, 0x47	; 71
    51a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51a6:	18 16       	cp	r1, r24
    51a8:	4c f5       	brge	.+82     	; 0x51fc <KEYPAD_u8ScanWithStop+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    51ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    51ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    51b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    51b2:	20 e0       	ldi	r18, 0x00	; 0
    51b4:	30 e0       	ldi	r19, 0x00	; 0
    51b6:	40 e2       	ldi	r20, 0x20	; 32
    51b8:	51 e4       	ldi	r21, 0x41	; 65
    51ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51be:	dc 01       	movw	r26, r24
    51c0:	cb 01       	movw	r24, r22
    51c2:	bc 01       	movw	r22, r24
    51c4:	cd 01       	movw	r24, r26
    51c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51ca:	dc 01       	movw	r26, r24
    51cc:	cb 01       	movw	r24, r22
    51ce:	9e 83       	std	Y+6, r25	; 0x06
    51d0:	8d 83       	std	Y+5, r24	; 0x05
    51d2:	0f c0       	rjmp	.+30     	; 0x51f2 <KEYPAD_u8ScanWithStop+0x160>
    51d4:	88 ec       	ldi	r24, 0xC8	; 200
    51d6:	90 e0       	ldi	r25, 0x00	; 0
    51d8:	9c 83       	std	Y+4, r25	; 0x04
    51da:	8b 83       	std	Y+3, r24	; 0x03
    51dc:	8b 81       	ldd	r24, Y+3	; 0x03
    51de:	9c 81       	ldd	r25, Y+4	; 0x04
    51e0:	01 97       	sbiw	r24, 0x01	; 1
    51e2:	f1 f7       	brne	.-4      	; 0x51e0 <KEYPAD_u8ScanWithStop+0x14e>
    51e4:	9c 83       	std	Y+4, r25	; 0x04
    51e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51e8:	8d 81       	ldd	r24, Y+5	; 0x05
    51ea:	9e 81       	ldd	r25, Y+6	; 0x06
    51ec:	01 97       	sbiw	r24, 0x01	; 1
    51ee:	9e 83       	std	Y+6, r25	; 0x06
    51f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51f2:	8d 81       	ldd	r24, Y+5	; 0x05
    51f4:	9e 81       	ldd	r25, Y+6	; 0x06
    51f6:	00 97       	sbiw	r24, 0x00	; 0
    51f8:	69 f7       	brne	.-38     	; 0x51d4 <KEYPAD_u8ScanWithStop+0x142>
    51fa:	14 c0       	rjmp	.+40     	; 0x5224 <KEYPAD_u8ScanWithStop+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51fc:	6f 81       	ldd	r22, Y+7	; 0x07
    51fe:	78 85       	ldd	r23, Y+8	; 0x08
    5200:	89 85       	ldd	r24, Y+9	; 0x09
    5202:	9a 85       	ldd	r25, Y+10	; 0x0a
    5204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5208:	dc 01       	movw	r26, r24
    520a:	cb 01       	movw	r24, r22
    520c:	9e 83       	std	Y+6, r25	; 0x06
    520e:	8d 83       	std	Y+5, r24	; 0x05
    5210:	8d 81       	ldd	r24, Y+5	; 0x05
    5212:	9e 81       	ldd	r25, Y+6	; 0x06
    5214:	9a 83       	std	Y+2, r25	; 0x02
    5216:	89 83       	std	Y+1, r24	; 0x01
    5218:	89 81       	ldd	r24, Y+1	; 0x01
    521a:	9a 81       	ldd	r25, Y+2	; 0x02
    521c:	01 97       	sbiw	r24, 0x01	; 1
    521e:	f1 f7       	brne	.-4      	; 0x521c <KEYPAD_u8ScanWithStop+0x18a>
    5220:	9a 83       	std	Y+2, r25	; 0x02
    5222:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);//debouncing
				while(GET_BIT(KEYPAD_PIN,COLUMS[Local_u8ColumnCounter])==0);
    5224:	e6 e3       	ldi	r30, 0x36	; 54
    5226:	f0 e0       	ldi	r31, 0x00	; 0
    5228:	80 81       	ld	r24, Z
    522a:	28 2f       	mov	r18, r24
    522c:	30 e0       	ldi	r19, 0x00	; 0
    522e:	88 89       	ldd	r24, Y+16	; 0x10
    5230:	88 2f       	mov	r24, r24
    5232:	90 e0       	ldi	r25, 0x00	; 0
    5234:	fc 01       	movw	r30, r24
    5236:	e2 5e       	subi	r30, 0xE2	; 226
    5238:	fd 4f       	sbci	r31, 0xFD	; 253
    523a:	80 81       	ld	r24, Z
    523c:	88 2f       	mov	r24, r24
    523e:	90 e0       	ldi	r25, 0x00	; 0
    5240:	a9 01       	movw	r20, r18
    5242:	02 c0       	rjmp	.+4      	; 0x5248 <KEYPAD_u8ScanWithStop+0x1b6>
    5244:	55 95       	asr	r21
    5246:	47 95       	ror	r20
    5248:	8a 95       	dec	r24
    524a:	e2 f7       	brpl	.-8      	; 0x5244 <KEYPAD_u8ScanWithStop+0x1b2>
    524c:	ca 01       	movw	r24, r20
    524e:	81 70       	andi	r24, 0x01	; 1
    5250:	90 70       	andi	r25, 0x00	; 0
    5252:	00 97       	sbiw	r24, 0x00	; 0
    5254:	39 f3       	breq	.-50     	; 0x5224 <KEYPAD_u8ScanWithStop+0x192>
	u8 Local_u8RowsCounter=0;
	u8 Local_u8ColumnCounter=0;
	u8 Local_u8PressedKey='\0';
	for(Local_u8RowsCounter=0;Local_u8RowsCounter<ROWS_NUMBER;Local_u8RowsCounter++){
		CLR_BIT(KEYPAD_PORT,ROWS[Local_u8RowsCounter]); //active ROW
		for(Local_u8ColumnCounter=0;Local_u8ColumnCounter<COLUMS_NUMBER;Local_u8ColumnCounter++){
    5256:	88 89       	ldd	r24, Y+16	; 0x10
    5258:	8f 5f       	subi	r24, 0xFF	; 255
    525a:	88 8b       	std	Y+16, r24	; 0x10
    525c:	88 89       	ldd	r24, Y+16	; 0x10
    525e:	84 30       	cpi	r24, 0x04	; 4
    5260:	08 f4       	brcc	.+2      	; 0x5264 <KEYPAD_u8ScanWithStop+0x1d2>
    5262:	42 cf       	rjmp	.-380    	; 0x50e8 <KEYPAD_u8ScanWithStop+0x56>
				while(GET_BIT(KEYPAD_PIN,COLUMS[Local_u8ColumnCounter])==0);
			}
			else{
			}
		}
		SET_BIT(KEYPAD_PORT,ROWS[Local_u8RowsCounter]); //deactive ROW
    5264:	a8 e3       	ldi	r26, 0x38	; 56
    5266:	b0 e0       	ldi	r27, 0x00	; 0
    5268:	e8 e3       	ldi	r30, 0x38	; 56
    526a:	f0 e0       	ldi	r31, 0x00	; 0
    526c:	80 81       	ld	r24, Z
    526e:	48 2f       	mov	r20, r24
    5270:	89 89       	ldd	r24, Y+17	; 0x11
    5272:	88 2f       	mov	r24, r24
    5274:	90 e0       	ldi	r25, 0x00	; 0
    5276:	fc 01       	movw	r30, r24
    5278:	e6 5e       	subi	r30, 0xE6	; 230
    527a:	fd 4f       	sbci	r31, 0xFD	; 253
    527c:	80 81       	ld	r24, Z
    527e:	28 2f       	mov	r18, r24
    5280:	30 e0       	ldi	r19, 0x00	; 0
    5282:	81 e0       	ldi	r24, 0x01	; 1
    5284:	90 e0       	ldi	r25, 0x00	; 0
    5286:	02 2e       	mov	r0, r18
    5288:	02 c0       	rjmp	.+4      	; 0x528e <KEYPAD_u8ScanWithStop+0x1fc>
    528a:	88 0f       	add	r24, r24
    528c:	99 1f       	adc	r25, r25
    528e:	0a 94       	dec	r0
    5290:	e2 f7       	brpl	.-8      	; 0x528a <KEYPAD_u8ScanWithStop+0x1f8>
    5292:	84 2b       	or	r24, r20
    5294:	8c 93       	st	X, r24

u8 KEYPAD_u8ScanWithStop (void){
	u8 Local_u8RowsCounter=0;
	u8 Local_u8ColumnCounter=0;
	u8 Local_u8PressedKey='\0';
	for(Local_u8RowsCounter=0;Local_u8RowsCounter<ROWS_NUMBER;Local_u8RowsCounter++){
    5296:	89 89       	ldd	r24, Y+17	; 0x11
    5298:	8f 5f       	subi	r24, 0xFF	; 255
    529a:	89 8b       	std	Y+17, r24	; 0x11
    529c:	89 89       	ldd	r24, Y+17	; 0x11
    529e:	84 30       	cpi	r24, 0x04	; 4
    52a0:	08 f4       	brcc	.+2      	; 0x52a4 <KEYPAD_u8ScanWithStop+0x212>
    52a2:	06 cf       	rjmp	.-500    	; 0x50b0 <KEYPAD_u8ScanWithStop+0x1e>
			else{
			}
		}
		SET_BIT(KEYPAD_PORT,ROWS[Local_u8RowsCounter]); //deactive ROW
	}
	return Local_u8PressedKey;
    52a4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    52a6:	61 96       	adiw	r28, 0x11	; 17
    52a8:	0f b6       	in	r0, 0x3f	; 63
    52aa:	f8 94       	cli
    52ac:	de bf       	out	0x3e, r29	; 62
    52ae:	0f be       	out	0x3f, r0	; 63
    52b0:	cd bf       	out	0x3d, r28	; 61
    52b2:	cf 91       	pop	r28
    52b4:	df 91       	pop	r29
    52b6:	08 95       	ret

000052b8 <HICU_voidAttachICU>:
	#define HICU_ATTACHED_EXTI		EXT_INT2
#else
	#error "HICU_ATTACH_EXTI configration is not correct"
#endif

void HICU_voidAttachICU(void){
    52b8:	df 93       	push	r29
    52ba:	cf 93       	push	r28
    52bc:	cd b7       	in	r28, 0x3d	; 61
    52be:	de b7       	in	r29, 0x3e	; 62
	Intrrupt_Init(HICU_ATTACHED_EXTI,RISING);
    52c0:	81 e0       	ldi	r24, 0x01	; 1
    52c2:	60 e0       	ldi	r22, 0x00	; 0
    52c4:	0e 94 82 18 	call	0x3104	; 0x3104 <Intrrupt_Init>
	Intrrupt_GetFun(HICU_ATTACHED_EXTI,HICU_voidICUAlgorithm);
    52c8:	2d e9       	ldi	r18, 0x9D	; 157
    52ca:	39 e2       	ldi	r19, 0x29	; 41
    52cc:	81 e0       	ldi	r24, 0x01	; 1
    52ce:	b9 01       	movw	r22, r18
    52d0:	0e 94 f6 19 	call	0x33ec	; 0x33ec <Intrrupt_GetFun>
	Intrrupt_Enabled(HICU_ATTACHED_EXTI);
    52d4:	81 e0       	ldi	r24, 0x01	; 1
    52d6:	0e 94 81 19 	call	0x3302	; 0x3302 <Intrrupt_Enabled>
}
    52da:	cf 91       	pop	r28
    52dc:	df 91       	pop	r29
    52de:	08 95       	ret

000052e0 <HICU_voidGetPWMVlues>:
void HICU_voidGetPWMVlues(f32 * ptr_f32DutyCycle,f32 * ptr_f32Frequncy){
    52e0:	df 93       	push	r29
    52e2:	cf 93       	push	r28
    52e4:	00 d0       	rcall	.+0      	; 0x52e6 <HICU_voidGetPWMVlues+0x6>
    52e6:	00 d0       	rcall	.+0      	; 0x52e8 <HICU_voidGetPWMVlues+0x8>
    52e8:	cd b7       	in	r28, 0x3d	; 61
    52ea:	de b7       	in	r29, 0x3e	; 62
    52ec:	9a 83       	std	Y+2, r25	; 0x02
    52ee:	89 83       	std	Y+1, r24	; 0x01
    52f0:	7c 83       	std	Y+4, r23	; 0x04
    52f2:	6b 83       	std	Y+3, r22	; 0x03
	*ptr_f32DutyCycle=DutyCycle;
    52f4:	80 91 6a 02 	lds	r24, 0x026A
    52f8:	90 91 6b 02 	lds	r25, 0x026B
    52fc:	a0 91 6c 02 	lds	r26, 0x026C
    5300:	b0 91 6d 02 	lds	r27, 0x026D
    5304:	e9 81       	ldd	r30, Y+1	; 0x01
    5306:	fa 81       	ldd	r31, Y+2	; 0x02
    5308:	80 83       	st	Z, r24
    530a:	91 83       	std	Z+1, r25	; 0x01
    530c:	a2 83       	std	Z+2, r26	; 0x02
    530e:	b3 83       	std	Z+3, r27	; 0x03
	*ptr_f32Frequncy=Frequncy;
    5310:	80 91 6e 02 	lds	r24, 0x026E
    5314:	90 91 6f 02 	lds	r25, 0x026F
    5318:	a0 91 70 02 	lds	r26, 0x0270
    531c:	b0 91 71 02 	lds	r27, 0x0271
    5320:	eb 81       	ldd	r30, Y+3	; 0x03
    5322:	fc 81       	ldd	r31, Y+4	; 0x04
    5324:	80 83       	st	Z, r24
    5326:	91 83       	std	Z+1, r25	; 0x01
    5328:	a2 83       	std	Z+2, r26	; 0x02
    532a:	b3 83       	std	Z+3, r27	; 0x03
}
    532c:	0f 90       	pop	r0
    532e:	0f 90       	pop	r0
    5330:	0f 90       	pop	r0
    5332:	0f 90       	pop	r0
    5334:	cf 91       	pop	r28
    5336:	df 91       	pop	r29
    5338:	08 95       	ret

0000533a <HICU_voidICUAlgorithm>:

static void HICU_voidICUAlgorithm(void){
    533a:	af 92       	push	r10
    533c:	bf 92       	push	r11
    533e:	cf 92       	push	r12
    5340:	df 92       	push	r13
    5342:	ef 92       	push	r14
    5344:	ff 92       	push	r15
    5346:	0f 93       	push	r16
    5348:	1f 93       	push	r17
    534a:	df 93       	push	r29
    534c:	cf 93       	push	r28
    534e:	00 d0       	rcall	.+0      	; 0x5350 <HICU_voidICUAlgorithm+0x16>
    5350:	cd b7       	in	r28, 0x3d	; 61
    5352:	de b7       	in	r29, 0x3e	; 62
	static volatile HICU_STATE_T State=HICU_ICU_FIRST_RISING;
	static volatile HICU_TIM_TYPE Local_TIMTypeTempCount=0;
	static volatile HICU_TIM_TYPE Local_TIMTypePWMTimeONCount=0;
	static volatile HICU_TIM_TYPE Local_TIMTypePWMTimeOFFCount=0;
	switch(State){
    5354:	80 91 78 02 	lds	r24, 0x0278
    5358:	28 2f       	mov	r18, r24
    535a:	30 e0       	ldi	r19, 0x00	; 0
    535c:	3a 83       	std	Y+2, r19	; 0x02
    535e:	29 83       	std	Y+1, r18	; 0x01
    5360:	49 81       	ldd	r20, Y+1	; 0x01
    5362:	5a 81       	ldd	r21, Y+2	; 0x02
    5364:	41 30       	cpi	r20, 0x01	; 1
    5366:	51 05       	cpc	r21, r1
    5368:	d1 f0       	breq	.+52     	; 0x539e <HICU_voidICUAlgorithm+0x64>
    536a:	89 81       	ldd	r24, Y+1	; 0x01
    536c:	9a 81       	ldd	r25, Y+2	; 0x02
    536e:	82 30       	cpi	r24, 0x02	; 2
    5370:	91 05       	cpc	r25, r1
    5372:	a1 f1       	breq	.+104    	; 0x53dc <HICU_voidICUAlgorithm+0xa2>
    5374:	29 81       	ldd	r18, Y+1	; 0x01
    5376:	3a 81       	ldd	r19, Y+2	; 0x02
    5378:	21 15       	cp	r18, r1
    537a:	31 05       	cpc	r19, r1
    537c:	09 f0       	breq	.+2      	; 0x5380 <HICU_voidICUAlgorithm+0x46>
    537e:	b6 c0       	rjmp	.+364    	; 0x54ec <HICU_voidICUAlgorithm+0x1b2>
		case(HICU_ICU_FIRST_RISING):
				 Local_TIMTypeTempCount=TIM_u16GetTimerCount(HICU_ATTACHED_TIM);
    5380:	81 e0       	ldi	r24, 0x01	; 1
    5382:	0e 94 bf 11 	call	0x237e	; 0x237e <TIM_u16GetTimerCount>
    5386:	90 93 77 02 	sts	0x0277, r25
    538a:	80 93 76 02 	sts	0x0276, r24
				 Intrrupt_Init(HICU_ATTACHED_EXTI,FALLING);
    538e:	81 e0       	ldi	r24, 0x01	; 1
    5390:	61 e0       	ldi	r22, 0x01	; 1
    5392:	0e 94 82 18 	call	0x3104	; 0x3104 <Intrrupt_Init>
				 State=HICU_ICU_FALLING;
    5396:	81 e0       	ldi	r24, 0x01	; 1
    5398:	80 93 78 02 	sts	0x0278, r24
    539c:	a7 c0       	rjmp	.+334    	; 0x54ec <HICU_voidICUAlgorithm+0x1b2>
		break;
		case(HICU_ICU_FALLING):
				 Local_TIMTypePWMTimeONCount=TIM_u16GetTimerCount(HICU_ATTACHED_TIM)-Local_TIMTypeTempCount;
    539e:	81 e0       	ldi	r24, 0x01	; 1
    53a0:	0e 94 bf 11 	call	0x237e	; 0x237e <TIM_u16GetTimerCount>
    53a4:	9c 01       	movw	r18, r24
    53a6:	80 91 76 02 	lds	r24, 0x0276
    53aa:	90 91 77 02 	lds	r25, 0x0277
    53ae:	a9 01       	movw	r20, r18
    53b0:	48 1b       	sub	r20, r24
    53b2:	59 0b       	sbc	r21, r25
    53b4:	ca 01       	movw	r24, r20
    53b6:	90 93 75 02 	sts	0x0275, r25
    53ba:	80 93 74 02 	sts	0x0274, r24
				 Local_TIMTypeTempCount=TIM_u16GetTimerCount(HICU_ATTACHED_TIM);
    53be:	81 e0       	ldi	r24, 0x01	; 1
    53c0:	0e 94 bf 11 	call	0x237e	; 0x237e <TIM_u16GetTimerCount>
    53c4:	90 93 77 02 	sts	0x0277, r25
    53c8:	80 93 76 02 	sts	0x0276, r24
				 Intrrupt_Init(HICU_ATTACHED_EXTI,RISING);
    53cc:	81 e0       	ldi	r24, 0x01	; 1
    53ce:	60 e0       	ldi	r22, 0x00	; 0
    53d0:	0e 94 82 18 	call	0x3104	; 0x3104 <Intrrupt_Init>
				 State=HICU_ICU_SECOND_RISING;
    53d4:	82 e0       	ldi	r24, 0x02	; 2
    53d6:	80 93 78 02 	sts	0x0278, r24
    53da:	88 c0       	rjmp	.+272    	; 0x54ec <HICU_voidICUAlgorithm+0x1b2>
		break;
		case(HICU_ICU_SECOND_RISING):
				 Local_TIMTypePWMTimeOFFCount=TIM_u16GetTimerCount(HICU_ATTACHED_TIM)-Local_TIMTypeTempCount;
    53dc:	81 e0       	ldi	r24, 0x01	; 1
    53de:	0e 94 bf 11 	call	0x237e	; 0x237e <TIM_u16GetTimerCount>
    53e2:	9c 01       	movw	r18, r24
    53e4:	80 91 76 02 	lds	r24, 0x0276
    53e8:	90 91 77 02 	lds	r25, 0x0277
    53ec:	a9 01       	movw	r20, r18
    53ee:	48 1b       	sub	r20, r24
    53f0:	59 0b       	sbc	r21, r25
    53f2:	ca 01       	movw	r24, r20
    53f4:	90 93 73 02 	sts	0x0273, r25
    53f8:	80 93 72 02 	sts	0x0272, r24
				 Frequncy= (f32)1000000/(((f32)(Local_TIMTypePWMTimeONCount+Local_TIMTypePWMTimeOFFCount))*HICU_TIM_TICKTIME_US);
    53fc:	20 91 74 02 	lds	r18, 0x0274
    5400:	30 91 75 02 	lds	r19, 0x0275
    5404:	80 91 72 02 	lds	r24, 0x0272
    5408:	90 91 73 02 	lds	r25, 0x0273
    540c:	82 0f       	add	r24, r18
    540e:	93 1f       	adc	r25, r19
    5410:	cc 01       	movw	r24, r24
    5412:	a0 e0       	ldi	r26, 0x00	; 0
    5414:	b0 e0       	ldi	r27, 0x00	; 0
    5416:	bc 01       	movw	r22, r24
    5418:	cd 01       	movw	r24, r26
    541a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    541e:	dc 01       	movw	r26, r24
    5420:	cb 01       	movw	r24, r22
    5422:	bc 01       	movw	r22, r24
    5424:	cd 01       	movw	r24, r26
    5426:	20 e0       	ldi	r18, 0x00	; 0
    5428:	30 e0       	ldi	r19, 0x00	; 0
    542a:	40 e0       	ldi	r20, 0x00	; 0
    542c:	53 e4       	ldi	r21, 0x43	; 67
    542e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5432:	dc 01       	movw	r26, r24
    5434:	cb 01       	movw	r24, r22
    5436:	9c 01       	movw	r18, r24
    5438:	ad 01       	movw	r20, r26
    543a:	60 e0       	ldi	r22, 0x00	; 0
    543c:	74 e2       	ldi	r23, 0x24	; 36
    543e:	84 e7       	ldi	r24, 0x74	; 116
    5440:	99 e4       	ldi	r25, 0x49	; 73
    5442:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5446:	dc 01       	movw	r26, r24
    5448:	cb 01       	movw	r24, r22
    544a:	80 93 6e 02 	sts	0x026E, r24
    544e:	90 93 6f 02 	sts	0x026F, r25
    5452:	a0 93 70 02 	sts	0x0270, r26
    5456:	b0 93 71 02 	sts	0x0271, r27
				 DutyCycle= ((f32)Local_TIMTypePWMTimeONCount/((f32)Local_TIMTypePWMTimeONCount+Local_TIMTypePWMTimeOFFCount))*100;
    545a:	80 91 74 02 	lds	r24, 0x0274
    545e:	90 91 75 02 	lds	r25, 0x0275
    5462:	cc 01       	movw	r24, r24
    5464:	a0 e0       	ldi	r26, 0x00	; 0
    5466:	b0 e0       	ldi	r27, 0x00	; 0
    5468:	bc 01       	movw	r22, r24
    546a:	cd 01       	movw	r24, r26
    546c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    5470:	5b 01       	movw	r10, r22
    5472:	6c 01       	movw	r12, r24
    5474:	80 91 74 02 	lds	r24, 0x0274
    5478:	90 91 75 02 	lds	r25, 0x0275
    547c:	cc 01       	movw	r24, r24
    547e:	a0 e0       	ldi	r26, 0x00	; 0
    5480:	b0 e0       	ldi	r27, 0x00	; 0
    5482:	bc 01       	movw	r22, r24
    5484:	cd 01       	movw	r24, r26
    5486:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    548a:	7b 01       	movw	r14, r22
    548c:	8c 01       	movw	r16, r24
    548e:	80 91 72 02 	lds	r24, 0x0272
    5492:	90 91 73 02 	lds	r25, 0x0273
    5496:	cc 01       	movw	r24, r24
    5498:	a0 e0       	ldi	r26, 0x00	; 0
    549a:	b0 e0       	ldi	r27, 0x00	; 0
    549c:	bc 01       	movw	r22, r24
    549e:	cd 01       	movw	r24, r26
    54a0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    54a4:	9b 01       	movw	r18, r22
    54a6:	ac 01       	movw	r20, r24
    54a8:	c8 01       	movw	r24, r16
    54aa:	b7 01       	movw	r22, r14
    54ac:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    54b0:	dc 01       	movw	r26, r24
    54b2:	cb 01       	movw	r24, r22
    54b4:	9c 01       	movw	r18, r24
    54b6:	ad 01       	movw	r20, r26
    54b8:	c6 01       	movw	r24, r12
    54ba:	b5 01       	movw	r22, r10
    54bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    54c0:	dc 01       	movw	r26, r24
    54c2:	cb 01       	movw	r24, r22
    54c4:	bc 01       	movw	r22, r24
    54c6:	cd 01       	movw	r24, r26
    54c8:	20 e0       	ldi	r18, 0x00	; 0
    54ca:	30 e0       	ldi	r19, 0x00	; 0
    54cc:	48 ec       	ldi	r20, 0xC8	; 200
    54ce:	52 e4       	ldi	r21, 0x42	; 66
    54d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54d4:	dc 01       	movw	r26, r24
    54d6:	cb 01       	movw	r24, r22
    54d8:	80 93 6a 02 	sts	0x026A, r24
    54dc:	90 93 6b 02 	sts	0x026B, r25
    54e0:	a0 93 6c 02 	sts	0x026C, r26
    54e4:	b0 93 6d 02 	sts	0x026D, r27
				 State=HICU_ICU_FIRST_RISING;
    54e8:	10 92 78 02 	sts	0x0278, r1
		break;
		default:
		break;

	}
}
    54ec:	0f 90       	pop	r0
    54ee:	0f 90       	pop	r0
    54f0:	cf 91       	pop	r28
    54f2:	df 91       	pop	r29
    54f4:	1f 91       	pop	r17
    54f6:	0f 91       	pop	r16
    54f8:	ff 90       	pop	r15
    54fa:	ef 90       	pop	r14
    54fc:	df 90       	pop	r13
    54fe:	cf 90       	pop	r12
    5500:	bf 90       	pop	r11
    5502:	af 90       	pop	r10
    5504:	08 95       	ret

00005506 <Toggle_led1>:
u16 user_password_keypad = '\0';
u16 user_password_web = '\0';
u16 password_repeated_times_keypad = 0;
u16 password_repeated_times_web = 0;

void Toggle_led1(void){
    5506:	df 93       	push	r29
    5508:	cf 93       	push	r28
    550a:	cd b7       	in	r28, 0x3d	; 61
    550c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinsValue(DIOA,DIO_PIN2,DIO_LOW);
    550e:	89 e3       	ldi	r24, 0x39	; 57
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	64 e0       	ldi	r22, 0x04	; 4
    5514:	40 e0       	ldi	r20, 0x00	; 0
    5516:	0e 94 ed 1a 	call	0x35da	; 0x35da <DIO_voidSetPinsValue>
	DIO_voidSetPinsValue(DIOA,DIO_PIN0,DIO_HIGH);
    551a:	89 e3       	ldi	r24, 0x39	; 57
    551c:	90 e0       	ldi	r25, 0x00	; 0
    551e:	61 e0       	ldi	r22, 0x01	; 1
    5520:	4f ef       	ldi	r20, 0xFF	; 255
    5522:	0e 94 ed 1a 	call	0x35da	; 0x35da <DIO_voidSetPinsValue>
}
    5526:	cf 91       	pop	r28
    5528:	df 91       	pop	r29
    552a:	08 95       	ret

0000552c <Toggle_led2>:

void Toggle_led2(void){
    552c:	df 93       	push	r29
    552e:	cf 93       	push	r28
    5530:	cd b7       	in	r28, 0x3d	; 61
    5532:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinsValue(DIOA,DIO_PIN2,DIO_HIGH);
    5534:	89 e3       	ldi	r24, 0x39	; 57
    5536:	90 e0       	ldi	r25, 0x00	; 0
    5538:	64 e0       	ldi	r22, 0x04	; 4
    553a:	4f ef       	ldi	r20, 0xFF	; 255
    553c:	0e 94 ed 1a 	call	0x35da	; 0x35da <DIO_voidSetPinsValue>
	DIO_voidSetPinsValue(DIOA,DIO_PIN0,DIO_LOW);
    5540:	89 e3       	ldi	r24, 0x39	; 57
    5542:	90 e0       	ldi	r25, 0x00	; 0
    5544:	61 e0       	ldi	r22, 0x01	; 1
    5546:	40 e0       	ldi	r20, 0x00	; 0
    5548:	0e 94 ed 1a 	call	0x35da	; 0x35da <DIO_voidSetPinsValue>
}
    554c:	cf 91       	pop	r28
    554e:	df 91       	pop	r29
    5550:	08 95       	ret

00005552 <Red_blink>:

void Red_blink(void){
    5552:	df 93       	push	r29
    5554:	cf 93       	push	r28
    5556:	cd b7       	in	r28, 0x3d	; 61
    5558:	de b7       	in	r29, 0x3e	; 62
    555a:	ae 97       	sbiw	r28, 0x2e	; 46
    555c:	0f b6       	in	r0, 0x3f	; 63
    555e:	f8 94       	cli
    5560:	de bf       	out	0x3e, r29	; 62
    5562:	0f be       	out	0x3f, r0	; 63
    5564:	cd bf       	out	0x3d, r28	; 61
	u32 counter=0;
    5566:	1b a6       	std	Y+43, r1	; 0x2b
    5568:	1c a6       	std	Y+44, r1	; 0x2c
    556a:	1d a6       	std	Y+45, r1	; 0x2d
    556c:	1e a6       	std	Y+46, r1	; 0x2e
	DIO_voidSetPinsValue(DIOA,DIO_PIN2,DIO_LOW);
    556e:	89 e3       	ldi	r24, 0x39	; 57
    5570:	90 e0       	ldi	r25, 0x00	; 0
    5572:	64 e0       	ldi	r22, 0x04	; 4
    5574:	40 e0       	ldi	r20, 0x00	; 0
    5576:	0e 94 ed 1a 	call	0x35da	; 0x35da <DIO_voidSetPinsValue>

	for(counter=0; counter<=10; counter++){
    557a:	1b a6       	std	Y+43, r1	; 0x2b
    557c:	1c a6       	std	Y+44, r1	; 0x2c
    557e:	1d a6       	std	Y+45, r1	; 0x2d
    5580:	1e a6       	std	Y+46, r1	; 0x2e
    5582:	79 c1       	rjmp	.+754    	; 0x5876 <Red_blink+0x324>

		DIO_voidSetPinsValue(DIOA,DIO_PIN0,DIO_HIGH);
    5584:	89 e3       	ldi	r24, 0x39	; 57
    5586:	90 e0       	ldi	r25, 0x00	; 0
    5588:	61 e0       	ldi	r22, 0x01	; 1
    558a:	4f ef       	ldi	r20, 0xFF	; 255
    558c:	0e 94 ed 1a 	call	0x35da	; 0x35da <DIO_voidSetPinsValue>
    5590:	80 e0       	ldi	r24, 0x00	; 0
    5592:	90 e0       	ldi	r25, 0x00	; 0
    5594:	a6 e9       	ldi	r26, 0x96	; 150
    5596:	b3 e4       	ldi	r27, 0x43	; 67
    5598:	8f a3       	std	Y+39, r24	; 0x27
    559a:	98 a7       	std	Y+40, r25	; 0x28
    559c:	a9 a7       	std	Y+41, r26	; 0x29
    559e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55a0:	6f a1       	ldd	r22, Y+39	; 0x27
    55a2:	78 a5       	ldd	r23, Y+40	; 0x28
    55a4:	89 a5       	ldd	r24, Y+41	; 0x29
    55a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    55a8:	20 e0       	ldi	r18, 0x00	; 0
    55aa:	30 e0       	ldi	r19, 0x00	; 0
    55ac:	4a ef       	ldi	r20, 0xFA	; 250
    55ae:	54 e4       	ldi	r21, 0x44	; 68
    55b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55b4:	dc 01       	movw	r26, r24
    55b6:	cb 01       	movw	r24, r22
    55b8:	8b a3       	std	Y+35, r24	; 0x23
    55ba:	9c a3       	std	Y+36, r25	; 0x24
    55bc:	ad a3       	std	Y+37, r26	; 0x25
    55be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    55c0:	6b a1       	ldd	r22, Y+35	; 0x23
    55c2:	7c a1       	ldd	r23, Y+36	; 0x24
    55c4:	8d a1       	ldd	r24, Y+37	; 0x25
    55c6:	9e a1       	ldd	r25, Y+38	; 0x26
    55c8:	20 e0       	ldi	r18, 0x00	; 0
    55ca:	30 e0       	ldi	r19, 0x00	; 0
    55cc:	40 e8       	ldi	r20, 0x80	; 128
    55ce:	5f e3       	ldi	r21, 0x3F	; 63
    55d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55d4:	88 23       	and	r24, r24
    55d6:	2c f4       	brge	.+10     	; 0x55e2 <Red_blink+0x90>
		__ticks = 1;
    55d8:	81 e0       	ldi	r24, 0x01	; 1
    55da:	90 e0       	ldi	r25, 0x00	; 0
    55dc:	9a a3       	std	Y+34, r25	; 0x22
    55de:	89 a3       	std	Y+33, r24	; 0x21
    55e0:	3f c0       	rjmp	.+126    	; 0x5660 <Red_blink+0x10e>
	else if (__tmp > 65535)
    55e2:	6b a1       	ldd	r22, Y+35	; 0x23
    55e4:	7c a1       	ldd	r23, Y+36	; 0x24
    55e6:	8d a1       	ldd	r24, Y+37	; 0x25
    55e8:	9e a1       	ldd	r25, Y+38	; 0x26
    55ea:	20 e0       	ldi	r18, 0x00	; 0
    55ec:	3f ef       	ldi	r19, 0xFF	; 255
    55ee:	4f e7       	ldi	r20, 0x7F	; 127
    55f0:	57 e4       	ldi	r21, 0x47	; 71
    55f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55f6:	18 16       	cp	r1, r24
    55f8:	4c f5       	brge	.+82     	; 0x564c <Red_blink+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55fa:	6f a1       	ldd	r22, Y+39	; 0x27
    55fc:	78 a5       	ldd	r23, Y+40	; 0x28
    55fe:	89 a5       	ldd	r24, Y+41	; 0x29
    5600:	9a a5       	ldd	r25, Y+42	; 0x2a
    5602:	20 e0       	ldi	r18, 0x00	; 0
    5604:	30 e0       	ldi	r19, 0x00	; 0
    5606:	40 e2       	ldi	r20, 0x20	; 32
    5608:	51 e4       	ldi	r21, 0x41	; 65
    560a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    560e:	dc 01       	movw	r26, r24
    5610:	cb 01       	movw	r24, r22
    5612:	bc 01       	movw	r22, r24
    5614:	cd 01       	movw	r24, r26
    5616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    561a:	dc 01       	movw	r26, r24
    561c:	cb 01       	movw	r24, r22
    561e:	9a a3       	std	Y+34, r25	; 0x22
    5620:	89 a3       	std	Y+33, r24	; 0x21
    5622:	0f c0       	rjmp	.+30     	; 0x5642 <Red_blink+0xf0>
    5624:	88 ec       	ldi	r24, 0xC8	; 200
    5626:	90 e0       	ldi	r25, 0x00	; 0
    5628:	98 a3       	std	Y+32, r25	; 0x20
    562a:	8f 8f       	std	Y+31, r24	; 0x1f
    562c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    562e:	98 a1       	ldd	r25, Y+32	; 0x20
    5630:	01 97       	sbiw	r24, 0x01	; 1
    5632:	f1 f7       	brne	.-4      	; 0x5630 <Red_blink+0xde>
    5634:	98 a3       	std	Y+32, r25	; 0x20
    5636:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5638:	89 a1       	ldd	r24, Y+33	; 0x21
    563a:	9a a1       	ldd	r25, Y+34	; 0x22
    563c:	01 97       	sbiw	r24, 0x01	; 1
    563e:	9a a3       	std	Y+34, r25	; 0x22
    5640:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5642:	89 a1       	ldd	r24, Y+33	; 0x21
    5644:	9a a1       	ldd	r25, Y+34	; 0x22
    5646:	00 97       	sbiw	r24, 0x00	; 0
    5648:	69 f7       	brne	.-38     	; 0x5624 <Red_blink+0xd2>
    564a:	14 c0       	rjmp	.+40     	; 0x5674 <Red_blink+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    564c:	6b a1       	ldd	r22, Y+35	; 0x23
    564e:	7c a1       	ldd	r23, Y+36	; 0x24
    5650:	8d a1       	ldd	r24, Y+37	; 0x25
    5652:	9e a1       	ldd	r25, Y+38	; 0x26
    5654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5658:	dc 01       	movw	r26, r24
    565a:	cb 01       	movw	r24, r22
    565c:	9a a3       	std	Y+34, r25	; 0x22
    565e:	89 a3       	std	Y+33, r24	; 0x21
    5660:	89 a1       	ldd	r24, Y+33	; 0x21
    5662:	9a a1       	ldd	r25, Y+34	; 0x22
    5664:	9e 8f       	std	Y+30, r25	; 0x1e
    5666:	8d 8f       	std	Y+29, r24	; 0x1d
    5668:	8d 8d       	ldd	r24, Y+29	; 0x1d
    566a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    566c:	01 97       	sbiw	r24, 0x01	; 1
    566e:	f1 f7       	brne	.-4      	; 0x566c <Red_blink+0x11a>
    5670:	9e 8f       	std	Y+30, r25	; 0x1e
    5672:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(300);
		DIO_voidSetPinsValue(DIOA,DIO_PIN0,DIO_LOW);
    5674:	89 e3       	ldi	r24, 0x39	; 57
    5676:	90 e0       	ldi	r25, 0x00	; 0
    5678:	61 e0       	ldi	r22, 0x01	; 1
    567a:	40 e0       	ldi	r20, 0x00	; 0
    567c:	0e 94 ed 1a 	call	0x35da	; 0x35da <DIO_voidSetPinsValue>
    5680:	80 e0       	ldi	r24, 0x00	; 0
    5682:	90 e0       	ldi	r25, 0x00	; 0
    5684:	a6 e9       	ldi	r26, 0x96	; 150
    5686:	b3 e4       	ldi	r27, 0x43	; 67
    5688:	89 8f       	std	Y+25, r24	; 0x19
    568a:	9a 8f       	std	Y+26, r25	; 0x1a
    568c:	ab 8f       	std	Y+27, r26	; 0x1b
    568e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5690:	69 8d       	ldd	r22, Y+25	; 0x19
    5692:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5694:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5696:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5698:	20 e0       	ldi	r18, 0x00	; 0
    569a:	30 e0       	ldi	r19, 0x00	; 0
    569c:	4a ef       	ldi	r20, 0xFA	; 250
    569e:	54 e4       	ldi	r21, 0x44	; 68
    56a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56a4:	dc 01       	movw	r26, r24
    56a6:	cb 01       	movw	r24, r22
    56a8:	8d 8b       	std	Y+21, r24	; 0x15
    56aa:	9e 8b       	std	Y+22, r25	; 0x16
    56ac:	af 8b       	std	Y+23, r26	; 0x17
    56ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    56b0:	6d 89       	ldd	r22, Y+21	; 0x15
    56b2:	7e 89       	ldd	r23, Y+22	; 0x16
    56b4:	8f 89       	ldd	r24, Y+23	; 0x17
    56b6:	98 8d       	ldd	r25, Y+24	; 0x18
    56b8:	20 e0       	ldi	r18, 0x00	; 0
    56ba:	30 e0       	ldi	r19, 0x00	; 0
    56bc:	40 e8       	ldi	r20, 0x80	; 128
    56be:	5f e3       	ldi	r21, 0x3F	; 63
    56c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56c4:	88 23       	and	r24, r24
    56c6:	2c f4       	brge	.+10     	; 0x56d2 <Red_blink+0x180>
		__ticks = 1;
    56c8:	81 e0       	ldi	r24, 0x01	; 1
    56ca:	90 e0       	ldi	r25, 0x00	; 0
    56cc:	9c 8b       	std	Y+20, r25	; 0x14
    56ce:	8b 8b       	std	Y+19, r24	; 0x13
    56d0:	3f c0       	rjmp	.+126    	; 0x5750 <Red_blink+0x1fe>
	else if (__tmp > 65535)
    56d2:	6d 89       	ldd	r22, Y+21	; 0x15
    56d4:	7e 89       	ldd	r23, Y+22	; 0x16
    56d6:	8f 89       	ldd	r24, Y+23	; 0x17
    56d8:	98 8d       	ldd	r25, Y+24	; 0x18
    56da:	20 e0       	ldi	r18, 0x00	; 0
    56dc:	3f ef       	ldi	r19, 0xFF	; 255
    56de:	4f e7       	ldi	r20, 0x7F	; 127
    56e0:	57 e4       	ldi	r21, 0x47	; 71
    56e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56e6:	18 16       	cp	r1, r24
    56e8:	4c f5       	brge	.+82     	; 0x573c <Red_blink+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56ea:	69 8d       	ldd	r22, Y+25	; 0x19
    56ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    56ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56f2:	20 e0       	ldi	r18, 0x00	; 0
    56f4:	30 e0       	ldi	r19, 0x00	; 0
    56f6:	40 e2       	ldi	r20, 0x20	; 32
    56f8:	51 e4       	ldi	r21, 0x41	; 65
    56fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56fe:	dc 01       	movw	r26, r24
    5700:	cb 01       	movw	r24, r22
    5702:	bc 01       	movw	r22, r24
    5704:	cd 01       	movw	r24, r26
    5706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    570a:	dc 01       	movw	r26, r24
    570c:	cb 01       	movw	r24, r22
    570e:	9c 8b       	std	Y+20, r25	; 0x14
    5710:	8b 8b       	std	Y+19, r24	; 0x13
    5712:	0f c0       	rjmp	.+30     	; 0x5732 <Red_blink+0x1e0>
    5714:	88 ec       	ldi	r24, 0xC8	; 200
    5716:	90 e0       	ldi	r25, 0x00	; 0
    5718:	9a 8b       	std	Y+18, r25	; 0x12
    571a:	89 8b       	std	Y+17, r24	; 0x11
    571c:	89 89       	ldd	r24, Y+17	; 0x11
    571e:	9a 89       	ldd	r25, Y+18	; 0x12
    5720:	01 97       	sbiw	r24, 0x01	; 1
    5722:	f1 f7       	brne	.-4      	; 0x5720 <Red_blink+0x1ce>
    5724:	9a 8b       	std	Y+18, r25	; 0x12
    5726:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5728:	8b 89       	ldd	r24, Y+19	; 0x13
    572a:	9c 89       	ldd	r25, Y+20	; 0x14
    572c:	01 97       	sbiw	r24, 0x01	; 1
    572e:	9c 8b       	std	Y+20, r25	; 0x14
    5730:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5732:	8b 89       	ldd	r24, Y+19	; 0x13
    5734:	9c 89       	ldd	r25, Y+20	; 0x14
    5736:	00 97       	sbiw	r24, 0x00	; 0
    5738:	69 f7       	brne	.-38     	; 0x5714 <Red_blink+0x1c2>
    573a:	14 c0       	rjmp	.+40     	; 0x5764 <Red_blink+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    573c:	6d 89       	ldd	r22, Y+21	; 0x15
    573e:	7e 89       	ldd	r23, Y+22	; 0x16
    5740:	8f 89       	ldd	r24, Y+23	; 0x17
    5742:	98 8d       	ldd	r25, Y+24	; 0x18
    5744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5748:	dc 01       	movw	r26, r24
    574a:	cb 01       	movw	r24, r22
    574c:	9c 8b       	std	Y+20, r25	; 0x14
    574e:	8b 8b       	std	Y+19, r24	; 0x13
    5750:	8b 89       	ldd	r24, Y+19	; 0x13
    5752:	9c 89       	ldd	r25, Y+20	; 0x14
    5754:	98 8b       	std	Y+16, r25	; 0x10
    5756:	8f 87       	std	Y+15, r24	; 0x0f
    5758:	8f 85       	ldd	r24, Y+15	; 0x0f
    575a:	98 89       	ldd	r25, Y+16	; 0x10
    575c:	01 97       	sbiw	r24, 0x01	; 1
    575e:	f1 f7       	brne	.-4      	; 0x575c <Red_blink+0x20a>
    5760:	98 8b       	std	Y+16, r25	; 0x10
    5762:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		DIO_voidSetPinsValue(DIOA,DIO_PIN7,DIO_LOW);
    5764:	89 e3       	ldi	r24, 0x39	; 57
    5766:	90 e0       	ldi	r25, 0x00	; 0
    5768:	60 e8       	ldi	r22, 0x80	; 128
    576a:	40 e0       	ldi	r20, 0x00	; 0
    576c:	0e 94 ed 1a 	call	0x35da	; 0x35da <DIO_voidSetPinsValue>
    5770:	80 e0       	ldi	r24, 0x00	; 0
    5772:	90 e0       	ldi	r25, 0x00	; 0
    5774:	a6 e9       	ldi	r26, 0x96	; 150
    5776:	b3 e4       	ldi	r27, 0x43	; 67
    5778:	8b 87       	std	Y+11, r24	; 0x0b
    577a:	9c 87       	std	Y+12, r25	; 0x0c
    577c:	ad 87       	std	Y+13, r26	; 0x0d
    577e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5780:	6b 85       	ldd	r22, Y+11	; 0x0b
    5782:	7c 85       	ldd	r23, Y+12	; 0x0c
    5784:	8d 85       	ldd	r24, Y+13	; 0x0d
    5786:	9e 85       	ldd	r25, Y+14	; 0x0e
    5788:	20 e0       	ldi	r18, 0x00	; 0
    578a:	30 e0       	ldi	r19, 0x00	; 0
    578c:	4a ef       	ldi	r20, 0xFA	; 250
    578e:	54 e4       	ldi	r21, 0x44	; 68
    5790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5794:	dc 01       	movw	r26, r24
    5796:	cb 01       	movw	r24, r22
    5798:	8f 83       	std	Y+7, r24	; 0x07
    579a:	98 87       	std	Y+8, r25	; 0x08
    579c:	a9 87       	std	Y+9, r26	; 0x09
    579e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    57a0:	6f 81       	ldd	r22, Y+7	; 0x07
    57a2:	78 85       	ldd	r23, Y+8	; 0x08
    57a4:	89 85       	ldd	r24, Y+9	; 0x09
    57a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    57a8:	20 e0       	ldi	r18, 0x00	; 0
    57aa:	30 e0       	ldi	r19, 0x00	; 0
    57ac:	40 e8       	ldi	r20, 0x80	; 128
    57ae:	5f e3       	ldi	r21, 0x3F	; 63
    57b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57b4:	88 23       	and	r24, r24
    57b6:	2c f4       	brge	.+10     	; 0x57c2 <Red_blink+0x270>
		__ticks = 1;
    57b8:	81 e0       	ldi	r24, 0x01	; 1
    57ba:	90 e0       	ldi	r25, 0x00	; 0
    57bc:	9e 83       	std	Y+6, r25	; 0x06
    57be:	8d 83       	std	Y+5, r24	; 0x05
    57c0:	3f c0       	rjmp	.+126    	; 0x5840 <Red_blink+0x2ee>
	else if (__tmp > 65535)
    57c2:	6f 81       	ldd	r22, Y+7	; 0x07
    57c4:	78 85       	ldd	r23, Y+8	; 0x08
    57c6:	89 85       	ldd	r24, Y+9	; 0x09
    57c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    57ca:	20 e0       	ldi	r18, 0x00	; 0
    57cc:	3f ef       	ldi	r19, 0xFF	; 255
    57ce:	4f e7       	ldi	r20, 0x7F	; 127
    57d0:	57 e4       	ldi	r21, 0x47	; 71
    57d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57d6:	18 16       	cp	r1, r24
    57d8:	4c f5       	brge	.+82     	; 0x582c <Red_blink+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57da:	6b 85       	ldd	r22, Y+11	; 0x0b
    57dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    57de:	8d 85       	ldd	r24, Y+13	; 0x0d
    57e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    57e2:	20 e0       	ldi	r18, 0x00	; 0
    57e4:	30 e0       	ldi	r19, 0x00	; 0
    57e6:	40 e2       	ldi	r20, 0x20	; 32
    57e8:	51 e4       	ldi	r21, 0x41	; 65
    57ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57ee:	dc 01       	movw	r26, r24
    57f0:	cb 01       	movw	r24, r22
    57f2:	bc 01       	movw	r22, r24
    57f4:	cd 01       	movw	r24, r26
    57f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57fa:	dc 01       	movw	r26, r24
    57fc:	cb 01       	movw	r24, r22
    57fe:	9e 83       	std	Y+6, r25	; 0x06
    5800:	8d 83       	std	Y+5, r24	; 0x05
    5802:	0f c0       	rjmp	.+30     	; 0x5822 <Red_blink+0x2d0>
    5804:	88 ec       	ldi	r24, 0xC8	; 200
    5806:	90 e0       	ldi	r25, 0x00	; 0
    5808:	9c 83       	std	Y+4, r25	; 0x04
    580a:	8b 83       	std	Y+3, r24	; 0x03
    580c:	8b 81       	ldd	r24, Y+3	; 0x03
    580e:	9c 81       	ldd	r25, Y+4	; 0x04
    5810:	01 97       	sbiw	r24, 0x01	; 1
    5812:	f1 f7       	brne	.-4      	; 0x5810 <Red_blink+0x2be>
    5814:	9c 83       	std	Y+4, r25	; 0x04
    5816:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5818:	8d 81       	ldd	r24, Y+5	; 0x05
    581a:	9e 81       	ldd	r25, Y+6	; 0x06
    581c:	01 97       	sbiw	r24, 0x01	; 1
    581e:	9e 83       	std	Y+6, r25	; 0x06
    5820:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5822:	8d 81       	ldd	r24, Y+5	; 0x05
    5824:	9e 81       	ldd	r25, Y+6	; 0x06
    5826:	00 97       	sbiw	r24, 0x00	; 0
    5828:	69 f7       	brne	.-38     	; 0x5804 <Red_blink+0x2b2>
    582a:	14 c0       	rjmp	.+40     	; 0x5854 <Red_blink+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    582c:	6f 81       	ldd	r22, Y+7	; 0x07
    582e:	78 85       	ldd	r23, Y+8	; 0x08
    5830:	89 85       	ldd	r24, Y+9	; 0x09
    5832:	9a 85       	ldd	r25, Y+10	; 0x0a
    5834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5838:	dc 01       	movw	r26, r24
    583a:	cb 01       	movw	r24, r22
    583c:	9e 83       	std	Y+6, r25	; 0x06
    583e:	8d 83       	std	Y+5, r24	; 0x05
    5840:	8d 81       	ldd	r24, Y+5	; 0x05
    5842:	9e 81       	ldd	r25, Y+6	; 0x06
    5844:	9a 83       	std	Y+2, r25	; 0x02
    5846:	89 83       	std	Y+1, r24	; 0x01
    5848:	89 81       	ldd	r24, Y+1	; 0x01
    584a:	9a 81       	ldd	r25, Y+2	; 0x02
    584c:	01 97       	sbiw	r24, 0x01	; 1
    584e:	f1 f7       	brne	.-4      	; 0x584c <Red_blink+0x2fa>
    5850:	9a 83       	std	Y+2, r25	; 0x02
    5852:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		DIO_voidSetPinsValue(DIOA,DIO_PIN7,DIO_HIGH);
    5854:	89 e3       	ldi	r24, 0x39	; 57
    5856:	90 e0       	ldi	r25, 0x00	; 0
    5858:	60 e8       	ldi	r22, 0x80	; 128
    585a:	4f ef       	ldi	r20, 0xFF	; 255
    585c:	0e 94 ed 1a 	call	0x35da	; 0x35da <DIO_voidSetPinsValue>

void Red_blink(void){
	u32 counter=0;
	DIO_voidSetPinsValue(DIOA,DIO_PIN2,DIO_LOW);

	for(counter=0; counter<=10; counter++){
    5860:	8b a5       	ldd	r24, Y+43	; 0x2b
    5862:	9c a5       	ldd	r25, Y+44	; 0x2c
    5864:	ad a5       	ldd	r26, Y+45	; 0x2d
    5866:	be a5       	ldd	r27, Y+46	; 0x2e
    5868:	01 96       	adiw	r24, 0x01	; 1
    586a:	a1 1d       	adc	r26, r1
    586c:	b1 1d       	adc	r27, r1
    586e:	8b a7       	std	Y+43, r24	; 0x2b
    5870:	9c a7       	std	Y+44, r25	; 0x2c
    5872:	ad a7       	std	Y+45, r26	; 0x2d
    5874:	be a7       	std	Y+46, r27	; 0x2e
    5876:	8b a5       	ldd	r24, Y+43	; 0x2b
    5878:	9c a5       	ldd	r25, Y+44	; 0x2c
    587a:	ad a5       	ldd	r26, Y+45	; 0x2d
    587c:	be a5       	ldd	r27, Y+46	; 0x2e
    587e:	8b 30       	cpi	r24, 0x0B	; 11
    5880:	91 05       	cpc	r25, r1
    5882:	a1 05       	cpc	r26, r1
    5884:	b1 05       	cpc	r27, r1
    5886:	08 f4       	brcc	.+2      	; 0x588a <Red_blink+0x338>
    5888:	7d ce       	rjmp	.-774    	; 0x5584 <Red_blink+0x32>
		DIO_voidSetPinsValue(DIOA,DIO_PIN7,DIO_LOW);
		_delay_ms(300);
		DIO_voidSetPinsValue(DIOA,DIO_PIN7,DIO_HIGH);
	}

}
    588a:	ae 96       	adiw	r28, 0x2e	; 46
    588c:	0f b6       	in	r0, 0x3f	; 63
    588e:	f8 94       	cli
    5890:	de bf       	out	0x3e, r29	; 62
    5892:	0f be       	out	0x3f, r0	; 63
    5894:	cd bf       	out	0x3d, r28	; 61
    5896:	cf 91       	pop	r28
    5898:	df 91       	pop	r29
    589a:	08 95       	ret

0000589c <keypad_mode>:

void keypad_mode(void){
    589c:	0f 93       	push	r16
    589e:	1f 93       	push	r17
    58a0:	df 93       	push	r29
    58a2:	cf 93       	push	r28
    58a4:	cd b7       	in	r28, 0x3d	; 61
    58a6:	de b7       	in	r29, 0x3e	; 62
    58a8:	c6 54       	subi	r28, 0x46	; 70
    58aa:	d0 40       	sbci	r29, 0x00	; 0
    58ac:	0f b6       	in	r0, 0x3f	; 63
    58ae:	f8 94       	cli
    58b0:	de bf       	out	0x3e, r29	; 62
    58b2:	0f be       	out	0x3f, r0	; 63
    58b4:	cd bf       	out	0x3d, r28	; 61
	local_u8KeypadValue = KEYPAD_u8Scan();
    58b6:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <KEYPAD_u8Scan>
    58ba:	80 93 7a 02 	sts	0x027A, r24

	while(1){

			if (local_u8KeypadValue >= '0' && local_u8KeypadValue <= '9') {
    58be:	80 91 7a 02 	lds	r24, 0x027A
    58c2:	80 33       	cpi	r24, 0x30	; 48
    58c4:	08 f4       	brcc	.+2      	; 0x58c8 <keypad_mode+0x2c>
    58c6:	b1 c0       	rjmp	.+354    	; 0x5a2a <keypad_mode+0x18e>
    58c8:	80 91 7a 02 	lds	r24, 0x027A
    58cc:	8a 33       	cpi	r24, 0x3A	; 58
    58ce:	08 f0       	brcs	.+2      	; 0x58d2 <keypad_mode+0x36>
    58d0:	ac c0       	rjmp	.+344    	; 0x5a2a <keypad_mode+0x18e>

				user_password_keypad = user_password_keypad * 10 + (local_u8KeypadValue - '0');
    58d2:	80 91 7b 02 	lds	r24, 0x027B
    58d6:	90 91 7c 02 	lds	r25, 0x027C
    58da:	9c 01       	movw	r18, r24
    58dc:	22 0f       	add	r18, r18
    58de:	33 1f       	adc	r19, r19
    58e0:	c9 01       	movw	r24, r18
    58e2:	88 0f       	add	r24, r24
    58e4:	99 1f       	adc	r25, r25
    58e6:	88 0f       	add	r24, r24
    58e8:	99 1f       	adc	r25, r25
    58ea:	28 0f       	add	r18, r24
    58ec:	39 1f       	adc	r19, r25
    58ee:	80 91 7a 02 	lds	r24, 0x027A
    58f2:	88 2f       	mov	r24, r24
    58f4:	90 e0       	ldi	r25, 0x00	; 0
    58f6:	82 0f       	add	r24, r18
    58f8:	93 1f       	adc	r25, r19
    58fa:	c0 97       	sbiw	r24, 0x30	; 48
    58fc:	90 93 7c 02 	sts	0x027C, r25
    5900:	80 93 7b 02 	sts	0x027B, r24
				LCD_voidClearDisplay();
    5904:	0e 94 38 25 	call	0x4a70	; 0x4a70 <LCD_voidClearDisplay>
				LCD_voidWriteNumber(user_password_keypad);
    5908:	80 91 7b 02 	lds	r24, 0x027B
    590c:	90 91 7c 02 	lds	r25, 0x027C
    5910:	cc 01       	movw	r24, r24
    5912:	a0 e0       	ldi	r26, 0x00	; 0
    5914:	b0 e0       	ldi	r27, 0x00	; 0
    5916:	bc 01       	movw	r22, r24
    5918:	cd 01       	movw	r24, r26
    591a:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <LCD_voidWriteNumber>
    591e:	fe 01       	movw	r30, r28
    5920:	ed 5b       	subi	r30, 0xBD	; 189
    5922:	ff 4f       	sbci	r31, 0xFF	; 255
    5924:	80 e0       	ldi	r24, 0x00	; 0
    5926:	90 e0       	ldi	r25, 0x00	; 0
    5928:	aa ef       	ldi	r26, 0xFA	; 250
    592a:	b3 e4       	ldi	r27, 0x43	; 67
    592c:	80 83       	st	Z, r24
    592e:	91 83       	std	Z+1, r25	; 0x01
    5930:	a2 83       	std	Z+2, r26	; 0x02
    5932:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5934:	8e 01       	movw	r16, r28
    5936:	01 5c       	subi	r16, 0xC1	; 193
    5938:	1f 4f       	sbci	r17, 0xFF	; 255
    593a:	fe 01       	movw	r30, r28
    593c:	ed 5b       	subi	r30, 0xBD	; 189
    593e:	ff 4f       	sbci	r31, 0xFF	; 255
    5940:	60 81       	ld	r22, Z
    5942:	71 81       	ldd	r23, Z+1	; 0x01
    5944:	82 81       	ldd	r24, Z+2	; 0x02
    5946:	93 81       	ldd	r25, Z+3	; 0x03
    5948:	20 e0       	ldi	r18, 0x00	; 0
    594a:	30 e0       	ldi	r19, 0x00	; 0
    594c:	4a ef       	ldi	r20, 0xFA	; 250
    594e:	54 e4       	ldi	r21, 0x44	; 68
    5950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5954:	dc 01       	movw	r26, r24
    5956:	cb 01       	movw	r24, r22
    5958:	f8 01       	movw	r30, r16
    595a:	80 83       	st	Z, r24
    595c:	91 83       	std	Z+1, r25	; 0x01
    595e:	a2 83       	std	Z+2, r26	; 0x02
    5960:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5962:	fe 01       	movw	r30, r28
    5964:	ff 96       	adiw	r30, 0x3f	; 63
    5966:	60 81       	ld	r22, Z
    5968:	71 81       	ldd	r23, Z+1	; 0x01
    596a:	82 81       	ldd	r24, Z+2	; 0x02
    596c:	93 81       	ldd	r25, Z+3	; 0x03
    596e:	20 e0       	ldi	r18, 0x00	; 0
    5970:	30 e0       	ldi	r19, 0x00	; 0
    5972:	40 e8       	ldi	r20, 0x80	; 128
    5974:	5f e3       	ldi	r21, 0x3F	; 63
    5976:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    597a:	88 23       	and	r24, r24
    597c:	2c f4       	brge	.+10     	; 0x5988 <keypad_mode+0xec>
		__ticks = 1;
    597e:	81 e0       	ldi	r24, 0x01	; 1
    5980:	90 e0       	ldi	r25, 0x00	; 0
    5982:	9e af       	std	Y+62, r25	; 0x3e
    5984:	8d af       	std	Y+61, r24	; 0x3d
    5986:	46 c0       	rjmp	.+140    	; 0x5a14 <keypad_mode+0x178>
	else if (__tmp > 65535)
    5988:	fe 01       	movw	r30, r28
    598a:	ff 96       	adiw	r30, 0x3f	; 63
    598c:	60 81       	ld	r22, Z
    598e:	71 81       	ldd	r23, Z+1	; 0x01
    5990:	82 81       	ldd	r24, Z+2	; 0x02
    5992:	93 81       	ldd	r25, Z+3	; 0x03
    5994:	20 e0       	ldi	r18, 0x00	; 0
    5996:	3f ef       	ldi	r19, 0xFF	; 255
    5998:	4f e7       	ldi	r20, 0x7F	; 127
    599a:	57 e4       	ldi	r21, 0x47	; 71
    599c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59a0:	18 16       	cp	r1, r24
    59a2:	64 f5       	brge	.+88     	; 0x59fc <keypad_mode+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59a4:	fe 01       	movw	r30, r28
    59a6:	ed 5b       	subi	r30, 0xBD	; 189
    59a8:	ff 4f       	sbci	r31, 0xFF	; 255
    59aa:	60 81       	ld	r22, Z
    59ac:	71 81       	ldd	r23, Z+1	; 0x01
    59ae:	82 81       	ldd	r24, Z+2	; 0x02
    59b0:	93 81       	ldd	r25, Z+3	; 0x03
    59b2:	20 e0       	ldi	r18, 0x00	; 0
    59b4:	30 e0       	ldi	r19, 0x00	; 0
    59b6:	40 e2       	ldi	r20, 0x20	; 32
    59b8:	51 e4       	ldi	r21, 0x41	; 65
    59ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59be:	dc 01       	movw	r26, r24
    59c0:	cb 01       	movw	r24, r22
    59c2:	bc 01       	movw	r22, r24
    59c4:	cd 01       	movw	r24, r26
    59c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59ca:	dc 01       	movw	r26, r24
    59cc:	cb 01       	movw	r24, r22
    59ce:	9e af       	std	Y+62, r25	; 0x3e
    59d0:	8d af       	std	Y+61, r24	; 0x3d
    59d2:	0f c0       	rjmp	.+30     	; 0x59f2 <keypad_mode+0x156>
    59d4:	88 ec       	ldi	r24, 0xC8	; 200
    59d6:	90 e0       	ldi	r25, 0x00	; 0
    59d8:	9c af       	std	Y+60, r25	; 0x3c
    59da:	8b af       	std	Y+59, r24	; 0x3b
    59dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    59de:	9c ad       	ldd	r25, Y+60	; 0x3c
    59e0:	01 97       	sbiw	r24, 0x01	; 1
    59e2:	f1 f7       	brne	.-4      	; 0x59e0 <keypad_mode+0x144>
    59e4:	9c af       	std	Y+60, r25	; 0x3c
    59e6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    59ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    59ec:	01 97       	sbiw	r24, 0x01	; 1
    59ee:	9e af       	std	Y+62, r25	; 0x3e
    59f0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    59f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    59f6:	00 97       	sbiw	r24, 0x00	; 0
    59f8:	69 f7       	brne	.-38     	; 0x59d4 <keypad_mode+0x138>
    59fa:	3e c2       	rjmp	.+1148   	; 0x5e78 <keypad_mode+0x5dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59fc:	fe 01       	movw	r30, r28
    59fe:	ff 96       	adiw	r30, 0x3f	; 63
    5a00:	60 81       	ld	r22, Z
    5a02:	71 81       	ldd	r23, Z+1	; 0x01
    5a04:	82 81       	ldd	r24, Z+2	; 0x02
    5a06:	93 81       	ldd	r25, Z+3	; 0x03
    5a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a0c:	dc 01       	movw	r26, r24
    5a0e:	cb 01       	movw	r24, r22
    5a10:	9e af       	std	Y+62, r25	; 0x3e
    5a12:	8d af       	std	Y+61, r24	; 0x3d
    5a14:	8d ad       	ldd	r24, Y+61	; 0x3d
    5a16:	9e ad       	ldd	r25, Y+62	; 0x3e
    5a18:	9a af       	std	Y+58, r25	; 0x3a
    5a1a:	89 af       	std	Y+57, r24	; 0x39
    5a1c:	89 ad       	ldd	r24, Y+57	; 0x39
    5a1e:	9a ad       	ldd	r25, Y+58	; 0x3a
    5a20:	01 97       	sbiw	r24, 0x01	; 1
    5a22:	f1 f7       	brne	.-4      	; 0x5a20 <keypad_mode+0x184>
    5a24:	9a af       	std	Y+58, r25	; 0x3a
    5a26:	89 af       	std	Y+57, r24	; 0x39
    5a28:	27 c2       	rjmp	.+1102   	; 0x5e78 <keypad_mode+0x5dc>
				_delay_ms(500);

			}
			else if(local_u8KeypadValue == '='){
    5a2a:	80 91 7a 02 	lds	r24, 0x027A
    5a2e:	8d 33       	cpi	r24, 0x3D	; 61
    5a30:	09 f0       	breq	.+2      	; 0x5a34 <keypad_mode+0x198>
    5a32:	22 c2       	rjmp	.+1092   	; 0x5e78 <keypad_mode+0x5dc>

				if(correct_password == user_password_keypad){
    5a34:	20 91 14 02 	lds	r18, 0x0214
    5a38:	30 91 15 02 	lds	r19, 0x0215
    5a3c:	80 91 7b 02 	lds	r24, 0x027B
    5a40:	90 91 7c 02 	lds	r25, 0x027C
    5a44:	28 17       	cp	r18, r24
    5a46:	39 07       	cpc	r19, r25
    5a48:	09 f0       	breq	.+2      	; 0x5a4c <keypad_mode+0x1b0>
    5a4a:	ff c0       	rjmp	.+510    	; 0x5c4a <keypad_mode+0x3ae>
					LCD_voidSetCursorLocation(1, 0); // Line 1, Column 0
    5a4c:	81 e0       	ldi	r24, 0x01	; 1
    5a4e:	60 e0       	ldi	r22, 0x00	; 0
    5a50:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <LCD_voidSetCursorLocation>
					LCD_voidwriteString((u8*) "Welcome Home!");
    5a54:	80 e6       	ldi	r24, 0x60	; 96
    5a56:	90 e0       	ldi	r25, 0x00	; 0
    5a58:	0e 94 42 25 	call	0x4a84	; 0x4a84 <LCD_voidwriteString>

					Toggle_led2();	// green led on red led off
    5a5c:	0e 94 96 2a 	call	0x552c	; 0x552c <Toggle_led2>
					Servo_voidMoveToLocation((u8)90);	// open lock
    5a60:	8a e5       	ldi	r24, 0x5A	; 90
    5a62:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <Servo_voidMoveToLocation>
    5a66:	80 e0       	ldi	r24, 0x00	; 0
    5a68:	90 e0       	ldi	r25, 0x00	; 0
    5a6a:	aa ef       	ldi	r26, 0xFA	; 250
    5a6c:	b4 e4       	ldi	r27, 0x44	; 68
    5a6e:	8d ab       	std	Y+53, r24	; 0x35
    5a70:	9e ab       	std	Y+54, r25	; 0x36
    5a72:	af ab       	std	Y+55, r26	; 0x37
    5a74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a76:	6d a9       	ldd	r22, Y+53	; 0x35
    5a78:	7e a9       	ldd	r23, Y+54	; 0x36
    5a7a:	8f a9       	ldd	r24, Y+55	; 0x37
    5a7c:	98 ad       	ldd	r25, Y+56	; 0x38
    5a7e:	20 e0       	ldi	r18, 0x00	; 0
    5a80:	30 e0       	ldi	r19, 0x00	; 0
    5a82:	4a ef       	ldi	r20, 0xFA	; 250
    5a84:	54 e4       	ldi	r21, 0x44	; 68
    5a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a8a:	dc 01       	movw	r26, r24
    5a8c:	cb 01       	movw	r24, r22
    5a8e:	89 ab       	std	Y+49, r24	; 0x31
    5a90:	9a ab       	std	Y+50, r25	; 0x32
    5a92:	ab ab       	std	Y+51, r26	; 0x33
    5a94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5a96:	69 a9       	ldd	r22, Y+49	; 0x31
    5a98:	7a a9       	ldd	r23, Y+50	; 0x32
    5a9a:	8b a9       	ldd	r24, Y+51	; 0x33
    5a9c:	9c a9       	ldd	r25, Y+52	; 0x34
    5a9e:	20 e0       	ldi	r18, 0x00	; 0
    5aa0:	30 e0       	ldi	r19, 0x00	; 0
    5aa2:	40 e8       	ldi	r20, 0x80	; 128
    5aa4:	5f e3       	ldi	r21, 0x3F	; 63
    5aa6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5aaa:	88 23       	and	r24, r24
    5aac:	2c f4       	brge	.+10     	; 0x5ab8 <keypad_mode+0x21c>
		__ticks = 1;
    5aae:	81 e0       	ldi	r24, 0x01	; 1
    5ab0:	90 e0       	ldi	r25, 0x00	; 0
    5ab2:	98 ab       	std	Y+48, r25	; 0x30
    5ab4:	8f a7       	std	Y+47, r24	; 0x2f
    5ab6:	3f c0       	rjmp	.+126    	; 0x5b36 <keypad_mode+0x29a>
	else if (__tmp > 65535)
    5ab8:	69 a9       	ldd	r22, Y+49	; 0x31
    5aba:	7a a9       	ldd	r23, Y+50	; 0x32
    5abc:	8b a9       	ldd	r24, Y+51	; 0x33
    5abe:	9c a9       	ldd	r25, Y+52	; 0x34
    5ac0:	20 e0       	ldi	r18, 0x00	; 0
    5ac2:	3f ef       	ldi	r19, 0xFF	; 255
    5ac4:	4f e7       	ldi	r20, 0x7F	; 127
    5ac6:	57 e4       	ldi	r21, 0x47	; 71
    5ac8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5acc:	18 16       	cp	r1, r24
    5ace:	4c f5       	brge	.+82     	; 0x5b22 <keypad_mode+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ad0:	6d a9       	ldd	r22, Y+53	; 0x35
    5ad2:	7e a9       	ldd	r23, Y+54	; 0x36
    5ad4:	8f a9       	ldd	r24, Y+55	; 0x37
    5ad6:	98 ad       	ldd	r25, Y+56	; 0x38
    5ad8:	20 e0       	ldi	r18, 0x00	; 0
    5ada:	30 e0       	ldi	r19, 0x00	; 0
    5adc:	40 e2       	ldi	r20, 0x20	; 32
    5ade:	51 e4       	ldi	r21, 0x41	; 65
    5ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ae4:	dc 01       	movw	r26, r24
    5ae6:	cb 01       	movw	r24, r22
    5ae8:	bc 01       	movw	r22, r24
    5aea:	cd 01       	movw	r24, r26
    5aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5af0:	dc 01       	movw	r26, r24
    5af2:	cb 01       	movw	r24, r22
    5af4:	98 ab       	std	Y+48, r25	; 0x30
    5af6:	8f a7       	std	Y+47, r24	; 0x2f
    5af8:	0f c0       	rjmp	.+30     	; 0x5b18 <keypad_mode+0x27c>
    5afa:	88 ec       	ldi	r24, 0xC8	; 200
    5afc:	90 e0       	ldi	r25, 0x00	; 0
    5afe:	9e a7       	std	Y+46, r25	; 0x2e
    5b00:	8d a7       	std	Y+45, r24	; 0x2d
    5b02:	8d a5       	ldd	r24, Y+45	; 0x2d
    5b04:	9e a5       	ldd	r25, Y+46	; 0x2e
    5b06:	01 97       	sbiw	r24, 0x01	; 1
    5b08:	f1 f7       	brne	.-4      	; 0x5b06 <keypad_mode+0x26a>
    5b0a:	9e a7       	std	Y+46, r25	; 0x2e
    5b0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5b10:	98 a9       	ldd	r25, Y+48	; 0x30
    5b12:	01 97       	sbiw	r24, 0x01	; 1
    5b14:	98 ab       	std	Y+48, r25	; 0x30
    5b16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b18:	8f a5       	ldd	r24, Y+47	; 0x2f
    5b1a:	98 a9       	ldd	r25, Y+48	; 0x30
    5b1c:	00 97       	sbiw	r24, 0x00	; 0
    5b1e:	69 f7       	brne	.-38     	; 0x5afa <keypad_mode+0x25e>
    5b20:	14 c0       	rjmp	.+40     	; 0x5b4a <keypad_mode+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b22:	69 a9       	ldd	r22, Y+49	; 0x31
    5b24:	7a a9       	ldd	r23, Y+50	; 0x32
    5b26:	8b a9       	ldd	r24, Y+51	; 0x33
    5b28:	9c a9       	ldd	r25, Y+52	; 0x34
    5b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b2e:	dc 01       	movw	r26, r24
    5b30:	cb 01       	movw	r24, r22
    5b32:	98 ab       	std	Y+48, r25	; 0x30
    5b34:	8f a7       	std	Y+47, r24	; 0x2f
    5b36:	8f a5       	ldd	r24, Y+47	; 0x2f
    5b38:	98 a9       	ldd	r25, Y+48	; 0x30
    5b3a:	9c a7       	std	Y+44, r25	; 0x2c
    5b3c:	8b a7       	std	Y+43, r24	; 0x2b
    5b3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5b40:	9c a5       	ldd	r25, Y+44	; 0x2c
    5b42:	01 97       	sbiw	r24, 0x01	; 1
    5b44:	f1 f7       	brne	.-4      	; 0x5b42 <keypad_mode+0x2a6>
    5b46:	9c a7       	std	Y+44, r25	; 0x2c
    5b48:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(2000);
					Servo_voidMoveToLocation((u8)0);
    5b4a:	80 e0       	ldi	r24, 0x00	; 0
    5b4c:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <Servo_voidMoveToLocation>

					password_repeated_times_keypad = 0;
    5b50:	10 92 80 02 	sts	0x0280, r1
    5b54:	10 92 7f 02 	sts	0x027F, r1
					user_password_keypad = '\0';
    5b58:	10 92 7c 02 	sts	0x027C, r1
    5b5c:	10 92 7b 02 	sts	0x027B, r1
    5b60:	80 e0       	ldi	r24, 0x00	; 0
    5b62:	90 e0       	ldi	r25, 0x00	; 0
    5b64:	af e2       	ldi	r26, 0x2F	; 47
    5b66:	b4 e4       	ldi	r27, 0x44	; 68
    5b68:	8f a3       	std	Y+39, r24	; 0x27
    5b6a:	98 a7       	std	Y+40, r25	; 0x28
    5b6c:	a9 a7       	std	Y+41, r26	; 0x29
    5b6e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b70:	6f a1       	ldd	r22, Y+39	; 0x27
    5b72:	78 a5       	ldd	r23, Y+40	; 0x28
    5b74:	89 a5       	ldd	r24, Y+41	; 0x29
    5b76:	9a a5       	ldd	r25, Y+42	; 0x2a
    5b78:	20 e0       	ldi	r18, 0x00	; 0
    5b7a:	30 e0       	ldi	r19, 0x00	; 0
    5b7c:	4a ef       	ldi	r20, 0xFA	; 250
    5b7e:	54 e4       	ldi	r21, 0x44	; 68
    5b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b84:	dc 01       	movw	r26, r24
    5b86:	cb 01       	movw	r24, r22
    5b88:	8b a3       	std	Y+35, r24	; 0x23
    5b8a:	9c a3       	std	Y+36, r25	; 0x24
    5b8c:	ad a3       	std	Y+37, r26	; 0x25
    5b8e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5b90:	6b a1       	ldd	r22, Y+35	; 0x23
    5b92:	7c a1       	ldd	r23, Y+36	; 0x24
    5b94:	8d a1       	ldd	r24, Y+37	; 0x25
    5b96:	9e a1       	ldd	r25, Y+38	; 0x26
    5b98:	20 e0       	ldi	r18, 0x00	; 0
    5b9a:	30 e0       	ldi	r19, 0x00	; 0
    5b9c:	40 e8       	ldi	r20, 0x80	; 128
    5b9e:	5f e3       	ldi	r21, 0x3F	; 63
    5ba0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ba4:	88 23       	and	r24, r24
    5ba6:	2c f4       	brge	.+10     	; 0x5bb2 <keypad_mode+0x316>
		__ticks = 1;
    5ba8:	81 e0       	ldi	r24, 0x01	; 1
    5baa:	90 e0       	ldi	r25, 0x00	; 0
    5bac:	9a a3       	std	Y+34, r25	; 0x22
    5bae:	89 a3       	std	Y+33, r24	; 0x21
    5bb0:	3f c0       	rjmp	.+126    	; 0x5c30 <keypad_mode+0x394>
	else if (__tmp > 65535)
    5bb2:	6b a1       	ldd	r22, Y+35	; 0x23
    5bb4:	7c a1       	ldd	r23, Y+36	; 0x24
    5bb6:	8d a1       	ldd	r24, Y+37	; 0x25
    5bb8:	9e a1       	ldd	r25, Y+38	; 0x26
    5bba:	20 e0       	ldi	r18, 0x00	; 0
    5bbc:	3f ef       	ldi	r19, 0xFF	; 255
    5bbe:	4f e7       	ldi	r20, 0x7F	; 127
    5bc0:	57 e4       	ldi	r21, 0x47	; 71
    5bc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5bc6:	18 16       	cp	r1, r24
    5bc8:	4c f5       	brge	.+82     	; 0x5c1c <keypad_mode+0x380>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bca:	6f a1       	ldd	r22, Y+39	; 0x27
    5bcc:	78 a5       	ldd	r23, Y+40	; 0x28
    5bce:	89 a5       	ldd	r24, Y+41	; 0x29
    5bd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    5bd2:	20 e0       	ldi	r18, 0x00	; 0
    5bd4:	30 e0       	ldi	r19, 0x00	; 0
    5bd6:	40 e2       	ldi	r20, 0x20	; 32
    5bd8:	51 e4       	ldi	r21, 0x41	; 65
    5bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bde:	dc 01       	movw	r26, r24
    5be0:	cb 01       	movw	r24, r22
    5be2:	bc 01       	movw	r22, r24
    5be4:	cd 01       	movw	r24, r26
    5be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bea:	dc 01       	movw	r26, r24
    5bec:	cb 01       	movw	r24, r22
    5bee:	9a a3       	std	Y+34, r25	; 0x22
    5bf0:	89 a3       	std	Y+33, r24	; 0x21
    5bf2:	0f c0       	rjmp	.+30     	; 0x5c12 <keypad_mode+0x376>
    5bf4:	88 ec       	ldi	r24, 0xC8	; 200
    5bf6:	90 e0       	ldi	r25, 0x00	; 0
    5bf8:	98 a3       	std	Y+32, r25	; 0x20
    5bfa:	8f 8f       	std	Y+31, r24	; 0x1f
    5bfc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5bfe:	98 a1       	ldd	r25, Y+32	; 0x20
    5c00:	01 97       	sbiw	r24, 0x01	; 1
    5c02:	f1 f7       	brne	.-4      	; 0x5c00 <keypad_mode+0x364>
    5c04:	98 a3       	std	Y+32, r25	; 0x20
    5c06:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c08:	89 a1       	ldd	r24, Y+33	; 0x21
    5c0a:	9a a1       	ldd	r25, Y+34	; 0x22
    5c0c:	01 97       	sbiw	r24, 0x01	; 1
    5c0e:	9a a3       	std	Y+34, r25	; 0x22
    5c10:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c12:	89 a1       	ldd	r24, Y+33	; 0x21
    5c14:	9a a1       	ldd	r25, Y+34	; 0x22
    5c16:	00 97       	sbiw	r24, 0x00	; 0
    5c18:	69 f7       	brne	.-38     	; 0x5bf4 <keypad_mode+0x358>
    5c1a:	14 c0       	rjmp	.+40     	; 0x5c44 <keypad_mode+0x3a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c1c:	6b a1       	ldd	r22, Y+35	; 0x23
    5c1e:	7c a1       	ldd	r23, Y+36	; 0x24
    5c20:	8d a1       	ldd	r24, Y+37	; 0x25
    5c22:	9e a1       	ldd	r25, Y+38	; 0x26
    5c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c28:	dc 01       	movw	r26, r24
    5c2a:	cb 01       	movw	r24, r22
    5c2c:	9a a3       	std	Y+34, r25	; 0x22
    5c2e:	89 a3       	std	Y+33, r24	; 0x21
    5c30:	89 a1       	ldd	r24, Y+33	; 0x21
    5c32:	9a a1       	ldd	r25, Y+34	; 0x22
    5c34:	9e 8f       	std	Y+30, r25	; 0x1e
    5c36:	8d 8f       	std	Y+29, r24	; 0x1d
    5c38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5c3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5c3c:	01 97       	sbiw	r24, 0x01	; 1
    5c3e:	f1 f7       	brne	.-4      	; 0x5c3c <keypad_mode+0x3a0>
    5c40:	9e 8f       	std	Y+30, r25	; 0x1e
    5c42:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(700);
					LCD_voidClearDisplay();
    5c44:	0e 94 38 25 	call	0x4a70	; 0x4a70 <LCD_voidClearDisplay>
    5c48:	1c c1       	rjmp	.+568    	; 0x5e82 <keypad_mode+0x5e6>
					break;
					}
				else{

					LCD_voidSetCursorLocation(1, 0); // Line 1, Column 0
    5c4a:	81 e0       	ldi	r24, 0x01	; 1
    5c4c:	60 e0       	ldi	r22, 0x00	; 0
    5c4e:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <LCD_voidSetCursorLocation>
					LCD_voidwriteString((u8*) "Wrong Password!");
    5c52:	8e e6       	ldi	r24, 0x6E	; 110
    5c54:	90 e0       	ldi	r25, 0x00	; 0
    5c56:	0e 94 42 25 	call	0x4a84	; 0x4a84 <LCD_voidwriteString>
					Toggle_led1();	// green led off red led on
    5c5a:	0e 94 83 2a 	call	0x5506	; 0x5506 <Toggle_led1>
					user_password_keypad = '\0';
    5c5e:	10 92 7c 02 	sts	0x027C, r1
    5c62:	10 92 7b 02 	sts	0x027B, r1
					password_repeated_times_keypad++;
    5c66:	80 91 7f 02 	lds	r24, 0x027F
    5c6a:	90 91 80 02 	lds	r25, 0x0280
    5c6e:	01 96       	adiw	r24, 0x01	; 1
    5c70:	90 93 80 02 	sts	0x0280, r25
    5c74:	80 93 7f 02 	sts	0x027F, r24
					if(password_repeated_times_keypad == 3){
    5c78:	80 91 7f 02 	lds	r24, 0x027F
    5c7c:	90 91 80 02 	lds	r25, 0x0280
    5c80:	83 30       	cpi	r24, 0x03	; 3
    5c82:	91 05       	cpc	r25, r1
    5c84:	09 f0       	breq	.+2      	; 0x5c88 <keypad_mode+0x3ec>
    5c86:	83 c0       	rjmp	.+262    	; 0x5d8e <keypad_mode+0x4f2>
						LCD_voidSetCursorLocation(1, 0); // Line 1, Column 0
    5c88:	81 e0       	ldi	r24, 0x01	; 1
    5c8a:	60 e0       	ldi	r22, 0x00	; 0
    5c8c:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <LCD_voidSetCursorLocation>
						LCD_voidwriteString((u8*) "No more trials");
    5c90:	8e e7       	ldi	r24, 0x7E	; 126
    5c92:	90 e0       	ldi	r25, 0x00	; 0
    5c94:	0e 94 42 25 	call	0x4a84	; 0x4a84 <LCD_voidwriteString>
    5c98:	80 e0       	ldi	r24, 0x00	; 0
    5c9a:	90 e0       	ldi	r25, 0x00	; 0
    5c9c:	af e2       	ldi	r26, 0x2F	; 47
    5c9e:	b4 e4       	ldi	r27, 0x44	; 68
    5ca0:	89 8f       	std	Y+25, r24	; 0x19
    5ca2:	9a 8f       	std	Y+26, r25	; 0x1a
    5ca4:	ab 8f       	std	Y+27, r26	; 0x1b
    5ca6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ca8:	69 8d       	ldd	r22, Y+25	; 0x19
    5caa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5cac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5cae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5cb0:	20 e0       	ldi	r18, 0x00	; 0
    5cb2:	30 e0       	ldi	r19, 0x00	; 0
    5cb4:	4a ef       	ldi	r20, 0xFA	; 250
    5cb6:	54 e4       	ldi	r21, 0x44	; 68
    5cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cbc:	dc 01       	movw	r26, r24
    5cbe:	cb 01       	movw	r24, r22
    5cc0:	8d 8b       	std	Y+21, r24	; 0x15
    5cc2:	9e 8b       	std	Y+22, r25	; 0x16
    5cc4:	af 8b       	std	Y+23, r26	; 0x17
    5cc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5cc8:	6d 89       	ldd	r22, Y+21	; 0x15
    5cca:	7e 89       	ldd	r23, Y+22	; 0x16
    5ccc:	8f 89       	ldd	r24, Y+23	; 0x17
    5cce:	98 8d       	ldd	r25, Y+24	; 0x18
    5cd0:	20 e0       	ldi	r18, 0x00	; 0
    5cd2:	30 e0       	ldi	r19, 0x00	; 0
    5cd4:	40 e8       	ldi	r20, 0x80	; 128
    5cd6:	5f e3       	ldi	r21, 0x3F	; 63
    5cd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5cdc:	88 23       	and	r24, r24
    5cde:	2c f4       	brge	.+10     	; 0x5cea <keypad_mode+0x44e>
		__ticks = 1;
    5ce0:	81 e0       	ldi	r24, 0x01	; 1
    5ce2:	90 e0       	ldi	r25, 0x00	; 0
    5ce4:	9c 8b       	std	Y+20, r25	; 0x14
    5ce6:	8b 8b       	std	Y+19, r24	; 0x13
    5ce8:	3f c0       	rjmp	.+126    	; 0x5d68 <keypad_mode+0x4cc>
	else if (__tmp > 65535)
    5cea:	6d 89       	ldd	r22, Y+21	; 0x15
    5cec:	7e 89       	ldd	r23, Y+22	; 0x16
    5cee:	8f 89       	ldd	r24, Y+23	; 0x17
    5cf0:	98 8d       	ldd	r25, Y+24	; 0x18
    5cf2:	20 e0       	ldi	r18, 0x00	; 0
    5cf4:	3f ef       	ldi	r19, 0xFF	; 255
    5cf6:	4f e7       	ldi	r20, 0x7F	; 127
    5cf8:	57 e4       	ldi	r21, 0x47	; 71
    5cfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5cfe:	18 16       	cp	r1, r24
    5d00:	4c f5       	brge	.+82     	; 0x5d54 <keypad_mode+0x4b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d02:	69 8d       	ldd	r22, Y+25	; 0x19
    5d04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5d06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5d08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5d0a:	20 e0       	ldi	r18, 0x00	; 0
    5d0c:	30 e0       	ldi	r19, 0x00	; 0
    5d0e:	40 e2       	ldi	r20, 0x20	; 32
    5d10:	51 e4       	ldi	r21, 0x41	; 65
    5d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d16:	dc 01       	movw	r26, r24
    5d18:	cb 01       	movw	r24, r22
    5d1a:	bc 01       	movw	r22, r24
    5d1c:	cd 01       	movw	r24, r26
    5d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d22:	dc 01       	movw	r26, r24
    5d24:	cb 01       	movw	r24, r22
    5d26:	9c 8b       	std	Y+20, r25	; 0x14
    5d28:	8b 8b       	std	Y+19, r24	; 0x13
    5d2a:	0f c0       	rjmp	.+30     	; 0x5d4a <keypad_mode+0x4ae>
    5d2c:	88 ec       	ldi	r24, 0xC8	; 200
    5d2e:	90 e0       	ldi	r25, 0x00	; 0
    5d30:	9a 8b       	std	Y+18, r25	; 0x12
    5d32:	89 8b       	std	Y+17, r24	; 0x11
    5d34:	89 89       	ldd	r24, Y+17	; 0x11
    5d36:	9a 89       	ldd	r25, Y+18	; 0x12
    5d38:	01 97       	sbiw	r24, 0x01	; 1
    5d3a:	f1 f7       	brne	.-4      	; 0x5d38 <keypad_mode+0x49c>
    5d3c:	9a 8b       	std	Y+18, r25	; 0x12
    5d3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d40:	8b 89       	ldd	r24, Y+19	; 0x13
    5d42:	9c 89       	ldd	r25, Y+20	; 0x14
    5d44:	01 97       	sbiw	r24, 0x01	; 1
    5d46:	9c 8b       	std	Y+20, r25	; 0x14
    5d48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d4a:	8b 89       	ldd	r24, Y+19	; 0x13
    5d4c:	9c 89       	ldd	r25, Y+20	; 0x14
    5d4e:	00 97       	sbiw	r24, 0x00	; 0
    5d50:	69 f7       	brne	.-38     	; 0x5d2c <keypad_mode+0x490>
    5d52:	14 c0       	rjmp	.+40     	; 0x5d7c <keypad_mode+0x4e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d54:	6d 89       	ldd	r22, Y+21	; 0x15
    5d56:	7e 89       	ldd	r23, Y+22	; 0x16
    5d58:	8f 89       	ldd	r24, Y+23	; 0x17
    5d5a:	98 8d       	ldd	r25, Y+24	; 0x18
    5d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d60:	dc 01       	movw	r26, r24
    5d62:	cb 01       	movw	r24, r22
    5d64:	9c 8b       	std	Y+20, r25	; 0x14
    5d66:	8b 8b       	std	Y+19, r24	; 0x13
    5d68:	8b 89       	ldd	r24, Y+19	; 0x13
    5d6a:	9c 89       	ldd	r25, Y+20	; 0x14
    5d6c:	98 8b       	std	Y+16, r25	; 0x10
    5d6e:	8f 87       	std	Y+15, r24	; 0x0f
    5d70:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d72:	98 89       	ldd	r25, Y+16	; 0x10
    5d74:	01 97       	sbiw	r24, 0x01	; 1
    5d76:	f1 f7       	brne	.-4      	; 0x5d74 <keypad_mode+0x4d8>
    5d78:	98 8b       	std	Y+16, r25	; 0x10
    5d7a:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(700);
						LCD_voidClearDisplay();
    5d7c:	0e 94 38 25 	call	0x4a70	; 0x4a70 <LCD_voidClearDisplay>
						password_repeated_times_keypad = 0;
    5d80:	10 92 80 02 	sts	0x0280, r1
    5d84:	10 92 7f 02 	sts	0x027F, r1
						Red_blink();	// green led off red led blink
    5d88:	0e 94 a9 2a 	call	0x5552	; 0x5552 <Red_blink>
    5d8c:	7a c0       	rjmp	.+244    	; 0x5e82 <keypad_mode+0x5e6>
						break;
    5d8e:	80 e0       	ldi	r24, 0x00	; 0
    5d90:	90 e0       	ldi	r25, 0x00	; 0
    5d92:	af e2       	ldi	r26, 0x2F	; 47
    5d94:	b4 e4       	ldi	r27, 0x44	; 68
    5d96:	8b 87       	std	Y+11, r24	; 0x0b
    5d98:	9c 87       	std	Y+12, r25	; 0x0c
    5d9a:	ad 87       	std	Y+13, r26	; 0x0d
    5d9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5da0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5da6:	20 e0       	ldi	r18, 0x00	; 0
    5da8:	30 e0       	ldi	r19, 0x00	; 0
    5daa:	4a ef       	ldi	r20, 0xFA	; 250
    5dac:	54 e4       	ldi	r21, 0x44	; 68
    5dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5db2:	dc 01       	movw	r26, r24
    5db4:	cb 01       	movw	r24, r22
    5db6:	8f 83       	std	Y+7, r24	; 0x07
    5db8:	98 87       	std	Y+8, r25	; 0x08
    5dba:	a9 87       	std	Y+9, r26	; 0x09
    5dbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    5dc0:	78 85       	ldd	r23, Y+8	; 0x08
    5dc2:	89 85       	ldd	r24, Y+9	; 0x09
    5dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5dc6:	20 e0       	ldi	r18, 0x00	; 0
    5dc8:	30 e0       	ldi	r19, 0x00	; 0
    5dca:	40 e8       	ldi	r20, 0x80	; 128
    5dcc:	5f e3       	ldi	r21, 0x3F	; 63
    5dce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5dd2:	88 23       	and	r24, r24
    5dd4:	2c f4       	brge	.+10     	; 0x5de0 <keypad_mode+0x544>
		__ticks = 1;
    5dd6:	81 e0       	ldi	r24, 0x01	; 1
    5dd8:	90 e0       	ldi	r25, 0x00	; 0
    5dda:	9e 83       	std	Y+6, r25	; 0x06
    5ddc:	8d 83       	std	Y+5, r24	; 0x05
    5dde:	3f c0       	rjmp	.+126    	; 0x5e5e <keypad_mode+0x5c2>
	else if (__tmp > 65535)
    5de0:	6f 81       	ldd	r22, Y+7	; 0x07
    5de2:	78 85       	ldd	r23, Y+8	; 0x08
    5de4:	89 85       	ldd	r24, Y+9	; 0x09
    5de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5de8:	20 e0       	ldi	r18, 0x00	; 0
    5dea:	3f ef       	ldi	r19, 0xFF	; 255
    5dec:	4f e7       	ldi	r20, 0x7F	; 127
    5dee:	57 e4       	ldi	r21, 0x47	; 71
    5df0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5df4:	18 16       	cp	r1, r24
    5df6:	4c f5       	brge	.+82     	; 0x5e4a <keypad_mode+0x5ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5df8:	6b 85       	ldd	r22, Y+11	; 0x0b
    5dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    5dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    5dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e00:	20 e0       	ldi	r18, 0x00	; 0
    5e02:	30 e0       	ldi	r19, 0x00	; 0
    5e04:	40 e2       	ldi	r20, 0x20	; 32
    5e06:	51 e4       	ldi	r21, 0x41	; 65
    5e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e0c:	dc 01       	movw	r26, r24
    5e0e:	cb 01       	movw	r24, r22
    5e10:	bc 01       	movw	r22, r24
    5e12:	cd 01       	movw	r24, r26
    5e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e18:	dc 01       	movw	r26, r24
    5e1a:	cb 01       	movw	r24, r22
    5e1c:	9e 83       	std	Y+6, r25	; 0x06
    5e1e:	8d 83       	std	Y+5, r24	; 0x05
    5e20:	0f c0       	rjmp	.+30     	; 0x5e40 <keypad_mode+0x5a4>
    5e22:	88 ec       	ldi	r24, 0xC8	; 200
    5e24:	90 e0       	ldi	r25, 0x00	; 0
    5e26:	9c 83       	std	Y+4, r25	; 0x04
    5e28:	8b 83       	std	Y+3, r24	; 0x03
    5e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    5e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    5e2e:	01 97       	sbiw	r24, 0x01	; 1
    5e30:	f1 f7       	brne	.-4      	; 0x5e2e <keypad_mode+0x592>
    5e32:	9c 83       	std	Y+4, r25	; 0x04
    5e34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e36:	8d 81       	ldd	r24, Y+5	; 0x05
    5e38:	9e 81       	ldd	r25, Y+6	; 0x06
    5e3a:	01 97       	sbiw	r24, 0x01	; 1
    5e3c:	9e 83       	std	Y+6, r25	; 0x06
    5e3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e40:	8d 81       	ldd	r24, Y+5	; 0x05
    5e42:	9e 81       	ldd	r25, Y+6	; 0x06
    5e44:	00 97       	sbiw	r24, 0x00	; 0
    5e46:	69 f7       	brne	.-38     	; 0x5e22 <keypad_mode+0x586>
    5e48:	14 c0       	rjmp	.+40     	; 0x5e72 <keypad_mode+0x5d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    5e4c:	78 85       	ldd	r23, Y+8	; 0x08
    5e4e:	89 85       	ldd	r24, Y+9	; 0x09
    5e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e56:	dc 01       	movw	r26, r24
    5e58:	cb 01       	movw	r24, r22
    5e5a:	9e 83       	std	Y+6, r25	; 0x06
    5e5c:	8d 83       	std	Y+5, r24	; 0x05
    5e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    5e60:	9e 81       	ldd	r25, Y+6	; 0x06
    5e62:	9a 83       	std	Y+2, r25	; 0x02
    5e64:	89 83       	std	Y+1, r24	; 0x01
    5e66:	89 81       	ldd	r24, Y+1	; 0x01
    5e68:	9a 81       	ldd	r25, Y+2	; 0x02
    5e6a:	01 97       	sbiw	r24, 0x01	; 1
    5e6c:	f1 f7       	brne	.-4      	; 0x5e6a <keypad_mode+0x5ce>
    5e6e:	9a 83       	std	Y+2, r25	; 0x02
    5e70:	89 83       	std	Y+1, r24	; 0x01
					}
					else{}
					_delay_ms(700);
					LCD_voidClearDisplay();
    5e72:	0e 94 38 25 	call	0x4a70	; 0x4a70 <LCD_voidClearDisplay>
    5e76:	05 c0       	rjmp	.+10     	; 0x5e82 <keypad_mode+0x5e6>

				}

			}
			else{}
			local_u8KeypadValue = KEYPAD_u8Scan();
    5e78:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <KEYPAD_u8Scan>
    5e7c:	80 93 7a 02 	sts	0x027A, r24
    5e80:	1e cd       	rjmp	.-1476   	; 0x58be <keypad_mode+0x22>

	}
}
    5e82:	ca 5b       	subi	r28, 0xBA	; 186
    5e84:	df 4f       	sbci	r29, 0xFF	; 255
    5e86:	0f b6       	in	r0, 0x3f	; 63
    5e88:	f8 94       	cli
    5e8a:	de bf       	out	0x3e, r29	; 62
    5e8c:	0f be       	out	0x3f, r0	; 63
    5e8e:	cd bf       	out	0x3d, r28	; 61
    5e90:	cf 91       	pop	r28
    5e92:	df 91       	pop	r29
    5e94:	1f 91       	pop	r17
    5e96:	0f 91       	pop	r16
    5e98:	08 95       	ret

00005e9a <main>:

void main(void){
    5e9a:	0f 93       	push	r16
    5e9c:	1f 93       	push	r17
    5e9e:	df 93       	push	r29
    5ea0:	cf 93       	push	r28
    5ea2:	cd b7       	in	r28, 0x3d	; 61
    5ea4:	de b7       	in	r29, 0x3e	; 62
    5ea6:	c0 58       	subi	r28, 0x80	; 128
    5ea8:	d0 40       	sbci	r29, 0x00	; 0
    5eaa:	0f b6       	in	r0, 0x3f	; 63
    5eac:	f8 94       	cli
    5eae:	de bf       	out	0x3e, r29	; 62
    5eb0:	0f be       	out	0x3f, r0	; 63
    5eb2:	cd bf       	out	0x3d, r28	; 61

	DIO_voidIniPins(DIOA, DIO_PIN0|DIO_PIN3|DIO_PIN2|DIO_PIN7, DIO_OUTPUT);
    5eb4:	89 e3       	ldi	r24, 0x39	; 57
    5eb6:	90 e0       	ldi	r25, 0x00	; 0
    5eb8:	6d e8       	ldi	r22, 0x8D	; 141
    5eba:	4f ef       	ldi	r20, 0xFF	; 255
    5ebc:	0e 94 c8 1a 	call	0x3590	; 0x3590 <DIO_voidIniPins>

	// initializations
	Servo_voidini();
    5ec0:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <Servo_voidini>
	TIM_voidIni(TIM0);
    5ec4:	80 e0       	ldi	r24, 0x00	; 0
    5ec6:	0e 94 ab 0b 	call	0x1756	; 0x1756 <TIM_voidIni>
	TIM_voidIni(TIM2);
    5eca:	82 e0       	ldi	r24, 0x02	; 2
    5ecc:	0e 94 ab 0b 	call	0x1756	; 0x1756 <TIM_voidIni>
	TIM_voidSetPWMDC(OC0,10);
    5ed0:	80 e0       	ldi	r24, 0x00	; 0
    5ed2:	40 e0       	ldi	r20, 0x00	; 0
    5ed4:	50 e0       	ldi	r21, 0x00	; 0
    5ed6:	60 e2       	ldi	r22, 0x20	; 32
    5ed8:	71 e4       	ldi	r23, 0x41	; 65
    5eda:	0e 94 33 14 	call	0x2866	; 0x2866 <TIM_voidSetPWMDC>
	TIM_voidSetPWMDC(OC2,50);
    5ede:	83 e0       	ldi	r24, 0x03	; 3
    5ee0:	40 e0       	ldi	r20, 0x00	; 0
    5ee2:	50 e0       	ldi	r21, 0x00	; 0
    5ee4:	68 e4       	ldi	r22, 0x48	; 72
    5ee6:	72 e4       	ldi	r23, 0x42	; 66
    5ee8:	0e 94 33 14 	call	0x2866	; 0x2866 <TIM_voidSetPWMDC>
	TIM_voidStart(TIM0,TIMS_DIVISION_1024);
    5eec:	80 e0       	ldi	r24, 0x00	; 0
    5eee:	67 e0       	ldi	r22, 0x07	; 7
    5ef0:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <TIM_voidStart>
	TIM_voidStart(TIM2,TIMS_DIVISION_1024);
    5ef4:	82 e0       	ldi	r24, 0x02	; 2
    5ef6:	67 e0       	ldi	r22, 0x07	; 7
    5ef8:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <TIM_voidStart>

	// EXTI
	DIO_voidIniPins(DIOD,DIO_PIN2,DIO_INPUT);
    5efc:	80 e3       	ldi	r24, 0x30	; 48
    5efe:	90 e0       	ldi	r25, 0x00	; 0
    5f00:	64 e0       	ldi	r22, 0x04	; 4
    5f02:	40 e0       	ldi	r20, 0x00	; 0
    5f04:	0e 94 c8 1a 	call	0x3590	; 0x3590 <DIO_voidIniPins>
	Intrrupt_Init(EXT_INT0,TOGGLING);
    5f08:	80 e0       	ldi	r24, 0x00	; 0
    5f0a:	63 e0       	ldi	r22, 0x03	; 3
    5f0c:	0e 94 82 18 	call	0x3104	; 0x3104 <Intrrupt_Init>
	Intrrupt_GetFun(EXT_INT0,keypad_mode);
    5f10:	2e e4       	ldi	r18, 0x4E	; 78
    5f12:	3c e2       	ldi	r19, 0x2C	; 44
    5f14:	80 e0       	ldi	r24, 0x00	; 0
    5f16:	b9 01       	movw	r22, r18
    5f18:	0e 94 f6 19 	call	0x33ec	; 0x33ec <Intrrupt_GetFun>
	Intrrupt_Enabled(EXT_INT0);
    5f1c:	80 e0       	ldi	r24, 0x00	; 0
    5f1e:	0e 94 81 19 	call	0x3302	; 0x3302 <Intrrupt_Enabled>

	LCD_voidini();         // data on: PORTC, control on: PORTD
    5f22:	0e 94 83 22 	call	0x4506	; 0x4506 <LCD_voidini>
	KEYPAD_voidini();	   // all on PORTB
    5f26:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <KEYPAD_voidini>
	UART_voidIni(9600);
    5f2a:	60 e8       	ldi	r22, 0x80	; 128
    5f2c:	75 e2       	ldi	r23, 0x25	; 37
    5f2e:	80 e0       	ldi	r24, 0x00	; 0
    5f30:	90 e0       	ldi	r25, 0x00	; 0
    5f32:	0e 94 82 08 	call	0x1104	; 0x1104 <UART_voidIni>

	while(1){

		UART_character = UART_u8Receive();
    5f36:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <UART_u8Receive>
    5f3a:	80 93 79 02 	sts	0x0279, r24
		//echo
		UART_voidTransmit(UART_character);
    5f3e:	80 91 79 02 	lds	r24, 0x0279
    5f42:	0e 94 35 09 	call	0x126a	; 0x126a <UART_voidTransmit>

		// UART
		if(UART_character != '\0'){
    5f46:	80 91 79 02 	lds	r24, 0x0279
    5f4a:	88 23       	and	r24, r24
    5f4c:	a1 f3       	breq	.-24     	; 0x5f36 <main+0x9c>

			while(1){
				switch(UART_character){
    5f4e:	80 91 79 02 	lds	r24, 0x0279
    5f52:	28 2f       	mov	r18, r24
    5f54:	30 e0       	ldi	r19, 0x00	; 0
    5f56:	c1 58       	subi	r28, 0x81	; 129
    5f58:	df 4f       	sbci	r29, 0xFF	; 255
    5f5a:	39 83       	std	Y+1, r19	; 0x01
    5f5c:	28 83       	st	Y, r18
    5f5e:	cf 57       	subi	r28, 0x7F	; 127
    5f60:	d0 40       	sbci	r29, 0x00	; 0
    5f62:	c1 58       	subi	r28, 0x81	; 129
    5f64:	df 4f       	sbci	r29, 0xFF	; 255
    5f66:	88 81       	ld	r24, Y
    5f68:	99 81       	ldd	r25, Y+1	; 0x01
    5f6a:	cf 57       	subi	r28, 0x7F	; 127
    5f6c:	d0 40       	sbci	r29, 0x00	; 0
    5f6e:	8f 34       	cpi	r24, 0x4F	; 79
    5f70:	91 05       	cpc	r25, r1
    5f72:	09 f4       	brne	.+2      	; 0x5f76 <main+0xdc>
    5f74:	4f c0       	rjmp	.+158    	; 0x6014 <main+0x17a>
    5f76:	c1 58       	subi	r28, 0x81	; 129
    5f78:	df 4f       	sbci	r29, 0xFF	; 255
    5f7a:	e8 81       	ld	r30, Y
    5f7c:	f9 81       	ldd	r31, Y+1	; 0x01
    5f7e:	cf 57       	subi	r28, 0x7F	; 127
    5f80:	d0 40       	sbci	r29, 0x00	; 0
    5f82:	e0 35       	cpi	r30, 0x50	; 80
    5f84:	f1 05       	cpc	r31, r1
    5f86:	9c f4       	brge	.+38     	; 0x5fae <main+0x114>
    5f88:	c1 58       	subi	r28, 0x81	; 129
    5f8a:	df 4f       	sbci	r29, 0xFF	; 255
    5f8c:	28 81       	ld	r18, Y
    5f8e:	39 81       	ldd	r19, Y+1	; 0x01
    5f90:	cf 57       	subi	r28, 0x7F	; 127
    5f92:	d0 40       	sbci	r29, 0x00	; 0
    5f94:	28 34       	cpi	r18, 0x48	; 72
    5f96:	31 05       	cpc	r19, r1
    5f98:	f9 f0       	breq	.+62     	; 0x5fd8 <main+0x13e>
    5f9a:	c1 58       	subi	r28, 0x81	; 129
    5f9c:	df 4f       	sbci	r29, 0xFF	; 255
    5f9e:	88 81       	ld	r24, Y
    5fa0:	99 81       	ldd	r25, Y+1	; 0x01
    5fa2:	cf 57       	subi	r28, 0x7F	; 127
    5fa4:	d0 40       	sbci	r29, 0x00	; 0
    5fa6:	8c 34       	cpi	r24, 0x4C	; 76
    5fa8:	91 05       	cpc	r25, r1
    5faa:	29 f1       	breq	.+74     	; 0x5ff6 <main+0x15c>
    5fac:	4b c3       	rjmp	.+1686   	; 0x6644 <main+0x7aa>
    5fae:	c1 58       	subi	r28, 0x81	; 129
    5fb0:	df 4f       	sbci	r29, 0xFF	; 255
    5fb2:	e8 81       	ld	r30, Y
    5fb4:	f9 81       	ldd	r31, Y+1	; 0x01
    5fb6:	cf 57       	subi	r28, 0x7F	; 127
    5fb8:	d0 40       	sbci	r29, 0x00	; 0
    5fba:	e3 35       	cpi	r30, 0x53	; 83
    5fbc:	f1 05       	cpc	r31, r1
    5fbe:	09 f4       	brne	.+2      	; 0x5fc2 <main+0x128>
    5fc0:	aa c1       	rjmp	.+852    	; 0x6316 <main+0x47c>
    5fc2:	c1 58       	subi	r28, 0x81	; 129
    5fc4:	df 4f       	sbci	r29, 0xFF	; 255
    5fc6:	28 81       	ld	r18, Y
    5fc8:	39 81       	ldd	r19, Y+1	; 0x01
    5fca:	cf 57       	subi	r28, 0x7F	; 127
    5fcc:	d0 40       	sbci	r29, 0x00	; 0
    5fce:	27 35       	cpi	r18, 0x57	; 87
    5fd0:	31 05       	cpc	r19, r1
    5fd2:	09 f4       	brne	.+2      	; 0x5fd6 <main+0x13c>
    5fd4:	70 c2       	rjmp	.+1248   	; 0x64b6 <main+0x61c>
    5fd6:	36 c3       	rjmp	.+1644   	; 0x6644 <main+0x7aa>
				case 'H':
					DIO_voidSetPinsValue(DIOA,DIO_PIN3,DIO_HIGH);
    5fd8:	89 e3       	ldi	r24, 0x39	; 57
    5fda:	90 e0       	ldi	r25, 0x00	; 0
    5fdc:	68 e0       	ldi	r22, 0x08	; 8
    5fde:	4f ef       	ldi	r20, 0xFF	; 255
    5fe0:	0e 94 ed 1a 	call	0x35da	; 0x35da <DIO_voidSetPinsValue>
					UART_voidTransmitString((u8*)": ");
    5fe4:	8d e8       	ldi	r24, 0x8D	; 141
    5fe6:	90 e0       	ldi	r25, 0x00	; 0
    5fe8:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <UART_voidTransmitString>
					UART_voidTransmitString((u8*)"Light on the house \n\r");
    5fec:	80 e9       	ldi	r24, 0x90	; 144
    5fee:	90 e0       	ldi	r25, 0x00	; 0
    5ff0:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <UART_voidTransmitString>
    5ff4:	27 c3       	rjmp	.+1614   	; 0x6644 <main+0x7aa>
					break;

				case 'L':
					DIO_voidSetPinsValue(DIOA,DIO_PIN3,DIO_LOW);
    5ff6:	89 e3       	ldi	r24, 0x39	; 57
    5ff8:	90 e0       	ldi	r25, 0x00	; 0
    5ffa:	68 e0       	ldi	r22, 0x08	; 8
    5ffc:	40 e0       	ldi	r20, 0x00	; 0
    5ffe:	0e 94 ed 1a 	call	0x35da	; 0x35da <DIO_voidSetPinsValue>
					UART_voidTransmitString((u8*)": ");
    6002:	8d e8       	ldi	r24, 0x8D	; 141
    6004:	90 e0       	ldi	r25, 0x00	; 0
    6006:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <UART_voidTransmitString>
					UART_voidTransmitString((u8*)"Light off the house \n\r");
    600a:	86 ea       	ldi	r24, 0xA6	; 166
    600c:	90 e0       	ldi	r25, 0x00	; 0
    600e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <UART_voidTransmitString>
    6012:	18 c3       	rjmp	.+1584   	; 0x6644 <main+0x7aa>
					break;

				case 'O':
					LCD_voidSetCursorLocation(1, 0); // Line 1, Column 0
    6014:	81 e0       	ldi	r24, 0x01	; 1
    6016:	60 e0       	ldi	r22, 0x00	; 0
    6018:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <LCD_voidSetCursorLocation>
					UART_voidTransmitString((u8*)": ");
    601c:	8d e8       	ldi	r24, 0x8D	; 141
    601e:	90 e0       	ldi	r25, 0x00	; 0
    6020:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <UART_voidTransmitString>
					UART_voidTransmitString((u8*)"Password correct \n\r");
    6024:	8d eb       	ldi	r24, 0xBD	; 189
    6026:	90 e0       	ldi	r25, 0x00	; 0
    6028:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <UART_voidTransmitString>
					LCD_voidwriteString((u8*) "Welcome Home!");
    602c:	80 e6       	ldi	r24, 0x60	; 96
    602e:	90 e0       	ldi	r25, 0x00	; 0
    6030:	0e 94 42 25 	call	0x4a84	; 0x4a84 <LCD_voidwriteString>

					Toggle_led2();	// green led on red led off
    6034:	0e 94 96 2a 	call	0x552c	; 0x552c <Toggle_led2>
					Servo_voidMoveToLocation((u8)90);	// open lock
    6038:	8a e5       	ldi	r24, 0x5A	; 90
    603a:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <Servo_voidMoveToLocation>
    603e:	fe 01       	movw	r30, r28
    6040:	e5 58       	subi	r30, 0x85	; 133
    6042:	ff 4f       	sbci	r31, 0xFF	; 255
    6044:	80 e0       	ldi	r24, 0x00	; 0
    6046:	90 e0       	ldi	r25, 0x00	; 0
    6048:	aa ef       	ldi	r26, 0xFA	; 250
    604a:	b4 e4       	ldi	r27, 0x44	; 68
    604c:	80 83       	st	Z, r24
    604e:	91 83       	std	Z+1, r25	; 0x01
    6050:	a2 83       	std	Z+2, r26	; 0x02
    6052:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6054:	8e 01       	movw	r16, r28
    6056:	09 58       	subi	r16, 0x89	; 137
    6058:	1f 4f       	sbci	r17, 0xFF	; 255
    605a:	fe 01       	movw	r30, r28
    605c:	e5 58       	subi	r30, 0x85	; 133
    605e:	ff 4f       	sbci	r31, 0xFF	; 255
    6060:	60 81       	ld	r22, Z
    6062:	71 81       	ldd	r23, Z+1	; 0x01
    6064:	82 81       	ldd	r24, Z+2	; 0x02
    6066:	93 81       	ldd	r25, Z+3	; 0x03
    6068:	20 e0       	ldi	r18, 0x00	; 0
    606a:	30 e0       	ldi	r19, 0x00	; 0
    606c:	4a ef       	ldi	r20, 0xFA	; 250
    606e:	54 e4       	ldi	r21, 0x44	; 68
    6070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6074:	dc 01       	movw	r26, r24
    6076:	cb 01       	movw	r24, r22
    6078:	f8 01       	movw	r30, r16
    607a:	80 83       	st	Z, r24
    607c:	91 83       	std	Z+1, r25	; 0x01
    607e:	a2 83       	std	Z+2, r26	; 0x02
    6080:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6082:	fe 01       	movw	r30, r28
    6084:	e9 58       	subi	r30, 0x89	; 137
    6086:	ff 4f       	sbci	r31, 0xFF	; 255
    6088:	60 81       	ld	r22, Z
    608a:	71 81       	ldd	r23, Z+1	; 0x01
    608c:	82 81       	ldd	r24, Z+2	; 0x02
    608e:	93 81       	ldd	r25, Z+3	; 0x03
    6090:	20 e0       	ldi	r18, 0x00	; 0
    6092:	30 e0       	ldi	r19, 0x00	; 0
    6094:	40 e8       	ldi	r20, 0x80	; 128
    6096:	5f e3       	ldi	r21, 0x3F	; 63
    6098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    609c:	88 23       	and	r24, r24
    609e:	44 f4       	brge	.+16     	; 0x60b0 <main+0x216>
		__ticks = 1;
    60a0:	fe 01       	movw	r30, r28
    60a2:	eb 58       	subi	r30, 0x8B	; 139
    60a4:	ff 4f       	sbci	r31, 0xFF	; 255
    60a6:	81 e0       	ldi	r24, 0x01	; 1
    60a8:	90 e0       	ldi	r25, 0x00	; 0
    60aa:	91 83       	std	Z+1, r25	; 0x01
    60ac:	80 83       	st	Z, r24
    60ae:	64 c0       	rjmp	.+200    	; 0x6178 <main+0x2de>
	else if (__tmp > 65535)
    60b0:	fe 01       	movw	r30, r28
    60b2:	e9 58       	subi	r30, 0x89	; 137
    60b4:	ff 4f       	sbci	r31, 0xFF	; 255
    60b6:	60 81       	ld	r22, Z
    60b8:	71 81       	ldd	r23, Z+1	; 0x01
    60ba:	82 81       	ldd	r24, Z+2	; 0x02
    60bc:	93 81       	ldd	r25, Z+3	; 0x03
    60be:	20 e0       	ldi	r18, 0x00	; 0
    60c0:	3f ef       	ldi	r19, 0xFF	; 255
    60c2:	4f e7       	ldi	r20, 0x7F	; 127
    60c4:	57 e4       	ldi	r21, 0x47	; 71
    60c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    60ca:	18 16       	cp	r1, r24
    60cc:	0c f0       	brlt	.+2      	; 0x60d0 <main+0x236>
    60ce:	43 c0       	rjmp	.+134    	; 0x6156 <main+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60d0:	fe 01       	movw	r30, r28
    60d2:	e5 58       	subi	r30, 0x85	; 133
    60d4:	ff 4f       	sbci	r31, 0xFF	; 255
    60d6:	60 81       	ld	r22, Z
    60d8:	71 81       	ldd	r23, Z+1	; 0x01
    60da:	82 81       	ldd	r24, Z+2	; 0x02
    60dc:	93 81       	ldd	r25, Z+3	; 0x03
    60de:	20 e0       	ldi	r18, 0x00	; 0
    60e0:	30 e0       	ldi	r19, 0x00	; 0
    60e2:	40 e2       	ldi	r20, 0x20	; 32
    60e4:	51 e4       	ldi	r21, 0x41	; 65
    60e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60ea:	dc 01       	movw	r26, r24
    60ec:	cb 01       	movw	r24, r22
    60ee:	8e 01       	movw	r16, r28
    60f0:	0b 58       	subi	r16, 0x8B	; 139
    60f2:	1f 4f       	sbci	r17, 0xFF	; 255
    60f4:	bc 01       	movw	r22, r24
    60f6:	cd 01       	movw	r24, r26
    60f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60fc:	dc 01       	movw	r26, r24
    60fe:	cb 01       	movw	r24, r22
    6100:	f8 01       	movw	r30, r16
    6102:	91 83       	std	Z+1, r25	; 0x01
    6104:	80 83       	st	Z, r24
    6106:	1f c0       	rjmp	.+62     	; 0x6146 <main+0x2ac>
    6108:	fe 01       	movw	r30, r28
    610a:	ed 58       	subi	r30, 0x8D	; 141
    610c:	ff 4f       	sbci	r31, 0xFF	; 255
    610e:	88 ec       	ldi	r24, 0xC8	; 200
    6110:	90 e0       	ldi	r25, 0x00	; 0
    6112:	91 83       	std	Z+1, r25	; 0x01
    6114:	80 83       	st	Z, r24
    6116:	fe 01       	movw	r30, r28
    6118:	ed 58       	subi	r30, 0x8D	; 141
    611a:	ff 4f       	sbci	r31, 0xFF	; 255
    611c:	80 81       	ld	r24, Z
    611e:	91 81       	ldd	r25, Z+1	; 0x01
    6120:	01 97       	sbiw	r24, 0x01	; 1
    6122:	f1 f7       	brne	.-4      	; 0x6120 <main+0x286>
    6124:	fe 01       	movw	r30, r28
    6126:	ed 58       	subi	r30, 0x8D	; 141
    6128:	ff 4f       	sbci	r31, 0xFF	; 255
    612a:	91 83       	std	Z+1, r25	; 0x01
    612c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    612e:	de 01       	movw	r26, r28
    6130:	ab 58       	subi	r26, 0x8B	; 139
    6132:	bf 4f       	sbci	r27, 0xFF	; 255
    6134:	fe 01       	movw	r30, r28
    6136:	eb 58       	subi	r30, 0x8B	; 139
    6138:	ff 4f       	sbci	r31, 0xFF	; 255
    613a:	80 81       	ld	r24, Z
    613c:	91 81       	ldd	r25, Z+1	; 0x01
    613e:	01 97       	sbiw	r24, 0x01	; 1
    6140:	11 96       	adiw	r26, 0x01	; 1
    6142:	9c 93       	st	X, r25
    6144:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6146:	fe 01       	movw	r30, r28
    6148:	eb 58       	subi	r30, 0x8B	; 139
    614a:	ff 4f       	sbci	r31, 0xFF	; 255
    614c:	80 81       	ld	r24, Z
    614e:	91 81       	ldd	r25, Z+1	; 0x01
    6150:	00 97       	sbiw	r24, 0x00	; 0
    6152:	d1 f6       	brne	.-76     	; 0x6108 <main+0x26e>
    6154:	27 c0       	rjmp	.+78     	; 0x61a4 <main+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6156:	8e 01       	movw	r16, r28
    6158:	0b 58       	subi	r16, 0x8B	; 139
    615a:	1f 4f       	sbci	r17, 0xFF	; 255
    615c:	fe 01       	movw	r30, r28
    615e:	e9 58       	subi	r30, 0x89	; 137
    6160:	ff 4f       	sbci	r31, 0xFF	; 255
    6162:	60 81       	ld	r22, Z
    6164:	71 81       	ldd	r23, Z+1	; 0x01
    6166:	82 81       	ldd	r24, Z+2	; 0x02
    6168:	93 81       	ldd	r25, Z+3	; 0x03
    616a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    616e:	dc 01       	movw	r26, r24
    6170:	cb 01       	movw	r24, r22
    6172:	f8 01       	movw	r30, r16
    6174:	91 83       	std	Z+1, r25	; 0x01
    6176:	80 83       	st	Z, r24
    6178:	de 01       	movw	r26, r28
    617a:	af 58       	subi	r26, 0x8F	; 143
    617c:	bf 4f       	sbci	r27, 0xFF	; 255
    617e:	fe 01       	movw	r30, r28
    6180:	eb 58       	subi	r30, 0x8B	; 139
    6182:	ff 4f       	sbci	r31, 0xFF	; 255
    6184:	80 81       	ld	r24, Z
    6186:	91 81       	ldd	r25, Z+1	; 0x01
    6188:	8d 93       	st	X+, r24
    618a:	9c 93       	st	X, r25
    618c:	fe 01       	movw	r30, r28
    618e:	ef 58       	subi	r30, 0x8F	; 143
    6190:	ff 4f       	sbci	r31, 0xFF	; 255
    6192:	80 81       	ld	r24, Z
    6194:	91 81       	ldd	r25, Z+1	; 0x01
    6196:	01 97       	sbiw	r24, 0x01	; 1
    6198:	f1 f7       	brne	.-4      	; 0x6196 <main+0x2fc>
    619a:	fe 01       	movw	r30, r28
    619c:	ef 58       	subi	r30, 0x8F	; 143
    619e:	ff 4f       	sbci	r31, 0xFF	; 255
    61a0:	91 83       	std	Z+1, r25	; 0x01
    61a2:	80 83       	st	Z, r24
					_delay_ms(2000);
					Servo_voidMoveToLocation((u8)0);
    61a4:	80 e0       	ldi	r24, 0x00	; 0
    61a6:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <Servo_voidMoveToLocation>
    61aa:	fe 01       	movw	r30, r28
    61ac:	e3 59       	subi	r30, 0x93	; 147
    61ae:	ff 4f       	sbci	r31, 0xFF	; 255
    61b0:	80 e0       	ldi	r24, 0x00	; 0
    61b2:	90 e0       	ldi	r25, 0x00	; 0
    61b4:	af e2       	ldi	r26, 0x2F	; 47
    61b6:	b4 e4       	ldi	r27, 0x44	; 68
    61b8:	80 83       	st	Z, r24
    61ba:	91 83       	std	Z+1, r25	; 0x01
    61bc:	a2 83       	std	Z+2, r26	; 0x02
    61be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    61c0:	8e 01       	movw	r16, r28
    61c2:	07 59       	subi	r16, 0x97	; 151
    61c4:	1f 4f       	sbci	r17, 0xFF	; 255
    61c6:	fe 01       	movw	r30, r28
    61c8:	e3 59       	subi	r30, 0x93	; 147
    61ca:	ff 4f       	sbci	r31, 0xFF	; 255
    61cc:	60 81       	ld	r22, Z
    61ce:	71 81       	ldd	r23, Z+1	; 0x01
    61d0:	82 81       	ldd	r24, Z+2	; 0x02
    61d2:	93 81       	ldd	r25, Z+3	; 0x03
    61d4:	20 e0       	ldi	r18, 0x00	; 0
    61d6:	30 e0       	ldi	r19, 0x00	; 0
    61d8:	4a ef       	ldi	r20, 0xFA	; 250
    61da:	54 e4       	ldi	r21, 0x44	; 68
    61dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61e0:	dc 01       	movw	r26, r24
    61e2:	cb 01       	movw	r24, r22
    61e4:	f8 01       	movw	r30, r16
    61e6:	80 83       	st	Z, r24
    61e8:	91 83       	std	Z+1, r25	; 0x01
    61ea:	a2 83       	std	Z+2, r26	; 0x02
    61ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    61ee:	fe 01       	movw	r30, r28
    61f0:	e7 59       	subi	r30, 0x97	; 151
    61f2:	ff 4f       	sbci	r31, 0xFF	; 255
    61f4:	60 81       	ld	r22, Z
    61f6:	71 81       	ldd	r23, Z+1	; 0x01
    61f8:	82 81       	ldd	r24, Z+2	; 0x02
    61fa:	93 81       	ldd	r25, Z+3	; 0x03
    61fc:	20 e0       	ldi	r18, 0x00	; 0
    61fe:	30 e0       	ldi	r19, 0x00	; 0
    6200:	40 e8       	ldi	r20, 0x80	; 128
    6202:	5f e3       	ldi	r21, 0x3F	; 63
    6204:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6208:	88 23       	and	r24, r24
    620a:	44 f4       	brge	.+16     	; 0x621c <main+0x382>
		__ticks = 1;
    620c:	fe 01       	movw	r30, r28
    620e:	e9 59       	subi	r30, 0x99	; 153
    6210:	ff 4f       	sbci	r31, 0xFF	; 255
    6212:	81 e0       	ldi	r24, 0x01	; 1
    6214:	90 e0       	ldi	r25, 0x00	; 0
    6216:	91 83       	std	Z+1, r25	; 0x01
    6218:	80 83       	st	Z, r24
    621a:	64 c0       	rjmp	.+200    	; 0x62e4 <main+0x44a>
	else if (__tmp > 65535)
    621c:	fe 01       	movw	r30, r28
    621e:	e7 59       	subi	r30, 0x97	; 151
    6220:	ff 4f       	sbci	r31, 0xFF	; 255
    6222:	60 81       	ld	r22, Z
    6224:	71 81       	ldd	r23, Z+1	; 0x01
    6226:	82 81       	ldd	r24, Z+2	; 0x02
    6228:	93 81       	ldd	r25, Z+3	; 0x03
    622a:	20 e0       	ldi	r18, 0x00	; 0
    622c:	3f ef       	ldi	r19, 0xFF	; 255
    622e:	4f e7       	ldi	r20, 0x7F	; 127
    6230:	57 e4       	ldi	r21, 0x47	; 71
    6232:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6236:	18 16       	cp	r1, r24
    6238:	0c f0       	brlt	.+2      	; 0x623c <main+0x3a2>
    623a:	43 c0       	rjmp	.+134    	; 0x62c2 <main+0x428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    623c:	fe 01       	movw	r30, r28
    623e:	e3 59       	subi	r30, 0x93	; 147
    6240:	ff 4f       	sbci	r31, 0xFF	; 255
    6242:	60 81       	ld	r22, Z
    6244:	71 81       	ldd	r23, Z+1	; 0x01
    6246:	82 81       	ldd	r24, Z+2	; 0x02
    6248:	93 81       	ldd	r25, Z+3	; 0x03
    624a:	20 e0       	ldi	r18, 0x00	; 0
    624c:	30 e0       	ldi	r19, 0x00	; 0
    624e:	40 e2       	ldi	r20, 0x20	; 32
    6250:	51 e4       	ldi	r21, 0x41	; 65
    6252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6256:	dc 01       	movw	r26, r24
    6258:	cb 01       	movw	r24, r22
    625a:	8e 01       	movw	r16, r28
    625c:	09 59       	subi	r16, 0x99	; 153
    625e:	1f 4f       	sbci	r17, 0xFF	; 255
    6260:	bc 01       	movw	r22, r24
    6262:	cd 01       	movw	r24, r26
    6264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6268:	dc 01       	movw	r26, r24
    626a:	cb 01       	movw	r24, r22
    626c:	f8 01       	movw	r30, r16
    626e:	91 83       	std	Z+1, r25	; 0x01
    6270:	80 83       	st	Z, r24
    6272:	1f c0       	rjmp	.+62     	; 0x62b2 <main+0x418>
    6274:	fe 01       	movw	r30, r28
    6276:	eb 59       	subi	r30, 0x9B	; 155
    6278:	ff 4f       	sbci	r31, 0xFF	; 255
    627a:	88 ec       	ldi	r24, 0xC8	; 200
    627c:	90 e0       	ldi	r25, 0x00	; 0
    627e:	91 83       	std	Z+1, r25	; 0x01
    6280:	80 83       	st	Z, r24
    6282:	fe 01       	movw	r30, r28
    6284:	eb 59       	subi	r30, 0x9B	; 155
    6286:	ff 4f       	sbci	r31, 0xFF	; 255
    6288:	80 81       	ld	r24, Z
    628a:	91 81       	ldd	r25, Z+1	; 0x01
    628c:	01 97       	sbiw	r24, 0x01	; 1
    628e:	f1 f7       	brne	.-4      	; 0x628c <main+0x3f2>
    6290:	fe 01       	movw	r30, r28
    6292:	eb 59       	subi	r30, 0x9B	; 155
    6294:	ff 4f       	sbci	r31, 0xFF	; 255
    6296:	91 83       	std	Z+1, r25	; 0x01
    6298:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    629a:	de 01       	movw	r26, r28
    629c:	a9 59       	subi	r26, 0x99	; 153
    629e:	bf 4f       	sbci	r27, 0xFF	; 255
    62a0:	fe 01       	movw	r30, r28
    62a2:	e9 59       	subi	r30, 0x99	; 153
    62a4:	ff 4f       	sbci	r31, 0xFF	; 255
    62a6:	80 81       	ld	r24, Z
    62a8:	91 81       	ldd	r25, Z+1	; 0x01
    62aa:	01 97       	sbiw	r24, 0x01	; 1
    62ac:	11 96       	adiw	r26, 0x01	; 1
    62ae:	9c 93       	st	X, r25
    62b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62b2:	fe 01       	movw	r30, r28
    62b4:	e9 59       	subi	r30, 0x99	; 153
    62b6:	ff 4f       	sbci	r31, 0xFF	; 255
    62b8:	80 81       	ld	r24, Z
    62ba:	91 81       	ldd	r25, Z+1	; 0x01
    62bc:	00 97       	sbiw	r24, 0x00	; 0
    62be:	d1 f6       	brne	.-76     	; 0x6274 <main+0x3da>
    62c0:	27 c0       	rjmp	.+78     	; 0x6310 <main+0x476>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62c2:	8e 01       	movw	r16, r28
    62c4:	09 59       	subi	r16, 0x99	; 153
    62c6:	1f 4f       	sbci	r17, 0xFF	; 255
    62c8:	fe 01       	movw	r30, r28
    62ca:	e7 59       	subi	r30, 0x97	; 151
    62cc:	ff 4f       	sbci	r31, 0xFF	; 255
    62ce:	60 81       	ld	r22, Z
    62d0:	71 81       	ldd	r23, Z+1	; 0x01
    62d2:	82 81       	ldd	r24, Z+2	; 0x02
    62d4:	93 81       	ldd	r25, Z+3	; 0x03
    62d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62da:	dc 01       	movw	r26, r24
    62dc:	cb 01       	movw	r24, r22
    62de:	f8 01       	movw	r30, r16
    62e0:	91 83       	std	Z+1, r25	; 0x01
    62e2:	80 83       	st	Z, r24
    62e4:	de 01       	movw	r26, r28
    62e6:	ad 59       	subi	r26, 0x9D	; 157
    62e8:	bf 4f       	sbci	r27, 0xFF	; 255
    62ea:	fe 01       	movw	r30, r28
    62ec:	e9 59       	subi	r30, 0x99	; 153
    62ee:	ff 4f       	sbci	r31, 0xFF	; 255
    62f0:	80 81       	ld	r24, Z
    62f2:	91 81       	ldd	r25, Z+1	; 0x01
    62f4:	8d 93       	st	X+, r24
    62f6:	9c 93       	st	X, r25
    62f8:	fe 01       	movw	r30, r28
    62fa:	ed 59       	subi	r30, 0x9D	; 157
    62fc:	ff 4f       	sbci	r31, 0xFF	; 255
    62fe:	80 81       	ld	r24, Z
    6300:	91 81       	ldd	r25, Z+1	; 0x01
    6302:	01 97       	sbiw	r24, 0x01	; 1
    6304:	f1 f7       	brne	.-4      	; 0x6302 <main+0x468>
    6306:	fe 01       	movw	r30, r28
    6308:	ed 59       	subi	r30, 0x9D	; 157
    630a:	ff 4f       	sbci	r31, 0xFF	; 255
    630c:	91 83       	std	Z+1, r25	; 0x01
    630e:	80 83       	st	Z, r24
					_delay_ms(700);
					LCD_voidClearDisplay();
    6310:	0e 94 38 25 	call	0x4a70	; 0x4a70 <LCD_voidClearDisplay>
    6314:	97 c1       	rjmp	.+814    	; 0x6644 <main+0x7aa>
					break;

				case 'S':  // 3 times wrong
					LCD_voidSetCursorLocation(1, 0); // Line 1, Column 0
    6316:	81 e0       	ldi	r24, 0x01	; 1
    6318:	60 e0       	ldi	r22, 0x00	; 0
    631a:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <LCD_voidSetCursorLocation>
					LCD_voidwriteString((u8*) "No more trials");
    631e:	8e e7       	ldi	r24, 0x7E	; 126
    6320:	90 e0       	ldi	r25, 0x00	; 0
    6322:	0e 94 42 25 	call	0x4a84	; 0x4a84 <LCD_voidwriteString>
					UART_voidTransmitString((u8*)": ");
    6326:	8d e8       	ldi	r24, 0x8D	; 141
    6328:	90 e0       	ldi	r25, 0x00	; 0
    632a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <UART_voidTransmitString>
					UART_voidTransmitString((u8*)"Password incorrect for 3 times \n\r");
    632e:	81 ed       	ldi	r24, 0xD1	; 209
    6330:	90 e0       	ldi	r25, 0x00	; 0
    6332:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <UART_voidTransmitString>
					Toggle_led1();	// green led off red led on
    6336:	0e 94 83 2a 	call	0x5506	; 0x5506 <Toggle_led1>
    633a:	fe 01       	movw	r30, r28
    633c:	e1 5a       	subi	r30, 0xA1	; 161
    633e:	ff 4f       	sbci	r31, 0xFF	; 255
    6340:	80 e0       	ldi	r24, 0x00	; 0
    6342:	90 e0       	ldi	r25, 0x00	; 0
    6344:	af e2       	ldi	r26, 0x2F	; 47
    6346:	b4 e4       	ldi	r27, 0x44	; 68
    6348:	80 83       	st	Z, r24
    634a:	91 83       	std	Z+1, r25	; 0x01
    634c:	a2 83       	std	Z+2, r26	; 0x02
    634e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6350:	8e 01       	movw	r16, r28
    6352:	05 5a       	subi	r16, 0xA5	; 165
    6354:	1f 4f       	sbci	r17, 0xFF	; 255
    6356:	fe 01       	movw	r30, r28
    6358:	e1 5a       	subi	r30, 0xA1	; 161
    635a:	ff 4f       	sbci	r31, 0xFF	; 255
    635c:	60 81       	ld	r22, Z
    635e:	71 81       	ldd	r23, Z+1	; 0x01
    6360:	82 81       	ldd	r24, Z+2	; 0x02
    6362:	93 81       	ldd	r25, Z+3	; 0x03
    6364:	20 e0       	ldi	r18, 0x00	; 0
    6366:	30 e0       	ldi	r19, 0x00	; 0
    6368:	4a ef       	ldi	r20, 0xFA	; 250
    636a:	54 e4       	ldi	r21, 0x44	; 68
    636c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6370:	dc 01       	movw	r26, r24
    6372:	cb 01       	movw	r24, r22
    6374:	f8 01       	movw	r30, r16
    6376:	80 83       	st	Z, r24
    6378:	91 83       	std	Z+1, r25	; 0x01
    637a:	a2 83       	std	Z+2, r26	; 0x02
    637c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    637e:	fe 01       	movw	r30, r28
    6380:	e5 5a       	subi	r30, 0xA5	; 165
    6382:	ff 4f       	sbci	r31, 0xFF	; 255
    6384:	60 81       	ld	r22, Z
    6386:	71 81       	ldd	r23, Z+1	; 0x01
    6388:	82 81       	ldd	r24, Z+2	; 0x02
    638a:	93 81       	ldd	r25, Z+3	; 0x03
    638c:	20 e0       	ldi	r18, 0x00	; 0
    638e:	30 e0       	ldi	r19, 0x00	; 0
    6390:	40 e8       	ldi	r20, 0x80	; 128
    6392:	5f e3       	ldi	r21, 0x3F	; 63
    6394:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6398:	88 23       	and	r24, r24
    639a:	44 f4       	brge	.+16     	; 0x63ac <main+0x512>
		__ticks = 1;
    639c:	fe 01       	movw	r30, r28
    639e:	e7 5a       	subi	r30, 0xA7	; 167
    63a0:	ff 4f       	sbci	r31, 0xFF	; 255
    63a2:	81 e0       	ldi	r24, 0x01	; 1
    63a4:	90 e0       	ldi	r25, 0x00	; 0
    63a6:	91 83       	std	Z+1, r25	; 0x01
    63a8:	80 83       	st	Z, r24
    63aa:	64 c0       	rjmp	.+200    	; 0x6474 <main+0x5da>
	else if (__tmp > 65535)
    63ac:	fe 01       	movw	r30, r28
    63ae:	e5 5a       	subi	r30, 0xA5	; 165
    63b0:	ff 4f       	sbci	r31, 0xFF	; 255
    63b2:	60 81       	ld	r22, Z
    63b4:	71 81       	ldd	r23, Z+1	; 0x01
    63b6:	82 81       	ldd	r24, Z+2	; 0x02
    63b8:	93 81       	ldd	r25, Z+3	; 0x03
    63ba:	20 e0       	ldi	r18, 0x00	; 0
    63bc:	3f ef       	ldi	r19, 0xFF	; 255
    63be:	4f e7       	ldi	r20, 0x7F	; 127
    63c0:	57 e4       	ldi	r21, 0x47	; 71
    63c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    63c6:	18 16       	cp	r1, r24
    63c8:	0c f0       	brlt	.+2      	; 0x63cc <main+0x532>
    63ca:	43 c0       	rjmp	.+134    	; 0x6452 <main+0x5b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    63cc:	fe 01       	movw	r30, r28
    63ce:	e1 5a       	subi	r30, 0xA1	; 161
    63d0:	ff 4f       	sbci	r31, 0xFF	; 255
    63d2:	60 81       	ld	r22, Z
    63d4:	71 81       	ldd	r23, Z+1	; 0x01
    63d6:	82 81       	ldd	r24, Z+2	; 0x02
    63d8:	93 81       	ldd	r25, Z+3	; 0x03
    63da:	20 e0       	ldi	r18, 0x00	; 0
    63dc:	30 e0       	ldi	r19, 0x00	; 0
    63de:	40 e2       	ldi	r20, 0x20	; 32
    63e0:	51 e4       	ldi	r21, 0x41	; 65
    63e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63e6:	dc 01       	movw	r26, r24
    63e8:	cb 01       	movw	r24, r22
    63ea:	8e 01       	movw	r16, r28
    63ec:	07 5a       	subi	r16, 0xA7	; 167
    63ee:	1f 4f       	sbci	r17, 0xFF	; 255
    63f0:	bc 01       	movw	r22, r24
    63f2:	cd 01       	movw	r24, r26
    63f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63f8:	dc 01       	movw	r26, r24
    63fa:	cb 01       	movw	r24, r22
    63fc:	f8 01       	movw	r30, r16
    63fe:	91 83       	std	Z+1, r25	; 0x01
    6400:	80 83       	st	Z, r24
    6402:	1f c0       	rjmp	.+62     	; 0x6442 <main+0x5a8>
    6404:	fe 01       	movw	r30, r28
    6406:	e9 5a       	subi	r30, 0xA9	; 169
    6408:	ff 4f       	sbci	r31, 0xFF	; 255
    640a:	88 ec       	ldi	r24, 0xC8	; 200
    640c:	90 e0       	ldi	r25, 0x00	; 0
    640e:	91 83       	std	Z+1, r25	; 0x01
    6410:	80 83       	st	Z, r24
    6412:	fe 01       	movw	r30, r28
    6414:	e9 5a       	subi	r30, 0xA9	; 169
    6416:	ff 4f       	sbci	r31, 0xFF	; 255
    6418:	80 81       	ld	r24, Z
    641a:	91 81       	ldd	r25, Z+1	; 0x01
    641c:	01 97       	sbiw	r24, 0x01	; 1
    641e:	f1 f7       	brne	.-4      	; 0x641c <main+0x582>
    6420:	fe 01       	movw	r30, r28
    6422:	e9 5a       	subi	r30, 0xA9	; 169
    6424:	ff 4f       	sbci	r31, 0xFF	; 255
    6426:	91 83       	std	Z+1, r25	; 0x01
    6428:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    642a:	de 01       	movw	r26, r28
    642c:	a7 5a       	subi	r26, 0xA7	; 167
    642e:	bf 4f       	sbci	r27, 0xFF	; 255
    6430:	fe 01       	movw	r30, r28
    6432:	e7 5a       	subi	r30, 0xA7	; 167
    6434:	ff 4f       	sbci	r31, 0xFF	; 255
    6436:	80 81       	ld	r24, Z
    6438:	91 81       	ldd	r25, Z+1	; 0x01
    643a:	01 97       	sbiw	r24, 0x01	; 1
    643c:	11 96       	adiw	r26, 0x01	; 1
    643e:	9c 93       	st	X, r25
    6440:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6442:	fe 01       	movw	r30, r28
    6444:	e7 5a       	subi	r30, 0xA7	; 167
    6446:	ff 4f       	sbci	r31, 0xFF	; 255
    6448:	80 81       	ld	r24, Z
    644a:	91 81       	ldd	r25, Z+1	; 0x01
    644c:	00 97       	sbiw	r24, 0x00	; 0
    644e:	d1 f6       	brne	.-76     	; 0x6404 <main+0x56a>
    6450:	27 c0       	rjmp	.+78     	; 0x64a0 <main+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6452:	8e 01       	movw	r16, r28
    6454:	07 5a       	subi	r16, 0xA7	; 167
    6456:	1f 4f       	sbci	r17, 0xFF	; 255
    6458:	fe 01       	movw	r30, r28
    645a:	e5 5a       	subi	r30, 0xA5	; 165
    645c:	ff 4f       	sbci	r31, 0xFF	; 255
    645e:	60 81       	ld	r22, Z
    6460:	71 81       	ldd	r23, Z+1	; 0x01
    6462:	82 81       	ldd	r24, Z+2	; 0x02
    6464:	93 81       	ldd	r25, Z+3	; 0x03
    6466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    646a:	dc 01       	movw	r26, r24
    646c:	cb 01       	movw	r24, r22
    646e:	f8 01       	movw	r30, r16
    6470:	91 83       	std	Z+1, r25	; 0x01
    6472:	80 83       	st	Z, r24
    6474:	de 01       	movw	r26, r28
    6476:	ab 5a       	subi	r26, 0xAB	; 171
    6478:	bf 4f       	sbci	r27, 0xFF	; 255
    647a:	fe 01       	movw	r30, r28
    647c:	e7 5a       	subi	r30, 0xA7	; 167
    647e:	ff 4f       	sbci	r31, 0xFF	; 255
    6480:	80 81       	ld	r24, Z
    6482:	91 81       	ldd	r25, Z+1	; 0x01
    6484:	8d 93       	st	X+, r24
    6486:	9c 93       	st	X, r25
    6488:	fe 01       	movw	r30, r28
    648a:	eb 5a       	subi	r30, 0xAB	; 171
    648c:	ff 4f       	sbci	r31, 0xFF	; 255
    648e:	80 81       	ld	r24, Z
    6490:	91 81       	ldd	r25, Z+1	; 0x01
    6492:	01 97       	sbiw	r24, 0x01	; 1
    6494:	f1 f7       	brne	.-4      	; 0x6492 <main+0x5f8>
    6496:	fe 01       	movw	r30, r28
    6498:	eb 5a       	subi	r30, 0xAB	; 171
    649a:	ff 4f       	sbci	r31, 0xFF	; 255
    649c:	91 83       	std	Z+1, r25	; 0x01
    649e:	80 83       	st	Z, r24
					_delay_ms(700);
					LCD_voidClearDisplay();
    64a0:	0e 94 38 25 	call	0x4a70	; 0x4a70 <LCD_voidClearDisplay>
					DIO_voidSetPinsValue(DIOA,DIO_PIN7,DIO_LOW);
    64a4:	89 e3       	ldi	r24, 0x39	; 57
    64a6:	90 e0       	ldi	r25, 0x00	; 0
    64a8:	60 e8       	ldi	r22, 0x80	; 128
    64aa:	40 e0       	ldi	r20, 0x00	; 0
    64ac:	0e 94 ed 1a 	call	0x35da	; 0x35da <DIO_voidSetPinsValue>
					Red_blink();
    64b0:	0e 94 a9 2a 	call	0x5552	; 0x5552 <Red_blink>
    64b4:	c7 c0       	rjmp	.+398    	; 0x6644 <main+0x7aa>

					break;

				case 'W':
					LCD_voidSetCursorLocation(1, 0); // Line 1, Column 0
    64b6:	81 e0       	ldi	r24, 0x01	; 1
    64b8:	60 e0       	ldi	r22, 0x00	; 0
    64ba:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <LCD_voidSetCursorLocation>
					LCD_voidwriteString((u8*) "Wrong Password!");
    64be:	8e e6       	ldi	r24, 0x6E	; 110
    64c0:	90 e0       	ldi	r25, 0x00	; 0
    64c2:	0e 94 42 25 	call	0x4a84	; 0x4a84 <LCD_voidwriteString>
					UART_voidTransmitString((u8*)": ");
    64c6:	8d e8       	ldi	r24, 0x8D	; 141
    64c8:	90 e0       	ldi	r25, 0x00	; 0
    64ca:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <UART_voidTransmitString>
					UART_voidTransmitString((u8*)"Password incorrect \n\r");
    64ce:	83 ef       	ldi	r24, 0xF3	; 243
    64d0:	90 e0       	ldi	r25, 0x00	; 0
    64d2:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <UART_voidTransmitString>
    64d6:	fe 01       	movw	r30, r28
    64d8:	ef 5a       	subi	r30, 0xAF	; 175
    64da:	ff 4f       	sbci	r31, 0xFF	; 255
    64dc:	80 e0       	ldi	r24, 0x00	; 0
    64de:	90 e0       	ldi	r25, 0x00	; 0
    64e0:	af e2       	ldi	r26, 0x2F	; 47
    64e2:	b4 e4       	ldi	r27, 0x44	; 68
    64e4:	80 83       	st	Z, r24
    64e6:	91 83       	std	Z+1, r25	; 0x01
    64e8:	a2 83       	std	Z+2, r26	; 0x02
    64ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64ec:	8e 01       	movw	r16, r28
    64ee:	03 5b       	subi	r16, 0xB3	; 179
    64f0:	1f 4f       	sbci	r17, 0xFF	; 255
    64f2:	fe 01       	movw	r30, r28
    64f4:	ef 5a       	subi	r30, 0xAF	; 175
    64f6:	ff 4f       	sbci	r31, 0xFF	; 255
    64f8:	60 81       	ld	r22, Z
    64fa:	71 81       	ldd	r23, Z+1	; 0x01
    64fc:	82 81       	ldd	r24, Z+2	; 0x02
    64fe:	93 81       	ldd	r25, Z+3	; 0x03
    6500:	20 e0       	ldi	r18, 0x00	; 0
    6502:	30 e0       	ldi	r19, 0x00	; 0
    6504:	4a ef       	ldi	r20, 0xFA	; 250
    6506:	54 e4       	ldi	r21, 0x44	; 68
    6508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    650c:	dc 01       	movw	r26, r24
    650e:	cb 01       	movw	r24, r22
    6510:	f8 01       	movw	r30, r16
    6512:	80 83       	st	Z, r24
    6514:	91 83       	std	Z+1, r25	; 0x01
    6516:	a2 83       	std	Z+2, r26	; 0x02
    6518:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    651a:	fe 01       	movw	r30, r28
    651c:	e3 5b       	subi	r30, 0xB3	; 179
    651e:	ff 4f       	sbci	r31, 0xFF	; 255
    6520:	60 81       	ld	r22, Z
    6522:	71 81       	ldd	r23, Z+1	; 0x01
    6524:	82 81       	ldd	r24, Z+2	; 0x02
    6526:	93 81       	ldd	r25, Z+3	; 0x03
    6528:	20 e0       	ldi	r18, 0x00	; 0
    652a:	30 e0       	ldi	r19, 0x00	; 0
    652c:	40 e8       	ldi	r20, 0x80	; 128
    652e:	5f e3       	ldi	r21, 0x3F	; 63
    6530:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6534:	88 23       	and	r24, r24
    6536:	44 f4       	brge	.+16     	; 0x6548 <main+0x6ae>
		__ticks = 1;
    6538:	fe 01       	movw	r30, r28
    653a:	e5 5b       	subi	r30, 0xB5	; 181
    653c:	ff 4f       	sbci	r31, 0xFF	; 255
    653e:	81 e0       	ldi	r24, 0x01	; 1
    6540:	90 e0       	ldi	r25, 0x00	; 0
    6542:	91 83       	std	Z+1, r25	; 0x01
    6544:	80 83       	st	Z, r24
    6546:	64 c0       	rjmp	.+200    	; 0x6610 <main+0x776>
	else if (__tmp > 65535)
    6548:	fe 01       	movw	r30, r28
    654a:	e3 5b       	subi	r30, 0xB3	; 179
    654c:	ff 4f       	sbci	r31, 0xFF	; 255
    654e:	60 81       	ld	r22, Z
    6550:	71 81       	ldd	r23, Z+1	; 0x01
    6552:	82 81       	ldd	r24, Z+2	; 0x02
    6554:	93 81       	ldd	r25, Z+3	; 0x03
    6556:	20 e0       	ldi	r18, 0x00	; 0
    6558:	3f ef       	ldi	r19, 0xFF	; 255
    655a:	4f e7       	ldi	r20, 0x7F	; 127
    655c:	57 e4       	ldi	r21, 0x47	; 71
    655e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6562:	18 16       	cp	r1, r24
    6564:	0c f0       	brlt	.+2      	; 0x6568 <main+0x6ce>
    6566:	43 c0       	rjmp	.+134    	; 0x65ee <main+0x754>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6568:	fe 01       	movw	r30, r28
    656a:	ef 5a       	subi	r30, 0xAF	; 175
    656c:	ff 4f       	sbci	r31, 0xFF	; 255
    656e:	60 81       	ld	r22, Z
    6570:	71 81       	ldd	r23, Z+1	; 0x01
    6572:	82 81       	ldd	r24, Z+2	; 0x02
    6574:	93 81       	ldd	r25, Z+3	; 0x03
    6576:	20 e0       	ldi	r18, 0x00	; 0
    6578:	30 e0       	ldi	r19, 0x00	; 0
    657a:	40 e2       	ldi	r20, 0x20	; 32
    657c:	51 e4       	ldi	r21, 0x41	; 65
    657e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6582:	dc 01       	movw	r26, r24
    6584:	cb 01       	movw	r24, r22
    6586:	8e 01       	movw	r16, r28
    6588:	05 5b       	subi	r16, 0xB5	; 181
    658a:	1f 4f       	sbci	r17, 0xFF	; 255
    658c:	bc 01       	movw	r22, r24
    658e:	cd 01       	movw	r24, r26
    6590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6594:	dc 01       	movw	r26, r24
    6596:	cb 01       	movw	r24, r22
    6598:	f8 01       	movw	r30, r16
    659a:	91 83       	std	Z+1, r25	; 0x01
    659c:	80 83       	st	Z, r24
    659e:	1f c0       	rjmp	.+62     	; 0x65de <main+0x744>
    65a0:	fe 01       	movw	r30, r28
    65a2:	e7 5b       	subi	r30, 0xB7	; 183
    65a4:	ff 4f       	sbci	r31, 0xFF	; 255
    65a6:	88 ec       	ldi	r24, 0xC8	; 200
    65a8:	90 e0       	ldi	r25, 0x00	; 0
    65aa:	91 83       	std	Z+1, r25	; 0x01
    65ac:	80 83       	st	Z, r24
    65ae:	fe 01       	movw	r30, r28
    65b0:	e7 5b       	subi	r30, 0xB7	; 183
    65b2:	ff 4f       	sbci	r31, 0xFF	; 255
    65b4:	80 81       	ld	r24, Z
    65b6:	91 81       	ldd	r25, Z+1	; 0x01
    65b8:	01 97       	sbiw	r24, 0x01	; 1
    65ba:	f1 f7       	brne	.-4      	; 0x65b8 <main+0x71e>
    65bc:	fe 01       	movw	r30, r28
    65be:	e7 5b       	subi	r30, 0xB7	; 183
    65c0:	ff 4f       	sbci	r31, 0xFF	; 255
    65c2:	91 83       	std	Z+1, r25	; 0x01
    65c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    65c6:	de 01       	movw	r26, r28
    65c8:	a5 5b       	subi	r26, 0xB5	; 181
    65ca:	bf 4f       	sbci	r27, 0xFF	; 255
    65cc:	fe 01       	movw	r30, r28
    65ce:	e5 5b       	subi	r30, 0xB5	; 181
    65d0:	ff 4f       	sbci	r31, 0xFF	; 255
    65d2:	80 81       	ld	r24, Z
    65d4:	91 81       	ldd	r25, Z+1	; 0x01
    65d6:	01 97       	sbiw	r24, 0x01	; 1
    65d8:	11 96       	adiw	r26, 0x01	; 1
    65da:	9c 93       	st	X, r25
    65dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65de:	fe 01       	movw	r30, r28
    65e0:	e5 5b       	subi	r30, 0xB5	; 181
    65e2:	ff 4f       	sbci	r31, 0xFF	; 255
    65e4:	80 81       	ld	r24, Z
    65e6:	91 81       	ldd	r25, Z+1	; 0x01
    65e8:	00 97       	sbiw	r24, 0x00	; 0
    65ea:	d1 f6       	brne	.-76     	; 0x65a0 <main+0x706>
    65ec:	27 c0       	rjmp	.+78     	; 0x663c <main+0x7a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65ee:	8e 01       	movw	r16, r28
    65f0:	05 5b       	subi	r16, 0xB5	; 181
    65f2:	1f 4f       	sbci	r17, 0xFF	; 255
    65f4:	fe 01       	movw	r30, r28
    65f6:	e3 5b       	subi	r30, 0xB3	; 179
    65f8:	ff 4f       	sbci	r31, 0xFF	; 255
    65fa:	60 81       	ld	r22, Z
    65fc:	71 81       	ldd	r23, Z+1	; 0x01
    65fe:	82 81       	ldd	r24, Z+2	; 0x02
    6600:	93 81       	ldd	r25, Z+3	; 0x03
    6602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6606:	dc 01       	movw	r26, r24
    6608:	cb 01       	movw	r24, r22
    660a:	f8 01       	movw	r30, r16
    660c:	91 83       	std	Z+1, r25	; 0x01
    660e:	80 83       	st	Z, r24
    6610:	de 01       	movw	r26, r28
    6612:	a9 5b       	subi	r26, 0xB9	; 185
    6614:	bf 4f       	sbci	r27, 0xFF	; 255
    6616:	fe 01       	movw	r30, r28
    6618:	e5 5b       	subi	r30, 0xB5	; 181
    661a:	ff 4f       	sbci	r31, 0xFF	; 255
    661c:	80 81       	ld	r24, Z
    661e:	91 81       	ldd	r25, Z+1	; 0x01
    6620:	8d 93       	st	X+, r24
    6622:	9c 93       	st	X, r25
    6624:	fe 01       	movw	r30, r28
    6626:	e9 5b       	subi	r30, 0xB9	; 185
    6628:	ff 4f       	sbci	r31, 0xFF	; 255
    662a:	80 81       	ld	r24, Z
    662c:	91 81       	ldd	r25, Z+1	; 0x01
    662e:	01 97       	sbiw	r24, 0x01	; 1
    6630:	f1 f7       	brne	.-4      	; 0x662e <main+0x794>
    6632:	fe 01       	movw	r30, r28
    6634:	e9 5b       	subi	r30, 0xB9	; 185
    6636:	ff 4f       	sbci	r31, 0xFF	; 255
    6638:	91 83       	std	Z+1, r25	; 0x01
    663a:	80 83       	st	Z, r24
					_delay_ms(700);
					LCD_voidClearDisplay();
    663c:	0e 94 38 25 	call	0x4a70	; 0x4a70 <LCD_voidClearDisplay>
					Toggle_led1();	// green led off red led on
    6640:	0e 94 83 2a 	call	0x5506	; 0x5506 <Toggle_led1>

				default:
					break;
				}

				if (UART_character >= '0' && UART_character <= '9') {
    6644:	80 91 79 02 	lds	r24, 0x0279
    6648:	80 33       	cpi	r24, 0x30	; 48
    664a:	08 f4       	brcc	.+2      	; 0x664e <main+0x7b4>
    664c:	b1 c0       	rjmp	.+354    	; 0x67b0 <main+0x916>
    664e:	80 91 79 02 	lds	r24, 0x0279
    6652:	8a 33       	cpi	r24, 0x3A	; 58
    6654:	08 f0       	brcs	.+2      	; 0x6658 <main+0x7be>
    6656:	ac c0       	rjmp	.+344    	; 0x67b0 <main+0x916>

					user_password_web = user_password_web * 10 + (UART_character - '0');
    6658:	80 91 7d 02 	lds	r24, 0x027D
    665c:	90 91 7e 02 	lds	r25, 0x027E
    6660:	9c 01       	movw	r18, r24
    6662:	22 0f       	add	r18, r18
    6664:	33 1f       	adc	r19, r19
    6666:	c9 01       	movw	r24, r18
    6668:	88 0f       	add	r24, r24
    666a:	99 1f       	adc	r25, r25
    666c:	88 0f       	add	r24, r24
    666e:	99 1f       	adc	r25, r25
    6670:	28 0f       	add	r18, r24
    6672:	39 1f       	adc	r19, r25
    6674:	80 91 79 02 	lds	r24, 0x0279
    6678:	88 2f       	mov	r24, r24
    667a:	90 e0       	ldi	r25, 0x00	; 0
    667c:	82 0f       	add	r24, r18
    667e:	93 1f       	adc	r25, r19
    6680:	c0 97       	sbiw	r24, 0x30	; 48
    6682:	90 93 7e 02 	sts	0x027E, r25
    6686:	80 93 7d 02 	sts	0x027D, r24
					LCD_voidClearDisplay();
    668a:	0e 94 38 25 	call	0x4a70	; 0x4a70 <LCD_voidClearDisplay>
					LCD_voidWriteNumber(user_password_web);
    668e:	80 91 7d 02 	lds	r24, 0x027D
    6692:	90 91 7e 02 	lds	r25, 0x027E
    6696:	cc 01       	movw	r24, r24
    6698:	a0 e0       	ldi	r26, 0x00	; 0
    669a:	b0 e0       	ldi	r27, 0x00	; 0
    669c:	bc 01       	movw	r22, r24
    669e:	cd 01       	movw	r24, r26
    66a0:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <LCD_voidWriteNumber>
    66a4:	fe 01       	movw	r30, r28
    66a6:	ed 5b       	subi	r30, 0xBD	; 189
    66a8:	ff 4f       	sbci	r31, 0xFF	; 255
    66aa:	80 e0       	ldi	r24, 0x00	; 0
    66ac:	90 e0       	ldi	r25, 0x00	; 0
    66ae:	aa ef       	ldi	r26, 0xFA	; 250
    66b0:	b3 e4       	ldi	r27, 0x43	; 67
    66b2:	80 83       	st	Z, r24
    66b4:	91 83       	std	Z+1, r25	; 0x01
    66b6:	a2 83       	std	Z+2, r26	; 0x02
    66b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66ba:	8e 01       	movw	r16, r28
    66bc:	01 5c       	subi	r16, 0xC1	; 193
    66be:	1f 4f       	sbci	r17, 0xFF	; 255
    66c0:	fe 01       	movw	r30, r28
    66c2:	ed 5b       	subi	r30, 0xBD	; 189
    66c4:	ff 4f       	sbci	r31, 0xFF	; 255
    66c6:	60 81       	ld	r22, Z
    66c8:	71 81       	ldd	r23, Z+1	; 0x01
    66ca:	82 81       	ldd	r24, Z+2	; 0x02
    66cc:	93 81       	ldd	r25, Z+3	; 0x03
    66ce:	20 e0       	ldi	r18, 0x00	; 0
    66d0:	30 e0       	ldi	r19, 0x00	; 0
    66d2:	4a ef       	ldi	r20, 0xFA	; 250
    66d4:	54 e4       	ldi	r21, 0x44	; 68
    66d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66da:	dc 01       	movw	r26, r24
    66dc:	cb 01       	movw	r24, r22
    66de:	f8 01       	movw	r30, r16
    66e0:	80 83       	st	Z, r24
    66e2:	91 83       	std	Z+1, r25	; 0x01
    66e4:	a2 83       	std	Z+2, r26	; 0x02
    66e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    66e8:	fe 01       	movw	r30, r28
    66ea:	ff 96       	adiw	r30, 0x3f	; 63
    66ec:	60 81       	ld	r22, Z
    66ee:	71 81       	ldd	r23, Z+1	; 0x01
    66f0:	82 81       	ldd	r24, Z+2	; 0x02
    66f2:	93 81       	ldd	r25, Z+3	; 0x03
    66f4:	20 e0       	ldi	r18, 0x00	; 0
    66f6:	30 e0       	ldi	r19, 0x00	; 0
    66f8:	40 e8       	ldi	r20, 0x80	; 128
    66fa:	5f e3       	ldi	r21, 0x3F	; 63
    66fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6700:	88 23       	and	r24, r24
    6702:	2c f4       	brge	.+10     	; 0x670e <main+0x874>
		__ticks = 1;
    6704:	81 e0       	ldi	r24, 0x01	; 1
    6706:	90 e0       	ldi	r25, 0x00	; 0
    6708:	9e af       	std	Y+62, r25	; 0x3e
    670a:	8d af       	std	Y+61, r24	; 0x3d
    670c:	46 c0       	rjmp	.+140    	; 0x679a <main+0x900>
	else if (__tmp > 65535)
    670e:	fe 01       	movw	r30, r28
    6710:	ff 96       	adiw	r30, 0x3f	; 63
    6712:	60 81       	ld	r22, Z
    6714:	71 81       	ldd	r23, Z+1	; 0x01
    6716:	82 81       	ldd	r24, Z+2	; 0x02
    6718:	93 81       	ldd	r25, Z+3	; 0x03
    671a:	20 e0       	ldi	r18, 0x00	; 0
    671c:	3f ef       	ldi	r19, 0xFF	; 255
    671e:	4f e7       	ldi	r20, 0x7F	; 127
    6720:	57 e4       	ldi	r21, 0x47	; 71
    6722:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6726:	18 16       	cp	r1, r24
    6728:	64 f5       	brge	.+88     	; 0x6782 <main+0x8e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    672a:	fe 01       	movw	r30, r28
    672c:	ed 5b       	subi	r30, 0xBD	; 189
    672e:	ff 4f       	sbci	r31, 0xFF	; 255
    6730:	60 81       	ld	r22, Z
    6732:	71 81       	ldd	r23, Z+1	; 0x01
    6734:	82 81       	ldd	r24, Z+2	; 0x02
    6736:	93 81       	ldd	r25, Z+3	; 0x03
    6738:	20 e0       	ldi	r18, 0x00	; 0
    673a:	30 e0       	ldi	r19, 0x00	; 0
    673c:	40 e2       	ldi	r20, 0x20	; 32
    673e:	51 e4       	ldi	r21, 0x41	; 65
    6740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6744:	dc 01       	movw	r26, r24
    6746:	cb 01       	movw	r24, r22
    6748:	bc 01       	movw	r22, r24
    674a:	cd 01       	movw	r24, r26
    674c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6750:	dc 01       	movw	r26, r24
    6752:	cb 01       	movw	r24, r22
    6754:	9e af       	std	Y+62, r25	; 0x3e
    6756:	8d af       	std	Y+61, r24	; 0x3d
    6758:	0f c0       	rjmp	.+30     	; 0x6778 <main+0x8de>
    675a:	88 ec       	ldi	r24, 0xC8	; 200
    675c:	90 e0       	ldi	r25, 0x00	; 0
    675e:	9c af       	std	Y+60, r25	; 0x3c
    6760:	8b af       	std	Y+59, r24	; 0x3b
    6762:	8b ad       	ldd	r24, Y+59	; 0x3b
    6764:	9c ad       	ldd	r25, Y+60	; 0x3c
    6766:	01 97       	sbiw	r24, 0x01	; 1
    6768:	f1 f7       	brne	.-4      	; 0x6766 <main+0x8cc>
    676a:	9c af       	std	Y+60, r25	; 0x3c
    676c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    676e:	8d ad       	ldd	r24, Y+61	; 0x3d
    6770:	9e ad       	ldd	r25, Y+62	; 0x3e
    6772:	01 97       	sbiw	r24, 0x01	; 1
    6774:	9e af       	std	Y+62, r25	; 0x3e
    6776:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6778:	8d ad       	ldd	r24, Y+61	; 0x3d
    677a:	9e ad       	ldd	r25, Y+62	; 0x3e
    677c:	00 97       	sbiw	r24, 0x00	; 0
    677e:	69 f7       	brne	.-38     	; 0x675a <main+0x8c0>
    6780:	48 c2       	rjmp	.+1168   	; 0x6c12 <main+0xd78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6782:	fe 01       	movw	r30, r28
    6784:	ff 96       	adiw	r30, 0x3f	; 63
    6786:	60 81       	ld	r22, Z
    6788:	71 81       	ldd	r23, Z+1	; 0x01
    678a:	82 81       	ldd	r24, Z+2	; 0x02
    678c:	93 81       	ldd	r25, Z+3	; 0x03
    678e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6792:	dc 01       	movw	r26, r24
    6794:	cb 01       	movw	r24, r22
    6796:	9e af       	std	Y+62, r25	; 0x3e
    6798:	8d af       	std	Y+61, r24	; 0x3d
    679a:	8d ad       	ldd	r24, Y+61	; 0x3d
    679c:	9e ad       	ldd	r25, Y+62	; 0x3e
    679e:	9a af       	std	Y+58, r25	; 0x3a
    67a0:	89 af       	std	Y+57, r24	; 0x39
    67a2:	89 ad       	ldd	r24, Y+57	; 0x39
    67a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    67a6:	01 97       	sbiw	r24, 0x01	; 1
    67a8:	f1 f7       	brne	.-4      	; 0x67a6 <main+0x90c>
    67aa:	9a af       	std	Y+58, r25	; 0x3a
    67ac:	89 af       	std	Y+57, r24	; 0x39
    67ae:	31 c2       	rjmp	.+1122   	; 0x6c12 <main+0xd78>
					_delay_ms(500);

				}
				else if(UART_character == 0x0D){        // we will see here if the enter is pressed
    67b0:	80 91 79 02 	lds	r24, 0x0279
    67b4:	8d 30       	cpi	r24, 0x0D	; 13
    67b6:	09 f0       	breq	.+2      	; 0x67ba <main+0x920>
    67b8:	2c c2       	rjmp	.+1112   	; 0x6c12 <main+0xd78>
					LCD_voidwriteString((u8*) UART_character);
    67ba:	80 91 79 02 	lds	r24, 0x0279
    67be:	88 2f       	mov	r24, r24
    67c0:	90 e0       	ldi	r25, 0x00	; 0
    67c2:	0e 94 42 25 	call	0x4a84	; 0x4a84 <LCD_voidwriteString>
					UART_voidTransmitString((u8*)"\n\r");
    67c6:	89 e0       	ldi	r24, 0x09	; 9
    67c8:	91 e0       	ldi	r25, 0x01	; 1
    67ca:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <UART_voidTransmitString>
					if(correct_password == user_password_web){
    67ce:	20 91 14 02 	lds	r18, 0x0214
    67d2:	30 91 15 02 	lds	r19, 0x0215
    67d6:	80 91 7d 02 	lds	r24, 0x027D
    67da:	90 91 7e 02 	lds	r25, 0x027E
    67de:	28 17       	cp	r18, r24
    67e0:	39 07       	cpc	r19, r25
    67e2:	09 f0       	breq	.+2      	; 0x67e6 <main+0x94c>
    67e4:	ff c0       	rjmp	.+510    	; 0x69e4 <main+0xb4a>
						LCD_voidSetCursorLocation(1, 0); // Line 1, Column 0
    67e6:	81 e0       	ldi	r24, 0x01	; 1
    67e8:	60 e0       	ldi	r22, 0x00	; 0
    67ea:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <LCD_voidSetCursorLocation>
						LCD_voidwriteString((u8*) "Welcome Home!");
    67ee:	80 e6       	ldi	r24, 0x60	; 96
    67f0:	90 e0       	ldi	r25, 0x00	; 0
    67f2:	0e 94 42 25 	call	0x4a84	; 0x4a84 <LCD_voidwriteString>

						Toggle_led2();	// green led on red led off
    67f6:	0e 94 96 2a 	call	0x552c	; 0x552c <Toggle_led2>
						Servo_voidMoveToLocation((u8)90);	// open lock
    67fa:	8a e5       	ldi	r24, 0x5A	; 90
    67fc:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <Servo_voidMoveToLocation>
    6800:	80 e0       	ldi	r24, 0x00	; 0
    6802:	90 e0       	ldi	r25, 0x00	; 0
    6804:	aa ef       	ldi	r26, 0xFA	; 250
    6806:	b4 e4       	ldi	r27, 0x44	; 68
    6808:	8d ab       	std	Y+53, r24	; 0x35
    680a:	9e ab       	std	Y+54, r25	; 0x36
    680c:	af ab       	std	Y+55, r26	; 0x37
    680e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6810:	6d a9       	ldd	r22, Y+53	; 0x35
    6812:	7e a9       	ldd	r23, Y+54	; 0x36
    6814:	8f a9       	ldd	r24, Y+55	; 0x37
    6816:	98 ad       	ldd	r25, Y+56	; 0x38
    6818:	20 e0       	ldi	r18, 0x00	; 0
    681a:	30 e0       	ldi	r19, 0x00	; 0
    681c:	4a ef       	ldi	r20, 0xFA	; 250
    681e:	54 e4       	ldi	r21, 0x44	; 68
    6820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6824:	dc 01       	movw	r26, r24
    6826:	cb 01       	movw	r24, r22
    6828:	89 ab       	std	Y+49, r24	; 0x31
    682a:	9a ab       	std	Y+50, r25	; 0x32
    682c:	ab ab       	std	Y+51, r26	; 0x33
    682e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6830:	69 a9       	ldd	r22, Y+49	; 0x31
    6832:	7a a9       	ldd	r23, Y+50	; 0x32
    6834:	8b a9       	ldd	r24, Y+51	; 0x33
    6836:	9c a9       	ldd	r25, Y+52	; 0x34
    6838:	20 e0       	ldi	r18, 0x00	; 0
    683a:	30 e0       	ldi	r19, 0x00	; 0
    683c:	40 e8       	ldi	r20, 0x80	; 128
    683e:	5f e3       	ldi	r21, 0x3F	; 63
    6840:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6844:	88 23       	and	r24, r24
    6846:	2c f4       	brge	.+10     	; 0x6852 <main+0x9b8>
		__ticks = 1;
    6848:	81 e0       	ldi	r24, 0x01	; 1
    684a:	90 e0       	ldi	r25, 0x00	; 0
    684c:	98 ab       	std	Y+48, r25	; 0x30
    684e:	8f a7       	std	Y+47, r24	; 0x2f
    6850:	3f c0       	rjmp	.+126    	; 0x68d0 <main+0xa36>
	else if (__tmp > 65535)
    6852:	69 a9       	ldd	r22, Y+49	; 0x31
    6854:	7a a9       	ldd	r23, Y+50	; 0x32
    6856:	8b a9       	ldd	r24, Y+51	; 0x33
    6858:	9c a9       	ldd	r25, Y+52	; 0x34
    685a:	20 e0       	ldi	r18, 0x00	; 0
    685c:	3f ef       	ldi	r19, 0xFF	; 255
    685e:	4f e7       	ldi	r20, 0x7F	; 127
    6860:	57 e4       	ldi	r21, 0x47	; 71
    6862:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6866:	18 16       	cp	r1, r24
    6868:	4c f5       	brge	.+82     	; 0x68bc <main+0xa22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    686a:	6d a9       	ldd	r22, Y+53	; 0x35
    686c:	7e a9       	ldd	r23, Y+54	; 0x36
    686e:	8f a9       	ldd	r24, Y+55	; 0x37
    6870:	98 ad       	ldd	r25, Y+56	; 0x38
    6872:	20 e0       	ldi	r18, 0x00	; 0
    6874:	30 e0       	ldi	r19, 0x00	; 0
    6876:	40 e2       	ldi	r20, 0x20	; 32
    6878:	51 e4       	ldi	r21, 0x41	; 65
    687a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    687e:	dc 01       	movw	r26, r24
    6880:	cb 01       	movw	r24, r22
    6882:	bc 01       	movw	r22, r24
    6884:	cd 01       	movw	r24, r26
    6886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    688a:	dc 01       	movw	r26, r24
    688c:	cb 01       	movw	r24, r22
    688e:	98 ab       	std	Y+48, r25	; 0x30
    6890:	8f a7       	std	Y+47, r24	; 0x2f
    6892:	0f c0       	rjmp	.+30     	; 0x68b2 <main+0xa18>
    6894:	88 ec       	ldi	r24, 0xC8	; 200
    6896:	90 e0       	ldi	r25, 0x00	; 0
    6898:	9e a7       	std	Y+46, r25	; 0x2e
    689a:	8d a7       	std	Y+45, r24	; 0x2d
    689c:	8d a5       	ldd	r24, Y+45	; 0x2d
    689e:	9e a5       	ldd	r25, Y+46	; 0x2e
    68a0:	01 97       	sbiw	r24, 0x01	; 1
    68a2:	f1 f7       	brne	.-4      	; 0x68a0 <main+0xa06>
    68a4:	9e a7       	std	Y+46, r25	; 0x2e
    68a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    68aa:	98 a9       	ldd	r25, Y+48	; 0x30
    68ac:	01 97       	sbiw	r24, 0x01	; 1
    68ae:	98 ab       	std	Y+48, r25	; 0x30
    68b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    68b4:	98 a9       	ldd	r25, Y+48	; 0x30
    68b6:	00 97       	sbiw	r24, 0x00	; 0
    68b8:	69 f7       	brne	.-38     	; 0x6894 <main+0x9fa>
    68ba:	14 c0       	rjmp	.+40     	; 0x68e4 <main+0xa4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68bc:	69 a9       	ldd	r22, Y+49	; 0x31
    68be:	7a a9       	ldd	r23, Y+50	; 0x32
    68c0:	8b a9       	ldd	r24, Y+51	; 0x33
    68c2:	9c a9       	ldd	r25, Y+52	; 0x34
    68c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68c8:	dc 01       	movw	r26, r24
    68ca:	cb 01       	movw	r24, r22
    68cc:	98 ab       	std	Y+48, r25	; 0x30
    68ce:	8f a7       	std	Y+47, r24	; 0x2f
    68d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    68d2:	98 a9       	ldd	r25, Y+48	; 0x30
    68d4:	9c a7       	std	Y+44, r25	; 0x2c
    68d6:	8b a7       	std	Y+43, r24	; 0x2b
    68d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    68da:	9c a5       	ldd	r25, Y+44	; 0x2c
    68dc:	01 97       	sbiw	r24, 0x01	; 1
    68de:	f1 f7       	brne	.-4      	; 0x68dc <main+0xa42>
    68e0:	9c a7       	std	Y+44, r25	; 0x2c
    68e2:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(2000);
						Servo_voidMoveToLocation((u8)0);
    68e4:	80 e0       	ldi	r24, 0x00	; 0
    68e6:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <Servo_voidMoveToLocation>

						password_repeated_times_web = 0;
    68ea:	10 92 82 02 	sts	0x0282, r1
    68ee:	10 92 81 02 	sts	0x0281, r1
						user_password_web = '\0';
    68f2:	10 92 7e 02 	sts	0x027E, r1
    68f6:	10 92 7d 02 	sts	0x027D, r1
    68fa:	80 e0       	ldi	r24, 0x00	; 0
    68fc:	90 e0       	ldi	r25, 0x00	; 0
    68fe:	af e2       	ldi	r26, 0x2F	; 47
    6900:	b4 e4       	ldi	r27, 0x44	; 68
    6902:	8f a3       	std	Y+39, r24	; 0x27
    6904:	98 a7       	std	Y+40, r25	; 0x28
    6906:	a9 a7       	std	Y+41, r26	; 0x29
    6908:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    690a:	6f a1       	ldd	r22, Y+39	; 0x27
    690c:	78 a5       	ldd	r23, Y+40	; 0x28
    690e:	89 a5       	ldd	r24, Y+41	; 0x29
    6910:	9a a5       	ldd	r25, Y+42	; 0x2a
    6912:	20 e0       	ldi	r18, 0x00	; 0
    6914:	30 e0       	ldi	r19, 0x00	; 0
    6916:	4a ef       	ldi	r20, 0xFA	; 250
    6918:	54 e4       	ldi	r21, 0x44	; 68
    691a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    691e:	dc 01       	movw	r26, r24
    6920:	cb 01       	movw	r24, r22
    6922:	8b a3       	std	Y+35, r24	; 0x23
    6924:	9c a3       	std	Y+36, r25	; 0x24
    6926:	ad a3       	std	Y+37, r26	; 0x25
    6928:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    692a:	6b a1       	ldd	r22, Y+35	; 0x23
    692c:	7c a1       	ldd	r23, Y+36	; 0x24
    692e:	8d a1       	ldd	r24, Y+37	; 0x25
    6930:	9e a1       	ldd	r25, Y+38	; 0x26
    6932:	20 e0       	ldi	r18, 0x00	; 0
    6934:	30 e0       	ldi	r19, 0x00	; 0
    6936:	40 e8       	ldi	r20, 0x80	; 128
    6938:	5f e3       	ldi	r21, 0x3F	; 63
    693a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    693e:	88 23       	and	r24, r24
    6940:	2c f4       	brge	.+10     	; 0x694c <main+0xab2>
		__ticks = 1;
    6942:	81 e0       	ldi	r24, 0x01	; 1
    6944:	90 e0       	ldi	r25, 0x00	; 0
    6946:	9a a3       	std	Y+34, r25	; 0x22
    6948:	89 a3       	std	Y+33, r24	; 0x21
    694a:	3f c0       	rjmp	.+126    	; 0x69ca <main+0xb30>
	else if (__tmp > 65535)
    694c:	6b a1       	ldd	r22, Y+35	; 0x23
    694e:	7c a1       	ldd	r23, Y+36	; 0x24
    6950:	8d a1       	ldd	r24, Y+37	; 0x25
    6952:	9e a1       	ldd	r25, Y+38	; 0x26
    6954:	20 e0       	ldi	r18, 0x00	; 0
    6956:	3f ef       	ldi	r19, 0xFF	; 255
    6958:	4f e7       	ldi	r20, 0x7F	; 127
    695a:	57 e4       	ldi	r21, 0x47	; 71
    695c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6960:	18 16       	cp	r1, r24
    6962:	4c f5       	brge	.+82     	; 0x69b6 <main+0xb1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6964:	6f a1       	ldd	r22, Y+39	; 0x27
    6966:	78 a5       	ldd	r23, Y+40	; 0x28
    6968:	89 a5       	ldd	r24, Y+41	; 0x29
    696a:	9a a5       	ldd	r25, Y+42	; 0x2a
    696c:	20 e0       	ldi	r18, 0x00	; 0
    696e:	30 e0       	ldi	r19, 0x00	; 0
    6970:	40 e2       	ldi	r20, 0x20	; 32
    6972:	51 e4       	ldi	r21, 0x41	; 65
    6974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6978:	dc 01       	movw	r26, r24
    697a:	cb 01       	movw	r24, r22
    697c:	bc 01       	movw	r22, r24
    697e:	cd 01       	movw	r24, r26
    6980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6984:	dc 01       	movw	r26, r24
    6986:	cb 01       	movw	r24, r22
    6988:	9a a3       	std	Y+34, r25	; 0x22
    698a:	89 a3       	std	Y+33, r24	; 0x21
    698c:	0f c0       	rjmp	.+30     	; 0x69ac <main+0xb12>
    698e:	88 ec       	ldi	r24, 0xC8	; 200
    6990:	90 e0       	ldi	r25, 0x00	; 0
    6992:	98 a3       	std	Y+32, r25	; 0x20
    6994:	8f 8f       	std	Y+31, r24	; 0x1f
    6996:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6998:	98 a1       	ldd	r25, Y+32	; 0x20
    699a:	01 97       	sbiw	r24, 0x01	; 1
    699c:	f1 f7       	brne	.-4      	; 0x699a <main+0xb00>
    699e:	98 a3       	std	Y+32, r25	; 0x20
    69a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    69a2:	89 a1       	ldd	r24, Y+33	; 0x21
    69a4:	9a a1       	ldd	r25, Y+34	; 0x22
    69a6:	01 97       	sbiw	r24, 0x01	; 1
    69a8:	9a a3       	std	Y+34, r25	; 0x22
    69aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    69ac:	89 a1       	ldd	r24, Y+33	; 0x21
    69ae:	9a a1       	ldd	r25, Y+34	; 0x22
    69b0:	00 97       	sbiw	r24, 0x00	; 0
    69b2:	69 f7       	brne	.-38     	; 0x698e <main+0xaf4>
    69b4:	14 c0       	rjmp	.+40     	; 0x69de <main+0xb44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    69b6:	6b a1       	ldd	r22, Y+35	; 0x23
    69b8:	7c a1       	ldd	r23, Y+36	; 0x24
    69ba:	8d a1       	ldd	r24, Y+37	; 0x25
    69bc:	9e a1       	ldd	r25, Y+38	; 0x26
    69be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69c2:	dc 01       	movw	r26, r24
    69c4:	cb 01       	movw	r24, r22
    69c6:	9a a3       	std	Y+34, r25	; 0x22
    69c8:	89 a3       	std	Y+33, r24	; 0x21
    69ca:	89 a1       	ldd	r24, Y+33	; 0x21
    69cc:	9a a1       	ldd	r25, Y+34	; 0x22
    69ce:	9e 8f       	std	Y+30, r25	; 0x1e
    69d0:	8d 8f       	std	Y+29, r24	; 0x1d
    69d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    69d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    69d6:	01 97       	sbiw	r24, 0x01	; 1
    69d8:	f1 f7       	brne	.-4      	; 0x69d6 <main+0xb3c>
    69da:	9e 8f       	std	Y+30, r25	; 0x1e
    69dc:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(700);
						LCD_voidClearDisplay();
    69de:	0e 94 38 25 	call	0x4a70	; 0x4a70 <LCD_voidClearDisplay>
    69e2:	a9 ca       	rjmp	.-2734   	; 0x5f36 <main+0x9c>
						break;
					}
					else{

						LCD_voidSetCursorLocation(1, 0); // Line 1, Column 0
    69e4:	81 e0       	ldi	r24, 0x01	; 1
    69e6:	60 e0       	ldi	r22, 0x00	; 0
    69e8:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <LCD_voidSetCursorLocation>
						LCD_voidwriteString((u8*) "Wrong Password!");
    69ec:	8e e6       	ldi	r24, 0x6E	; 110
    69ee:	90 e0       	ldi	r25, 0x00	; 0
    69f0:	0e 94 42 25 	call	0x4a84	; 0x4a84 <LCD_voidwriteString>
						Toggle_led1();	// green led off red led on
    69f4:	0e 94 83 2a 	call	0x5506	; 0x5506 <Toggle_led1>
						user_password_web = '\0';
    69f8:	10 92 7e 02 	sts	0x027E, r1
    69fc:	10 92 7d 02 	sts	0x027D, r1
						password_repeated_times_web++;
    6a00:	80 91 81 02 	lds	r24, 0x0281
    6a04:	90 91 82 02 	lds	r25, 0x0282
    6a08:	01 96       	adiw	r24, 0x01	; 1
    6a0a:	90 93 82 02 	sts	0x0282, r25
    6a0e:	80 93 81 02 	sts	0x0281, r24
						if(password_repeated_times_web == 3){
    6a12:	80 91 81 02 	lds	r24, 0x0281
    6a16:	90 91 82 02 	lds	r25, 0x0282
    6a1a:	83 30       	cpi	r24, 0x03	; 3
    6a1c:	91 05       	cpc	r25, r1
    6a1e:	09 f0       	breq	.+2      	; 0x6a22 <main+0xb88>
    6a20:	83 c0       	rjmp	.+262    	; 0x6b28 <main+0xc8e>
							LCD_voidSetCursorLocation(1, 0); // Line 1, Column 0
    6a22:	81 e0       	ldi	r24, 0x01	; 1
    6a24:	60 e0       	ldi	r22, 0x00	; 0
    6a26:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <LCD_voidSetCursorLocation>
							LCD_voidwriteString((u8*) "No more trials");
    6a2a:	8e e7       	ldi	r24, 0x7E	; 126
    6a2c:	90 e0       	ldi	r25, 0x00	; 0
    6a2e:	0e 94 42 25 	call	0x4a84	; 0x4a84 <LCD_voidwriteString>
    6a32:	80 e0       	ldi	r24, 0x00	; 0
    6a34:	90 e0       	ldi	r25, 0x00	; 0
    6a36:	af e2       	ldi	r26, 0x2F	; 47
    6a38:	b4 e4       	ldi	r27, 0x44	; 68
    6a3a:	89 8f       	std	Y+25, r24	; 0x19
    6a3c:	9a 8f       	std	Y+26, r25	; 0x1a
    6a3e:	ab 8f       	std	Y+27, r26	; 0x1b
    6a40:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a42:	69 8d       	ldd	r22, Y+25	; 0x19
    6a44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6a46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6a48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6a4a:	20 e0       	ldi	r18, 0x00	; 0
    6a4c:	30 e0       	ldi	r19, 0x00	; 0
    6a4e:	4a ef       	ldi	r20, 0xFA	; 250
    6a50:	54 e4       	ldi	r21, 0x44	; 68
    6a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a56:	dc 01       	movw	r26, r24
    6a58:	cb 01       	movw	r24, r22
    6a5a:	8d 8b       	std	Y+21, r24	; 0x15
    6a5c:	9e 8b       	std	Y+22, r25	; 0x16
    6a5e:	af 8b       	std	Y+23, r26	; 0x17
    6a60:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6a62:	6d 89       	ldd	r22, Y+21	; 0x15
    6a64:	7e 89       	ldd	r23, Y+22	; 0x16
    6a66:	8f 89       	ldd	r24, Y+23	; 0x17
    6a68:	98 8d       	ldd	r25, Y+24	; 0x18
    6a6a:	20 e0       	ldi	r18, 0x00	; 0
    6a6c:	30 e0       	ldi	r19, 0x00	; 0
    6a6e:	40 e8       	ldi	r20, 0x80	; 128
    6a70:	5f e3       	ldi	r21, 0x3F	; 63
    6a72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6a76:	88 23       	and	r24, r24
    6a78:	2c f4       	brge	.+10     	; 0x6a84 <main+0xbea>
		__ticks = 1;
    6a7a:	81 e0       	ldi	r24, 0x01	; 1
    6a7c:	90 e0       	ldi	r25, 0x00	; 0
    6a7e:	9c 8b       	std	Y+20, r25	; 0x14
    6a80:	8b 8b       	std	Y+19, r24	; 0x13
    6a82:	3f c0       	rjmp	.+126    	; 0x6b02 <main+0xc68>
	else if (__tmp > 65535)
    6a84:	6d 89       	ldd	r22, Y+21	; 0x15
    6a86:	7e 89       	ldd	r23, Y+22	; 0x16
    6a88:	8f 89       	ldd	r24, Y+23	; 0x17
    6a8a:	98 8d       	ldd	r25, Y+24	; 0x18
    6a8c:	20 e0       	ldi	r18, 0x00	; 0
    6a8e:	3f ef       	ldi	r19, 0xFF	; 255
    6a90:	4f e7       	ldi	r20, 0x7F	; 127
    6a92:	57 e4       	ldi	r21, 0x47	; 71
    6a94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6a98:	18 16       	cp	r1, r24
    6a9a:	4c f5       	brge	.+82     	; 0x6aee <main+0xc54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a9c:	69 8d       	ldd	r22, Y+25	; 0x19
    6a9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6aa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6aa2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6aa4:	20 e0       	ldi	r18, 0x00	; 0
    6aa6:	30 e0       	ldi	r19, 0x00	; 0
    6aa8:	40 e2       	ldi	r20, 0x20	; 32
    6aaa:	51 e4       	ldi	r21, 0x41	; 65
    6aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ab0:	dc 01       	movw	r26, r24
    6ab2:	cb 01       	movw	r24, r22
    6ab4:	bc 01       	movw	r22, r24
    6ab6:	cd 01       	movw	r24, r26
    6ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6abc:	dc 01       	movw	r26, r24
    6abe:	cb 01       	movw	r24, r22
    6ac0:	9c 8b       	std	Y+20, r25	; 0x14
    6ac2:	8b 8b       	std	Y+19, r24	; 0x13
    6ac4:	0f c0       	rjmp	.+30     	; 0x6ae4 <main+0xc4a>
    6ac6:	88 ec       	ldi	r24, 0xC8	; 200
    6ac8:	90 e0       	ldi	r25, 0x00	; 0
    6aca:	9a 8b       	std	Y+18, r25	; 0x12
    6acc:	89 8b       	std	Y+17, r24	; 0x11
    6ace:	89 89       	ldd	r24, Y+17	; 0x11
    6ad0:	9a 89       	ldd	r25, Y+18	; 0x12
    6ad2:	01 97       	sbiw	r24, 0x01	; 1
    6ad4:	f1 f7       	brne	.-4      	; 0x6ad2 <main+0xc38>
    6ad6:	9a 8b       	std	Y+18, r25	; 0x12
    6ad8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ada:	8b 89       	ldd	r24, Y+19	; 0x13
    6adc:	9c 89       	ldd	r25, Y+20	; 0x14
    6ade:	01 97       	sbiw	r24, 0x01	; 1
    6ae0:	9c 8b       	std	Y+20, r25	; 0x14
    6ae2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6ae4:	8b 89       	ldd	r24, Y+19	; 0x13
    6ae6:	9c 89       	ldd	r25, Y+20	; 0x14
    6ae8:	00 97       	sbiw	r24, 0x00	; 0
    6aea:	69 f7       	brne	.-38     	; 0x6ac6 <main+0xc2c>
    6aec:	14 c0       	rjmp	.+40     	; 0x6b16 <main+0xc7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6aee:	6d 89       	ldd	r22, Y+21	; 0x15
    6af0:	7e 89       	ldd	r23, Y+22	; 0x16
    6af2:	8f 89       	ldd	r24, Y+23	; 0x17
    6af4:	98 8d       	ldd	r25, Y+24	; 0x18
    6af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6afa:	dc 01       	movw	r26, r24
    6afc:	cb 01       	movw	r24, r22
    6afe:	9c 8b       	std	Y+20, r25	; 0x14
    6b00:	8b 8b       	std	Y+19, r24	; 0x13
    6b02:	8b 89       	ldd	r24, Y+19	; 0x13
    6b04:	9c 89       	ldd	r25, Y+20	; 0x14
    6b06:	98 8b       	std	Y+16, r25	; 0x10
    6b08:	8f 87       	std	Y+15, r24	; 0x0f
    6b0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6b0c:	98 89       	ldd	r25, Y+16	; 0x10
    6b0e:	01 97       	sbiw	r24, 0x01	; 1
    6b10:	f1 f7       	brne	.-4      	; 0x6b0e <main+0xc74>
    6b12:	98 8b       	std	Y+16, r25	; 0x10
    6b14:	8f 87       	std	Y+15, r24	; 0x0f
							_delay_ms(700);
							LCD_voidClearDisplay();
    6b16:	0e 94 38 25 	call	0x4a70	; 0x4a70 <LCD_voidClearDisplay>
							password_repeated_times_web = 0;
    6b1a:	10 92 82 02 	sts	0x0282, r1
    6b1e:	10 92 81 02 	sts	0x0281, r1
							Red_blink();	// green led off red led blink
    6b22:	0e 94 a9 2a 	call	0x5552	; 0x5552 <Red_blink>
    6b26:	07 ca       	rjmp	.-3058   	; 0x5f36 <main+0x9c>
							break;
    6b28:	80 e0       	ldi	r24, 0x00	; 0
    6b2a:	90 e0       	ldi	r25, 0x00	; 0
    6b2c:	af e2       	ldi	r26, 0x2F	; 47
    6b2e:	b4 e4       	ldi	r27, 0x44	; 68
    6b30:	8b 87       	std	Y+11, r24	; 0x0b
    6b32:	9c 87       	std	Y+12, r25	; 0x0c
    6b34:	ad 87       	std	Y+13, r26	; 0x0d
    6b36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6b38:	6b 85       	ldd	r22, Y+11	; 0x0b
    6b3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    6b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b40:	20 e0       	ldi	r18, 0x00	; 0
    6b42:	30 e0       	ldi	r19, 0x00	; 0
    6b44:	4a ef       	ldi	r20, 0xFA	; 250
    6b46:	54 e4       	ldi	r21, 0x44	; 68
    6b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b4c:	dc 01       	movw	r26, r24
    6b4e:	cb 01       	movw	r24, r22
    6b50:	8f 83       	std	Y+7, r24	; 0x07
    6b52:	98 87       	std	Y+8, r25	; 0x08
    6b54:	a9 87       	std	Y+9, r26	; 0x09
    6b56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6b58:	6f 81       	ldd	r22, Y+7	; 0x07
    6b5a:	78 85       	ldd	r23, Y+8	; 0x08
    6b5c:	89 85       	ldd	r24, Y+9	; 0x09
    6b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b60:	20 e0       	ldi	r18, 0x00	; 0
    6b62:	30 e0       	ldi	r19, 0x00	; 0
    6b64:	40 e8       	ldi	r20, 0x80	; 128
    6b66:	5f e3       	ldi	r21, 0x3F	; 63
    6b68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6b6c:	88 23       	and	r24, r24
    6b6e:	2c f4       	brge	.+10     	; 0x6b7a <main+0xce0>
		__ticks = 1;
    6b70:	81 e0       	ldi	r24, 0x01	; 1
    6b72:	90 e0       	ldi	r25, 0x00	; 0
    6b74:	9e 83       	std	Y+6, r25	; 0x06
    6b76:	8d 83       	std	Y+5, r24	; 0x05
    6b78:	3f c0       	rjmp	.+126    	; 0x6bf8 <main+0xd5e>
	else if (__tmp > 65535)
    6b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    6b7c:	78 85       	ldd	r23, Y+8	; 0x08
    6b7e:	89 85       	ldd	r24, Y+9	; 0x09
    6b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b82:	20 e0       	ldi	r18, 0x00	; 0
    6b84:	3f ef       	ldi	r19, 0xFF	; 255
    6b86:	4f e7       	ldi	r20, 0x7F	; 127
    6b88:	57 e4       	ldi	r21, 0x47	; 71
    6b8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6b8e:	18 16       	cp	r1, r24
    6b90:	4c f5       	brge	.+82     	; 0x6be4 <main+0xd4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b92:	6b 85       	ldd	r22, Y+11	; 0x0b
    6b94:	7c 85       	ldd	r23, Y+12	; 0x0c
    6b96:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b98:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b9a:	20 e0       	ldi	r18, 0x00	; 0
    6b9c:	30 e0       	ldi	r19, 0x00	; 0
    6b9e:	40 e2       	ldi	r20, 0x20	; 32
    6ba0:	51 e4       	ldi	r21, 0x41	; 65
    6ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ba6:	dc 01       	movw	r26, r24
    6ba8:	cb 01       	movw	r24, r22
    6baa:	bc 01       	movw	r22, r24
    6bac:	cd 01       	movw	r24, r26
    6bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6bb2:	dc 01       	movw	r26, r24
    6bb4:	cb 01       	movw	r24, r22
    6bb6:	9e 83       	std	Y+6, r25	; 0x06
    6bb8:	8d 83       	std	Y+5, r24	; 0x05
    6bba:	0f c0       	rjmp	.+30     	; 0x6bda <main+0xd40>
    6bbc:	88 ec       	ldi	r24, 0xC8	; 200
    6bbe:	90 e0       	ldi	r25, 0x00	; 0
    6bc0:	9c 83       	std	Y+4, r25	; 0x04
    6bc2:	8b 83       	std	Y+3, r24	; 0x03
    6bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    6bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    6bc8:	01 97       	sbiw	r24, 0x01	; 1
    6bca:	f1 f7       	brne	.-4      	; 0x6bc8 <main+0xd2e>
    6bcc:	9c 83       	std	Y+4, r25	; 0x04
    6bce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    6bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    6bd4:	01 97       	sbiw	r24, 0x01	; 1
    6bd6:	9e 83       	std	Y+6, r25	; 0x06
    6bd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6bda:	8d 81       	ldd	r24, Y+5	; 0x05
    6bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    6bde:	00 97       	sbiw	r24, 0x00	; 0
    6be0:	69 f7       	brne	.-38     	; 0x6bbc <main+0xd22>
    6be2:	14 c0       	rjmp	.+40     	; 0x6c0c <main+0xd72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6be4:	6f 81       	ldd	r22, Y+7	; 0x07
    6be6:	78 85       	ldd	r23, Y+8	; 0x08
    6be8:	89 85       	ldd	r24, Y+9	; 0x09
    6bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6bf0:	dc 01       	movw	r26, r24
    6bf2:	cb 01       	movw	r24, r22
    6bf4:	9e 83       	std	Y+6, r25	; 0x06
    6bf6:	8d 83       	std	Y+5, r24	; 0x05
    6bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    6bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    6bfc:	9a 83       	std	Y+2, r25	; 0x02
    6bfe:	89 83       	std	Y+1, r24	; 0x01
    6c00:	89 81       	ldd	r24, Y+1	; 0x01
    6c02:	9a 81       	ldd	r25, Y+2	; 0x02
    6c04:	01 97       	sbiw	r24, 0x01	; 1
    6c06:	f1 f7       	brne	.-4      	; 0x6c04 <main+0xd6a>
    6c08:	9a 83       	std	Y+2, r25	; 0x02
    6c0a:	89 83       	std	Y+1, r24	; 0x01
						}
						else{}
						_delay_ms(700);
						LCD_voidClearDisplay();
    6c0c:	0e 94 38 25 	call	0x4a70	; 0x4a70 <LCD_voidClearDisplay>
    6c10:	92 c9       	rjmp	.-3292   	; 0x5f36 <main+0x9c>

					}

				}
				else{}
				UART_character = UART_u8Receive();
    6c12:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <UART_u8Receive>
    6c16:	80 93 79 02 	sts	0x0279, r24
				//echo
				UART_voidTransmit(UART_character);
    6c1a:	80 91 79 02 	lds	r24, 0x0279
    6c1e:	0e 94 35 09 	call	0x126a	; 0x126a <UART_voidTransmit>
    6c22:	95 c9       	rjmp	.-3286   	; 0x5f4e <main+0xb4>

00006c24 <__mulsi3>:
    6c24:	62 9f       	mul	r22, r18
    6c26:	d0 01       	movw	r26, r0
    6c28:	73 9f       	mul	r23, r19
    6c2a:	f0 01       	movw	r30, r0
    6c2c:	82 9f       	mul	r24, r18
    6c2e:	e0 0d       	add	r30, r0
    6c30:	f1 1d       	adc	r31, r1
    6c32:	64 9f       	mul	r22, r20
    6c34:	e0 0d       	add	r30, r0
    6c36:	f1 1d       	adc	r31, r1
    6c38:	92 9f       	mul	r25, r18
    6c3a:	f0 0d       	add	r31, r0
    6c3c:	83 9f       	mul	r24, r19
    6c3e:	f0 0d       	add	r31, r0
    6c40:	74 9f       	mul	r23, r20
    6c42:	f0 0d       	add	r31, r0
    6c44:	65 9f       	mul	r22, r21
    6c46:	f0 0d       	add	r31, r0
    6c48:	99 27       	eor	r25, r25
    6c4a:	72 9f       	mul	r23, r18
    6c4c:	b0 0d       	add	r27, r0
    6c4e:	e1 1d       	adc	r30, r1
    6c50:	f9 1f       	adc	r31, r25
    6c52:	63 9f       	mul	r22, r19
    6c54:	b0 0d       	add	r27, r0
    6c56:	e1 1d       	adc	r30, r1
    6c58:	f9 1f       	adc	r31, r25
    6c5a:	bd 01       	movw	r22, r26
    6c5c:	cf 01       	movw	r24, r30
    6c5e:	11 24       	eor	r1, r1
    6c60:	08 95       	ret

00006c62 <__udivmodsi4>:
    6c62:	a1 e2       	ldi	r26, 0x21	; 33
    6c64:	1a 2e       	mov	r1, r26
    6c66:	aa 1b       	sub	r26, r26
    6c68:	bb 1b       	sub	r27, r27
    6c6a:	fd 01       	movw	r30, r26
    6c6c:	0d c0       	rjmp	.+26     	; 0x6c88 <__udivmodsi4_ep>

00006c6e <__udivmodsi4_loop>:
    6c6e:	aa 1f       	adc	r26, r26
    6c70:	bb 1f       	adc	r27, r27
    6c72:	ee 1f       	adc	r30, r30
    6c74:	ff 1f       	adc	r31, r31
    6c76:	a2 17       	cp	r26, r18
    6c78:	b3 07       	cpc	r27, r19
    6c7a:	e4 07       	cpc	r30, r20
    6c7c:	f5 07       	cpc	r31, r21
    6c7e:	20 f0       	brcs	.+8      	; 0x6c88 <__udivmodsi4_ep>
    6c80:	a2 1b       	sub	r26, r18
    6c82:	b3 0b       	sbc	r27, r19
    6c84:	e4 0b       	sbc	r30, r20
    6c86:	f5 0b       	sbc	r31, r21

00006c88 <__udivmodsi4_ep>:
    6c88:	66 1f       	adc	r22, r22
    6c8a:	77 1f       	adc	r23, r23
    6c8c:	88 1f       	adc	r24, r24
    6c8e:	99 1f       	adc	r25, r25
    6c90:	1a 94       	dec	r1
    6c92:	69 f7       	brne	.-38     	; 0x6c6e <__udivmodsi4_loop>
    6c94:	60 95       	com	r22
    6c96:	70 95       	com	r23
    6c98:	80 95       	com	r24
    6c9a:	90 95       	com	r25
    6c9c:	9b 01       	movw	r18, r22
    6c9e:	ac 01       	movw	r20, r24
    6ca0:	bd 01       	movw	r22, r26
    6ca2:	cf 01       	movw	r24, r30
    6ca4:	08 95       	ret

00006ca6 <__prologue_saves__>:
    6ca6:	2f 92       	push	r2
    6ca8:	3f 92       	push	r3
    6caa:	4f 92       	push	r4
    6cac:	5f 92       	push	r5
    6cae:	6f 92       	push	r6
    6cb0:	7f 92       	push	r7
    6cb2:	8f 92       	push	r8
    6cb4:	9f 92       	push	r9
    6cb6:	af 92       	push	r10
    6cb8:	bf 92       	push	r11
    6cba:	cf 92       	push	r12
    6cbc:	df 92       	push	r13
    6cbe:	ef 92       	push	r14
    6cc0:	ff 92       	push	r15
    6cc2:	0f 93       	push	r16
    6cc4:	1f 93       	push	r17
    6cc6:	cf 93       	push	r28
    6cc8:	df 93       	push	r29
    6cca:	cd b7       	in	r28, 0x3d	; 61
    6ccc:	de b7       	in	r29, 0x3e	; 62
    6cce:	ca 1b       	sub	r28, r26
    6cd0:	db 0b       	sbc	r29, r27
    6cd2:	0f b6       	in	r0, 0x3f	; 63
    6cd4:	f8 94       	cli
    6cd6:	de bf       	out	0x3e, r29	; 62
    6cd8:	0f be       	out	0x3f, r0	; 63
    6cda:	cd bf       	out	0x3d, r28	; 61
    6cdc:	09 94       	ijmp

00006cde <__epilogue_restores__>:
    6cde:	2a 88       	ldd	r2, Y+18	; 0x12
    6ce0:	39 88       	ldd	r3, Y+17	; 0x11
    6ce2:	48 88       	ldd	r4, Y+16	; 0x10
    6ce4:	5f 84       	ldd	r5, Y+15	; 0x0f
    6ce6:	6e 84       	ldd	r6, Y+14	; 0x0e
    6ce8:	7d 84       	ldd	r7, Y+13	; 0x0d
    6cea:	8c 84       	ldd	r8, Y+12	; 0x0c
    6cec:	9b 84       	ldd	r9, Y+11	; 0x0b
    6cee:	aa 84       	ldd	r10, Y+10	; 0x0a
    6cf0:	b9 84       	ldd	r11, Y+9	; 0x09
    6cf2:	c8 84       	ldd	r12, Y+8	; 0x08
    6cf4:	df 80       	ldd	r13, Y+7	; 0x07
    6cf6:	ee 80       	ldd	r14, Y+6	; 0x06
    6cf8:	fd 80       	ldd	r15, Y+5	; 0x05
    6cfa:	0c 81       	ldd	r16, Y+4	; 0x04
    6cfc:	1b 81       	ldd	r17, Y+3	; 0x03
    6cfe:	aa 81       	ldd	r26, Y+2	; 0x02
    6d00:	b9 81       	ldd	r27, Y+1	; 0x01
    6d02:	ce 0f       	add	r28, r30
    6d04:	d1 1d       	adc	r29, r1
    6d06:	0f b6       	in	r0, 0x3f	; 63
    6d08:	f8 94       	cli
    6d0a:	de bf       	out	0x3e, r29	; 62
    6d0c:	0f be       	out	0x3f, r0	; 63
    6d0e:	cd bf       	out	0x3d, r28	; 61
    6d10:	ed 01       	movw	r28, r26
    6d12:	08 95       	ret

00006d14 <_exit>:
    6d14:	f8 94       	cli

00006d16 <__stop_program>:
    6d16:	ff cf       	rjmp	.-2      	; 0x6d16 <__stop_program>
